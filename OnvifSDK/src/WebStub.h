/* WebStub.h
   Generated by gSOAP 2.8.15 from web.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef WebStub_H
#define WebStub_H
#include <vector>
#define SOAP_WSA_2005
#define SOAP_NAMESPACE_OF_tds	"http://www.onvif.org/ver10/device/wsdl"
#define SOAP_NAMESPACE_OF_tt	"http://www.onvif.org/ver10/schema"
#define SOAP_NAMESPACE_OF_wsnt	"http://docs.oasis-open.org/wsn/b-2"
#define SOAP_NAMESPACE_OF_wsrfbf	"http://docs.oasis-open.org/wsrf/bf-2"
#define SOAP_NAMESPACE_OF_wstop	"http://docs.oasis-open.org/wsn/t-1"
#define SOAP_NAMESPACE_OF_tmd	"http://www.onvif.org/ver10/deviceIO/wsdl"
#define SOAP_NAMESPACE_OF_trt	"http://www.onvif.org/ver10/media/wsdl"
#define SOAP_NAMESPACE_OF_tls	"http://www.onvif.org/ver10/display/wsdl"
#define SOAP_NAMESPACE_OF_trp	"http://www.onvif.org/ver10/replay/wsdl"
#define SOAP_NAMESPACE_OF_tse	"http://www.onvif.org/ver10/search/wsdl"
#define SOAP_NAMESPACE_OF_trv	"http://www.onvif.org/ver10/receiver/wsdl"
#define SOAP_NAMESPACE_OF_tev	"http://www.onvif.org/ver10/events/wsdl"
#define SOAP_NAMESPACE_OF_ns1	""
#define SOAP_NAMESPACE_OF_wsrfrw	"http://docs.oasis-open.org/wsrf/rw-2"
#define SOAP_NAMESPACE_OF_wsrfr	"http://docs.oasis-open.org/wsrf/r-2"
#define SOAP_NAMESPACE_OF_dn	"http://www.onvif.org/ver10/network/wsdl"
#define SOAP_NAMESPACE_OF_wsd	"http://schemas.xmlsoap.org/ws/2005/04/discovery"
#define SOAP_NAMESPACE_OF_wsa	"http://schemas.xmlsoap.org/ws/2004/08/addressing"
#define SOAP_NAMESPACE_OF_tan	"http://www.onvif.org/ver20/analytics/wsdl"
#define SOAP_NAMESPACE_OF_trc	"http://www.onvif.org/ver10/recording/wsdl"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20815
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_wsa5__RelationshipType
#define SOAP_TYPE_wsa5__RelationshipType (19)
/* wsa5:RelationshipType */
enum wsa5__RelationshipType { http_x003a_x002f_x002fwww_x002ew3_x002eorg_x002f2005_x002f08_x002faddressing_x002freply = 0 };
typedef enum wsa5__RelationshipType wsa5__RelationshipType;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesType
#define SOAP_TYPE_wsa5__FaultCodesType (20)
/* wsa5:FaultCodesType */
enum wsa5__FaultCodesType { wsa5__InvalidAddressingHeader = 0, wsa5__InvalidAddress = 1, wsa5__InvalidEPR = 2, wsa5__InvalidCardinality = 3, wsa5__MissingAddressInEPR = 4, wsa5__DuplicateMessageID = 5, wsa5__ActionMismatch = 6, wsa5__MessageAddressingHeaderRequired = 7, wsa5__DestinationUnreachable = 8, wsa5__ActionNotSupported = 9, wsa5__EndpointUnavailable = 10 };
typedef enum wsa5__FaultCodesType wsa5__FaultCodesType;
#endif

#ifndef SOAP_TYPE__wsa5__IsReferenceParameter
#define SOAP_TYPE__wsa5__IsReferenceParameter (40)
/* wsa5:IsReferenceParameter */
enum _wsa5__IsReferenceParameter { _wsa5__IsReferenceParameter__false = 0, _wsa5__IsReferenceParameter__true = 1 };
typedef enum _wsa5__IsReferenceParameter _wsa5__IsReferenceParameter;
#endif

#ifndef SOAP_TYPE_tt__RotateMode
#define SOAP_TYPE_tt__RotateMode (1115)
/* tt:RotateMode */
enum tt__RotateMode { tt__RotateMode__OFF = 0, tt__RotateMode__ON = 1, tt__RotateMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__VideoEncoding
#define SOAP_TYPE_tt__VideoEncoding (1116)
/* tt:VideoEncoding */
enum tt__VideoEncoding { tt__VideoEncoding__JPEG = 0, tt__VideoEncoding__MPEG4 = 1, tt__VideoEncoding__H264 = 2 };
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Profile
#define SOAP_TYPE_tt__Mpeg4Profile (1117)
/* tt:Mpeg4Profile */
enum tt__Mpeg4Profile { tt__Mpeg4Profile__SP = 0, tt__Mpeg4Profile__ASP = 1 };
#endif

#ifndef SOAP_TYPE_tt__H264Profile
#define SOAP_TYPE_tt__H264Profile (1118)
/* tt:H264Profile */
enum tt__H264Profile { tt__H264Profile__Baseline = 0, tt__H264Profile__Main = 1, tt__H264Profile__Extended = 2, tt__H264Profile__High = 3 };
#endif

#ifndef SOAP_TYPE_tt__AudioEncoding
#define SOAP_TYPE_tt__AudioEncoding (1119)
/* tt:AudioEncoding */
enum tt__AudioEncoding { tt__AudioEncoding__G711 = 0, tt__AudioEncoding__G726 = 1, tt__AudioEncoding__AAC = 2 };
#endif

#ifndef SOAP_TYPE_tt__StreamType
#define SOAP_TYPE_tt__StreamType (1120)
/* tt:StreamType */
enum tt__StreamType { tt__StreamType__RTP_Unicast = 0, tt__StreamType__RTP_Multicast = 1 };
#endif

#ifndef SOAP_TYPE_tt__TransportProtocol
#define SOAP_TYPE_tt__TransportProtocol (1121)
/* tt:TransportProtocol */
enum tt__TransportProtocol { tt__TransportProtocol__UDP = 0, tt__TransportProtocol__TCP = 1, tt__TransportProtocol__RTSP = 2, tt__TransportProtocol__HTTP = 3 };
#endif

#ifndef SOAP_TYPE_tt__ScopeDefinition
#define SOAP_TYPE_tt__ScopeDefinition (1122)
/* tt:ScopeDefinition */
enum tt__ScopeDefinition { tt__ScopeDefinition__Fixed = 0, tt__ScopeDefinition__Configurable = 1 };
#endif

#ifndef SOAP_TYPE_tt__DiscoveryMode
#define SOAP_TYPE_tt__DiscoveryMode (1123)
/* tt:DiscoveryMode */
enum tt__DiscoveryMode { tt__DiscoveryMode__Discoverable = 0, tt__DiscoveryMode__NonDiscoverable = 1 };
#endif

#ifndef SOAP_TYPE_tt__Duplex
#define SOAP_TYPE_tt__Duplex (1125)
/* tt:Duplex */
enum tt__Duplex { tt__Duplex__Full = 0, tt__Duplex__Half = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPv6DHCPConfiguration
#define SOAP_TYPE_tt__IPv6DHCPConfiguration (1127)
/* tt:IPv6DHCPConfiguration */
enum tt__IPv6DHCPConfiguration { tt__IPv6DHCPConfiguration__Auto = 0, tt__IPv6DHCPConfiguration__Stateful = 1, tt__IPv6DHCPConfiguration__Stateless = 2, tt__IPv6DHCPConfiguration__Off = 3 };
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolType
#define SOAP_TYPE_tt__NetworkProtocolType (1128)
/* tt:NetworkProtocolType */
enum tt__NetworkProtocolType { tt__NetworkProtocolType__HTTP = 0, tt__NetworkProtocolType__HTTPS = 1, tt__NetworkProtocolType__RTSP = 2 };
#endif

#ifndef SOAP_TYPE_tt__NetworkHostType
#define SOAP_TYPE_tt__NetworkHostType (1129)
/* tt:NetworkHostType */
enum tt__NetworkHostType { tt__NetworkHostType__IPv4 = 0, tt__NetworkHostType__IPv6 = 1, tt__NetworkHostType__DNS = 2 };
#endif

#ifndef SOAP_TYPE_tt__IPType
#define SOAP_TYPE_tt__IPType (1133)
/* tt:IPType */
enum tt__IPType { tt__IPType__IPv4 = 0, tt__IPType__IPv6 = 1 };
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterType
#define SOAP_TYPE_tt__IPAddressFilterType (1136)
/* tt:IPAddressFilterType */
enum tt__IPAddressFilterType { tt__IPAddressFilterType__Allow = 0, tt__IPAddressFilterType__Deny = 1 };
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSType
#define SOAP_TYPE_tt__DynamicDNSType (1137)
/* tt:DynamicDNSType */
enum tt__DynamicDNSType { tt__DynamicDNSType__NoUpdate = 0, tt__DynamicDNSType__ClientUpdates = 1, tt__DynamicDNSType__ServerUpdates = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11StationMode
#define SOAP_TYPE_tt__Dot11StationMode (1139)
/* tt:Dot11StationMode */
enum tt__Dot11StationMode { tt__Dot11StationMode__Ad_hoc = 0, tt__Dot11StationMode__Infrastructure = 1, tt__Dot11StationMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityMode
#define SOAP_TYPE_tt__Dot11SecurityMode (1140)
/* tt:Dot11SecurityMode */
enum tt__Dot11SecurityMode { tt__Dot11SecurityMode__None = 0, tt__Dot11SecurityMode__WEP = 1, tt__Dot11SecurityMode__PSK = 2, tt__Dot11SecurityMode__Dot1X = 3, tt__Dot11SecurityMode__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__Dot11Cipher
#define SOAP_TYPE_tt__Dot11Cipher (1141)
/* tt:Dot11Cipher */
enum tt__Dot11Cipher { tt__Dot11Cipher__CCMP = 0, tt__Dot11Cipher__TKIP = 1, tt__Dot11Cipher__Any = 2, tt__Dot11Cipher__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__Dot11SignalStrength
#define SOAP_TYPE_tt__Dot11SignalStrength (1144)
/* tt:Dot11SignalStrength */
enum tt__Dot11SignalStrength { tt__Dot11SignalStrength__None = 0, tt__Dot11SignalStrength__Very_x0020Bad = 1, tt__Dot11SignalStrength__Bad = 2, tt__Dot11SignalStrength__Good = 3, tt__Dot11SignalStrength__Very_x0020Good = 4, tt__Dot11SignalStrength__Extended = 5 };
#endif

#ifndef SOAP_TYPE_tt__Dot11AuthAndMangementSuite
#define SOAP_TYPE_tt__Dot11AuthAndMangementSuite (1145)
/* tt:Dot11AuthAndMangementSuite */
enum tt__Dot11AuthAndMangementSuite { tt__Dot11AuthAndMangementSuite__None = 0, tt__Dot11AuthAndMangementSuite__Dot1X = 1, tt__Dot11AuthAndMangementSuite__PSK = 2, tt__Dot11AuthAndMangementSuite__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__CapabilityCategory
#define SOAP_TYPE_tt__CapabilityCategory (1146)
/* tt:CapabilityCategory */
enum tt__CapabilityCategory { tt__CapabilityCategory__All = 0, tt__CapabilityCategory__Analytics = 1, tt__CapabilityCategory__Device = 2, tt__CapabilityCategory__Events = 3, tt__CapabilityCategory__Imaging = 4, tt__CapabilityCategory__Media = 5, tt__CapabilityCategory__PTZ = 6 };
#endif

#ifndef SOAP_TYPE_tt__SystemLogType
#define SOAP_TYPE_tt__SystemLogType (1147)
/* tt:SystemLogType */
enum tt__SystemLogType { tt__SystemLogType__System = 0, tt__SystemLogType__Access = 1 };
#endif

#ifndef SOAP_TYPE_tt__FactoryDefaultType
#define SOAP_TYPE_tt__FactoryDefaultType (1148)
/* tt:FactoryDefaultType */
enum tt__FactoryDefaultType { tt__FactoryDefaultType__Hard = 0, tt__FactoryDefaultType__Soft = 1 };
#endif

#ifndef SOAP_TYPE_tt__SetDateTimeType
#define SOAP_TYPE_tt__SetDateTimeType (1149)
/* tt:SetDateTimeType */
enum tt__SetDateTimeType { tt__SetDateTimeType__Manual = 0, tt__SetDateTimeType__NTP = 1 };
#endif

#ifndef SOAP_TYPE_tt__UserLevel
#define SOAP_TYPE_tt__UserLevel (1150)
/* tt:UserLevel */
enum tt__UserLevel { tt__UserLevel__Administrator = 0, tt__UserLevel__Operator = 1, tt__UserLevel__User = 2, tt__UserLevel__Anonymous = 3, tt__UserLevel__Extended = 4 };
#endif

#ifndef SOAP_TYPE_tt__RelayLogicalState
#define SOAP_TYPE_tt__RelayLogicalState (1151)
/* tt:RelayLogicalState */
enum tt__RelayLogicalState { tt__RelayLogicalState__active = 0, tt__RelayLogicalState__inactive = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayIdleState
#define SOAP_TYPE_tt__RelayIdleState (1152)
/* tt:RelayIdleState */
enum tt__RelayIdleState { tt__RelayIdleState__closed = 0, tt__RelayIdleState__open = 1 };
#endif

#ifndef SOAP_TYPE_tt__RelayMode
#define SOAP_TYPE_tt__RelayMode (1153)
/* tt:RelayMode */
enum tt__RelayMode { tt__RelayMode__Monostable = 0, tt__RelayMode__Bistable = 1 };
#endif

#ifndef SOAP_TYPE_tt__EFlipMode
#define SOAP_TYPE_tt__EFlipMode (1154)
/* tt:EFlipMode */
enum tt__EFlipMode { tt__EFlipMode__OFF = 0, tt__EFlipMode__ON = 1, tt__EFlipMode__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__ReverseMode
#define SOAP_TYPE_tt__ReverseMode (1155)
/* tt:ReverseMode */
enum tt__ReverseMode { tt__ReverseMode__OFF = 0, tt__ReverseMode__ON = 1, tt__ReverseMode__AUTO = 2, tt__ReverseMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__MoveStatus
#define SOAP_TYPE_tt__MoveStatus (1157)
/* tt:MoveStatus */
enum tt__MoveStatus { tt__MoveStatus__IDLE = 0, tt__MoveStatus__MOVING = 1, tt__MoveStatus__UNKNOWN = 2 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourState
#define SOAP_TYPE_tt__PTZPresetTourState (1158)
/* tt:PTZPresetTourState */
enum tt__PTZPresetTourState { tt__PTZPresetTourState__Idle = 0, tt__PTZPresetTourState__Touring = 1, tt__PTZPresetTourState__Paused = 2, tt__PTZPresetTourState__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourDirection
#define SOAP_TYPE_tt__PTZPresetTourDirection (1159)
/* tt:PTZPresetTourDirection */
enum tt__PTZPresetTourDirection { tt__PTZPresetTourDirection__Forward = 0, tt__PTZPresetTourDirection__Backward = 1, tt__PTZPresetTourDirection__Extended = 2 };
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOperation
#define SOAP_TYPE_tt__PTZPresetTourOperation (1160)
/* tt:PTZPresetTourOperation */
enum tt__PTZPresetTourOperation { tt__PTZPresetTourOperation__Start = 0, tt__PTZPresetTourOperation__Stop = 1, tt__PTZPresetTourOperation__Pause = 2, tt__PTZPresetTourOperation__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__AutoFocusMode
#define SOAP_TYPE_tt__AutoFocusMode (1161)
/* tt:AutoFocusMode */
enum tt__AutoFocusMode { tt__AutoFocusMode__AUTO = 0, tt__AutoFocusMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__WideDynamicMode
#define SOAP_TYPE_tt__WideDynamicMode (1162)
/* tt:WideDynamicMode */
enum tt__WideDynamicMode { tt__WideDynamicMode__OFF = 0, tt__WideDynamicMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationMode
#define SOAP_TYPE_tt__BacklightCompensationMode (1163)
/* tt:BacklightCompensationMode */
enum tt__BacklightCompensationMode { tt__BacklightCompensationMode__OFF = 0, tt__BacklightCompensationMode__ON = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposurePriority
#define SOAP_TYPE_tt__ExposurePriority (1164)
/* tt:ExposurePriority */
enum tt__ExposurePriority { tt__ExposurePriority__LowNoise = 0, tt__ExposurePriority__FrameRate = 1 };
#endif

#ifndef SOAP_TYPE_tt__ExposureMode
#define SOAP_TYPE_tt__ExposureMode (1165)
/* tt:ExposureMode */
enum tt__ExposureMode { tt__ExposureMode__AUTO = 0, tt__ExposureMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__Enabled
#define SOAP_TYPE_tt__Enabled (1166)
/* tt:Enabled */
enum tt__Enabled { tt__Enabled__ENABLED = 0, tt__Enabled__DISABLED = 1 };
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceMode
#define SOAP_TYPE_tt__WhiteBalanceMode (1167)
/* tt:WhiteBalanceMode */
enum tt__WhiteBalanceMode { tt__WhiteBalanceMode__AUTO = 0, tt__WhiteBalanceMode__MANUAL = 1 };
#endif

#ifndef SOAP_TYPE_tt__IrCutFilterMode
#define SOAP_TYPE_tt__IrCutFilterMode (1168)
/* tt:IrCutFilterMode */
enum tt__IrCutFilterMode { tt__IrCutFilterMode__ON = 0, tt__IrCutFilterMode__OFF = 1, tt__IrCutFilterMode__AUTO = 2 };
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationMode
#define SOAP_TYPE_tt__ImageStabilizationMode (1169)
/* tt:ImageStabilizationMode */
enum tt__ImageStabilizationMode { tt__ImageStabilizationMode__OFF = 0, tt__ImageStabilizationMode__ON = 1, tt__ImageStabilizationMode__AUTO = 2, tt__ImageStabilizationMode__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__PropertyOperation
#define SOAP_TYPE_tt__PropertyOperation (1171)
/* tt:PropertyOperation */
enum tt__PropertyOperation { tt__PropertyOperation__Initialized = 0, tt__PropertyOperation__Deleted = 1, tt__PropertyOperation__Changed = 2 };
#endif

#ifndef SOAP_TYPE_tt__Direction
#define SOAP_TYPE_tt__Direction (1172)
/* tt:Direction */
enum tt__Direction { tt__Direction__Left = 0, tt__Direction__Right = 1, tt__Direction__Any = 2 };
#endif

#ifndef SOAP_TYPE_tt__ClassType
#define SOAP_TYPE_tt__ClassType (1173)
/* tt:ClassType */
enum tt__ClassType { tt__ClassType__Animal = 0, tt__ClassType__Face = 1, tt__ClassType__Human = 2, tt__ClassType__Vehical = 3, tt__ClassType__Other = 4 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverMode
#define SOAP_TYPE_tt__ReceiverMode (1174)
/* tt:ReceiverMode */
enum tt__ReceiverMode { tt__ReceiverMode__AutoConnect = 0, tt__ReceiverMode__AlwaysConnect = 1, tt__ReceiverMode__NeverConnect = 2, tt__ReceiverMode__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__ReceiverState
#define SOAP_TYPE_tt__ReceiverState (1175)
/* tt:ReceiverState */
enum tt__ReceiverState { tt__ReceiverState__NotConnected = 0, tt__ReceiverState__Connecting = 1, tt__ReceiverState__Connected = 2, tt__ReceiverState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__SearchState
#define SOAP_TYPE_tt__SearchState (1178)
/* tt:SearchState */
enum tt__SearchState { tt__SearchState__Queued = 0, tt__SearchState__Searching = 1, tt__SearchState__Completed = 2, tt__SearchState__Unknown = 3 };
#endif

#ifndef SOAP_TYPE_tt__RecordingStatus
#define SOAP_TYPE_tt__RecordingStatus (1179)
/* tt:RecordingStatus */
enum tt__RecordingStatus { tt__RecordingStatus__Initiated = 0, tt__RecordingStatus__Recording = 1, tt__RecordingStatus__Stopped = 2, tt__RecordingStatus__Removing = 3, tt__RecordingStatus__Removed = 4, tt__RecordingStatus__Unknown = 5 };
#endif

#ifndef SOAP_TYPE_tt__TrackType
#define SOAP_TYPE_tt__TrackType (1180)
/* tt:TrackType */
enum tt__TrackType { tt__TrackType__Video = 0, tt__TrackType__Audio = 1, tt__TrackType__Metadata = 2, tt__TrackType__Extended = 3 };
#endif

#ifndef SOAP_TYPE_tt__ModeOfOperation
#define SOAP_TYPE_tt__ModeOfOperation (1183)
/* tt:ModeOfOperation */
enum tt__ModeOfOperation { tt__ModeOfOperation__Idle = 0, tt__ModeOfOperation__Active = 1, tt__ModeOfOperation__Unknown = 2 };
#endif

#ifndef SOAP_TYPE_tmd__SerialPortType
#define SOAP_TYPE_tmd__SerialPortType (1187)
/* tmd:SerialPortType */
enum tmd__SerialPortType { tmd__SerialPortType__RS232 = 0, tmd__SerialPortType__RS422HalfDuplex = 1, tmd__SerialPortType__RS422FullDuplex = 2, tmd__SerialPortType__RS485HalfDuplex = 3, tmd__SerialPortType__RS485FullDuplex = 4, tmd__SerialPortType__Generic = 5 };
#endif

#ifndef SOAP_TYPE_tmd__ParityBit
#define SOAP_TYPE_tmd__ParityBit (1188)
/* tmd:ParityBit */
enum tmd__ParityBit { tmd__ParityBit__None = 0, tmd__ParityBit__Even = 1, tmd__ParityBit__Odd = 2, tmd__ParityBit__Mark = 3, tmd__ParityBit__Space = 4, tmd__ParityBit__Extended = 5 };
#endif

#ifndef SOAP_TYPE_wsd__RelationshipType
#define SOAP_TYPE_wsd__RelationshipType (1189)
/* wsd:RelationshipType */
enum wsd__RelationshipType { wsd__RelationshipType__wsd__Suppression = 0 };
#endif

#ifndef SOAP_TYPE_wsd__FaultCodeType
#define SOAP_TYPE_wsd__FaultCodeType (1190)
/* wsd:FaultCodeType */
enum wsd__FaultCodeType { wsd__FaultCodeType__wsd__MatchingRuleNotSupported = 0 };
#endif

#ifndef SOAP_TYPE_wsa__RelationshipTypeValues
#define SOAP_TYPE_wsa__RelationshipTypeValues (1191)
/* wsa:RelationshipTypeValues */
enum wsa__RelationshipTypeValues { wsa__RelationshipTypeValues__wsa__Reply = 0 };
#endif

#ifndef SOAP_TYPE_wsa__FaultSubcodeValues
#define SOAP_TYPE_wsa__FaultSubcodeValues (1192)
/* wsa:FaultSubcodeValues */
enum wsa__FaultSubcodeValues { wsa__FaultSubcodeValues__wsa__InvalidMessageInformationHeader = 0, wsa__FaultSubcodeValues__wsa__MessageInformationHeaderRequired = 1, wsa__FaultSubcodeValues__wsa__DestinationUnreachable = 2, wsa__FaultSubcodeValues__wsa__ActionNotSupported = 3, wsa__FaultSubcodeValues__wsa__EndpointUnavailable = 4 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (60)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__xop__Include
#define SOAP_TYPE__xop__Include (8)
/* Base64 schema type: */
struct _xop__Include
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 8; } /* = unique id SOAP_TYPE__xop__Include */
};
typedef struct _xop__Include _xop__Include;
#endif

#ifndef SOAP_TYPE_wsa5__EndpointReferenceType
#define SOAP_TYPE_wsa5__EndpointReferenceType (12)
/* wsa5:EndpointReferenceType */
struct wsa5__EndpointReferenceType
{
public:
	char *Address;	/* required element of type xsd:string */
	struct wsa5__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa5:ReferenceParametersType */
	struct wsa5__MetadataType *Metadata;	/* optional element of type wsa5:MetadataType */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 12; } /* = unique id SOAP_TYPE_wsa5__EndpointReferenceType */
};
typedef struct wsa5__EndpointReferenceType wsa5__EndpointReferenceType;
#endif

#ifndef SOAP_TYPE_wsa5__ReferenceParametersType
#define SOAP_TYPE_wsa5__ReferenceParametersType (13)
/* wsa5:ReferenceParametersType */
struct wsa5__ReferenceParametersType
{
public:
	int *chan__ChannelInstance;	/* optional element of type xsd:int */
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 13; } /* = unique id SOAP_TYPE_wsa5__ReferenceParametersType */
};
typedef struct wsa5__ReferenceParametersType wsa5__ReferenceParametersType;
#endif

#ifndef SOAP_TYPE_wsa5__MetadataType
#define SOAP_TYPE_wsa5__MetadataType (14)
/* wsa5:MetadataType */
struct wsa5__MetadataType
{
public:
	int __size;	/* sequence of elements <-any> */
	char **__any;
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 14; } /* = unique id SOAP_TYPE_wsa5__MetadataType */
};
typedef struct wsa5__MetadataType wsa5__MetadataType;
#endif

#ifndef SOAP_TYPE_wsa5__ProblemActionType
#define SOAP_TYPE_wsa5__ProblemActionType (16)
/* wsa5:ProblemActionType */
struct wsa5__ProblemActionType
{
public:
	char *Action;	/* optional element of type xsd:string */
	char *SoapAction;	/* optional element of type xsd:string */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 16; } /* = unique id SOAP_TYPE_wsa5__ProblemActionType */
};
typedef struct wsa5__ProblemActionType wsa5__ProblemActionType;
#endif

#ifndef SOAP_TYPE_wsa5__RelatesToType
#define SOAP_TYPE_wsa5__RelatesToType (15)
/* Primitive wsa5:RelatesToType schema type: */
struct wsa5__RelatesToType
{
public:
	char *__item;
	char *RelationshipType;	/* optional attribute of type wsa5:RelationshipTypeOpenEnum */
	char *__anyAttribute;	/* optional attribute of type xsd:anyType */
public:
	int soap_type() const { return 15; } /* = unique id SOAP_TYPE_wsa5__RelatesToType */
};
typedef struct wsa5__RelatesToType wsa5__RelatesToType;
#endif

#ifndef SOAP_TYPE_chan__ChannelInstanceType
#define SOAP_TYPE_chan__ChannelInstanceType (41)
/* Primitive chan:ChannelInstanceType schema type: */
struct chan__ChannelInstanceType
{
public:
	int __item;
	enum _wsa5__IsReferenceParameter wsa5__IsReferenceParameter;	/* optional attribute of type wsa5:IsReferenceParameter */
public:
	int soap_type() const { return 41; } /* = unique id SOAP_TYPE_chan__ChannelInstanceType */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (42)
/* SOAP Header: */
class wsa__EndpointReferenceType;  class wsa__Relationship;
struct SOAP_ENV__Header
{
public:
	char *wsa5__MessageID;	/* optional element of type wsa5:MessageID */
	struct wsa5__RelatesToType *wsa5__RelatesTo;	/* optional element of type wsa5:RelatesTo */
	struct wsa5__EndpointReferenceType *wsa5__From;	/* optional element of type wsa5:From */
	struct wsa5__EndpointReferenceType *wsa5__ReplyTo;	/* mustUnderstand */
	struct wsa5__EndpointReferenceType *wsa5__FaultTo;	/* mustUnderstand */
	char *wsa5__To;	/* mustUnderstand */
	char *wsa5__Action;	/* mustUnderstand */
	struct chan__ChannelInstanceType *chan__ChannelInstance;	/* optional element of type chan:ChannelInstanceType */
	char *wsa__MessageID;	/* optional element of type xsd:string */
	wsa__Relationship *wsa__RelatesTo;	/* optional element of type wsa:RelatesTo */
	wsa__EndpointReferenceType *wsa__From;	/* optional element of type wsa:From */
	wsa__EndpointReferenceType *wsa__ReplyTo;	/* optional element of type wsa:ReplyTo */
	wsa__EndpointReferenceType *wsa__FaultTo;	/* optional element of type wsa:FaultTo */
	char *wsa__To;	/* optional element of type xsd:string */
	char *wsa__Action;	/* optional element of type xsd:string */
	class wsd__AppSequenceType *wsd__AppSequence;	/* optional element of type wsd:AppSequenceType */
public:
	int soap_type() const { return 42; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (48)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 48; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (50)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 50; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (52)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 52; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (56)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 56; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (57)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (61)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (62)
/* hexBinary schema type: */
class SOAP_CMAC xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_xsd__hexBinary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__hexBinary() { xsd__hexBinary::soap_default(NULL); }
	virtual ~xsd__hexBinary() { }
};
#endif

#ifndef SOAP_TYPE__tds__Service_Capabilities
#define SOAP_TYPE__tds__Service_Capabilities (1198)
/* tds:Service-Capabilities */
class SOAP_CMAC _tds__Service_Capabilities
{
public:
	virtual int soap_type() const { return 1198; } /* = unique id SOAP_TYPE__tds__Service_Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__Service_Capabilities() { _tds__Service_Capabilities::soap_default(NULL); }
	virtual ~_tds__Service_Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__Service
#define SOAP_TYPE_tds__Service (75)
/* tds:Service */
class SOAP_CMAC tds__Service
{
public:
	std::string Namespace;	/* required element of type xsd:anyURI */
	std::string XAddr;	/* required element of type xsd:anyURI */
	_tds__Service_Capabilities *Capabilities;	/* optional element of type tds:Service-Capabilities */
	class tt__OnvifVersion *Version;	/* required element of type tt:OnvifVersion */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_tds__Service */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__Service() { tds__Service::soap_default(NULL); }
	virtual ~tds__Service() { }
};
#endif

#ifndef SOAP_TYPE_tds__DeviceServiceCapabilities
#define SOAP_TYPE_tds__DeviceServiceCapabilities (76)
/* tds:DeviceServiceCapabilities */
class SOAP_CMAC tds__DeviceServiceCapabilities
{
public:
	class tds__NetworkCapabilities *Network;	/* required element of type tds:NetworkCapabilities */
	class tds__SecurityCapabilities *Security;	/* required element of type tds:SecurityCapabilities */
	class tds__SystemCapabilities *System;	/* required element of type tds:SystemCapabilities */
	class tds__MiscCapabilities *Misc;	/* optional element of type tds:MiscCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_tds__DeviceServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__DeviceServiceCapabilities() { tds__DeviceServiceCapabilities::soap_default(NULL); }
	virtual ~tds__DeviceServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__NetworkCapabilities
#define SOAP_TYPE_tds__NetworkCapabilities (77)
/* tds:NetworkCapabilities */
class SOAP_CMAC tds__NetworkCapabilities
{
public:
	bool *IPFilter;	/* optional attribute */
	bool *ZeroConfiguration;	/* optional attribute */
	bool *IPVersion6;	/* optional attribute */
	bool *DynDNS;	/* optional attribute */
	bool *Dot11Configuration;	/* optional attribute */
	int *Dot1XConfigurations;	/* optional attribute */
	bool *HostnameFromDHCP;	/* optional attribute */
	int *NTP;	/* optional attribute */
	bool *DHCPv6;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_tds__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__NetworkCapabilities() { tds__NetworkCapabilities::soap_default(NULL); }
	virtual ~tds__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SecurityCapabilities
#define SOAP_TYPE_tds__SecurityCapabilities (78)
/* tds:SecurityCapabilities */
class SOAP_CMAC tds__SecurityCapabilities
{
public:
	bool *TLS1_x002e0;	/* optional attribute */
	bool *TLS1_x002e1;	/* optional attribute */
	bool *TLS1_x002e2;	/* optional attribute */
	bool *OnboardKeyGeneration;	/* optional attribute */
	bool *AccessPolicyConfig;	/* optional attribute */
	bool *DefaultAccessPolicy;	/* optional attribute */
	bool *Dot1X;	/* optional attribute */
	bool *RemoteUserHandling;	/* optional attribute */
	bool *X_x002e509Token;	/* optional attribute */
	bool *SAMLToken;	/* optional attribute */
	bool *KerberosToken;	/* optional attribute */
	bool *UsernameToken;	/* optional attribute */
	bool *HttpDigest;	/* optional attribute */
	bool *RELToken;	/* optional attribute */
	std::string *SupportedEAPMethods;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_tds__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SecurityCapabilities() { tds__SecurityCapabilities::soap_default(NULL); }
	virtual ~tds__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__SystemCapabilities
#define SOAP_TYPE_tds__SystemCapabilities (79)
/* tds:SystemCapabilities */
class SOAP_CMAC tds__SystemCapabilities
{
public:
	bool *DiscoveryResolve;	/* optional attribute */
	bool *DiscoveryBye;	/* optional attribute */
	bool *RemoteDiscovery;	/* optional attribute */
	bool *SystemBackup;	/* optional attribute */
	bool *SystemLogging;	/* optional attribute */
	bool *FirmwareUpgrade;	/* optional attribute */
	bool *HttpFirmwareUpgrade;	/* optional attribute */
	bool *HttpSystemBackup;	/* optional attribute */
	bool *HttpSystemLogging;	/* optional attribute */
	bool *HttpSupportInformation;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_tds__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__SystemCapabilities() { tds__SystemCapabilities::soap_default(NULL); }
	virtual ~tds__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tds__MiscCapabilities
#define SOAP_TYPE_tds__MiscCapabilities (80)
/* tds:MiscCapabilities */
class SOAP_CMAC tds__MiscCapabilities
{
public:
	std::string *AuxiliaryCommands;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_tds__MiscCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tds__MiscCapabilities() { tds__MiscCapabilities::soap_default(NULL); }
	virtual ~tds__MiscCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServices
#define SOAP_TYPE__tds__GetServices (81)
/* tds:GetServices */
class SOAP_CMAC _tds__GetServices
{
public:
	bool IncludeCapability;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE__tds__GetServices */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServices() { _tds__GetServices::soap_default(NULL); }
	virtual ~_tds__GetServices() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServicesResponse
#define SOAP_TYPE__tds__GetServicesResponse (82)
/* tds:GetServicesResponse */
class SOAP_CMAC _tds__GetServicesResponse
{
public:
	std::vector<tds__Service * >Service;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:Service */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE__tds__GetServicesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServicesResponse() { _tds__GetServicesResponse::soap_default(NULL); }
	virtual ~_tds__GetServicesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilities
#define SOAP_TYPE__tds__GetServiceCapabilities (83)
/* tds:GetServiceCapabilities */
class SOAP_CMAC _tds__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE__tds__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilities() { _tds__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tds__GetServiceCapabilitiesResponse (84)
/* tds:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tds__GetServiceCapabilitiesResponse
{
public:
	tds__DeviceServiceCapabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tds:DeviceServiceCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE__tds__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetServiceCapabilitiesResponse() { _tds__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformation
#define SOAP_TYPE__tds__GetDeviceInformation (85)
/* tds:GetDeviceInformation */
class SOAP_CMAC _tds__GetDeviceInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE__tds__GetDeviceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformation() { _tds__GetDeviceInformation::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDeviceInformationResponse
#define SOAP_TYPE__tds__GetDeviceInformationResponse (86)
/* tds:GetDeviceInformationResponse */
class SOAP_CMAC _tds__GetDeviceInformationResponse
{
public:
	std::string Manufacturer;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	std::string Model;	/* required element of type xsd:string */
	std::string FirmwareVersion;	/* required element of type xsd:string */
	std::string SerialNumber;	/* required element of type xsd:string */
	std::string HardwareId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE__tds__GetDeviceInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDeviceInformationResponse() { _tds__GetDeviceInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetDeviceInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTime
#define SOAP_TYPE__tds__SetSystemDateAndTime (87)
/* tds:SetSystemDateAndTime */
class SOAP_CMAC _tds__SetSystemDateAndTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	class tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	class tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE__tds__SetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTime() { _tds__SetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__SetSystemDateAndTimeResponse (88)
/* tds:SetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__SetSystemDateAndTimeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE__tds__SetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemDateAndTimeResponse() { _tds__SetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTime
#define SOAP_TYPE__tds__GetSystemDateAndTime (89)
/* tds:GetSystemDateAndTime */
class SOAP_CMAC _tds__GetSystemDateAndTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE__tds__GetSystemDateAndTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTime() { _tds__GetSystemDateAndTime::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTime() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemDateAndTimeResponse
#define SOAP_TYPE__tds__GetSystemDateAndTimeResponse (90)
/* tds:GetSystemDateAndTimeResponse */
class SOAP_CMAC _tds__GetSystemDateAndTimeResponse
{
public:
	class tt__SystemDateTime *SystemDateAndTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemDateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE__tds__GetSystemDateAndTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemDateAndTimeResponse() { _tds__GetSystemDateAndTimeResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemDateAndTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefault
#define SOAP_TYPE__tds__SetSystemFactoryDefault (91)
/* tds:SetSystemFactoryDefault */
class SOAP_CMAC _tds__SetSystemFactoryDefault
{
public:
	enum tt__FactoryDefaultType FactoryDefault;	/* required element of type tt:FactoryDefaultType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE__tds__SetSystemFactoryDefault */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefault() { _tds__SetSystemFactoryDefault::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefault() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetSystemFactoryDefaultResponse
#define SOAP_TYPE__tds__SetSystemFactoryDefaultResponse (92)
/* tds:SetSystemFactoryDefaultResponse */
class SOAP_CMAC _tds__SetSystemFactoryDefaultResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE__tds__SetSystemFactoryDefaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetSystemFactoryDefaultResponse() { _tds__SetSystemFactoryDefaultResponse::soap_default(NULL); }
	virtual ~_tds__SetSystemFactoryDefaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmware
#define SOAP_TYPE__tds__UpgradeSystemFirmware (93)
/* tds:UpgradeSystemFirmware */
class SOAP_CMAC _tds__UpgradeSystemFirmware
{
public:
	class tt__AttachmentData *Firmware;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE__tds__UpgradeSystemFirmware */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmware() { _tds__UpgradeSystemFirmware::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmware() { }
};
#endif

#ifndef SOAP_TYPE__tds__UpgradeSystemFirmwareResponse
#define SOAP_TYPE__tds__UpgradeSystemFirmwareResponse (94)
/* tds:UpgradeSystemFirmwareResponse */
class SOAP_CMAC _tds__UpgradeSystemFirmwareResponse
{
public:
	std::string *Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE__tds__UpgradeSystemFirmwareResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__UpgradeSystemFirmwareResponse() { _tds__UpgradeSystemFirmwareResponse::soap_default(NULL); }
	virtual ~_tds__UpgradeSystemFirmwareResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemReboot
#define SOAP_TYPE__tds__SystemReboot (95)
/* tds:SystemReboot */
class SOAP_CMAC _tds__SystemReboot
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE__tds__SystemReboot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemReboot() { _tds__SystemReboot::soap_default(NULL); }
	virtual ~_tds__SystemReboot() { }
};
#endif

#ifndef SOAP_TYPE__tds__SystemRebootResponse
#define SOAP_TYPE__tds__SystemRebootResponse (96)
/* tds:SystemRebootResponse */
class SOAP_CMAC _tds__SystemRebootResponse
{
public:
	std::string Message;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE__tds__SystemRebootResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SystemRebootResponse() { _tds__SystemRebootResponse::soap_default(NULL); }
	virtual ~_tds__SystemRebootResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystem
#define SOAP_TYPE__tds__RestoreSystem (97)
/* tds:RestoreSystem */
class SOAP_CMAC _tds__RestoreSystem
{
public:
	std::vector<class tt__BackupFile * >BackupFiles;	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE__tds__RestoreSystem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystem() { _tds__RestoreSystem::soap_default(NULL); }
	virtual ~_tds__RestoreSystem() { }
};
#endif

#ifndef SOAP_TYPE__tds__RestoreSystemResponse
#define SOAP_TYPE__tds__RestoreSystemResponse (98)
/* tds:RestoreSystemResponse */
class SOAP_CMAC _tds__RestoreSystemResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE__tds__RestoreSystemResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RestoreSystemResponse() { _tds__RestoreSystemResponse::soap_default(NULL); }
	virtual ~_tds__RestoreSystemResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackup
#define SOAP_TYPE__tds__GetSystemBackup (99)
/* tds:GetSystemBackup */
class SOAP_CMAC _tds__GetSystemBackup
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE__tds__GetSystemBackup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackup() { _tds__GetSystemBackup::soap_default(NULL); }
	virtual ~_tds__GetSystemBackup() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemBackupResponse
#define SOAP_TYPE__tds__GetSystemBackupResponse (100)
/* tds:GetSystemBackupResponse */
class SOAP_CMAC _tds__GetSystemBackupResponse
{
public:
	std::vector<tt__BackupFile * >BackupFiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BackupFile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE__tds__GetSystemBackupResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemBackupResponse() { _tds__GetSystemBackupResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemBackupResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformation
#define SOAP_TYPE__tds__GetSystemSupportInformation (101)
/* tds:GetSystemSupportInformation */
class SOAP_CMAC _tds__GetSystemSupportInformation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE__tds__GetSystemSupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformation() { _tds__GetSystemSupportInformation::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemSupportInformationResponse
#define SOAP_TYPE__tds__GetSystemSupportInformationResponse (102)
/* tds:GetSystemSupportInformationResponse */
class SOAP_CMAC _tds__GetSystemSupportInformationResponse
{
public:
	class tt__SupportInformation *SupportInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE__tds__GetSystemSupportInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemSupportInformationResponse() { _tds__GetSystemSupportInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemSupportInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLog
#define SOAP_TYPE__tds__GetSystemLog (103)
/* tds:GetSystemLog */
class SOAP_CMAC _tds__GetSystemLog
{
public:
	enum tt__SystemLogType LogType;	/* required element of type tt:SystemLogType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE__tds__GetSystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLog() { _tds__GetSystemLog::soap_default(NULL); }
	virtual ~_tds__GetSystemLog() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemLogResponse
#define SOAP_TYPE__tds__GetSystemLogResponse (104)
/* tds:GetSystemLogResponse */
class SOAP_CMAC _tds__GetSystemLogResponse
{
public:
	class tt__SystemLog *SystemLog;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SystemLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE__tds__GetSystemLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemLogResponse() { _tds__GetSystemLogResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemLogResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopes
#define SOAP_TYPE__tds__GetScopes (105)
/* tds:GetScopes */
class SOAP_CMAC _tds__GetScopes
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE__tds__GetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopes() { _tds__GetScopes::soap_default(NULL); }
	virtual ~_tds__GetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetScopesResponse
#define SOAP_TYPE__tds__GetScopesResponse (106)
/* tds:GetScopesResponse */
class SOAP_CMAC _tds__GetScopesResponse
{
public:
	std::vector<class tt__Scope * >Scopes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Scope */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE__tds__GetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetScopesResponse() { _tds__GetScopesResponse::soap_default(NULL); }
	virtual ~_tds__GetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopes
#define SOAP_TYPE__tds__SetScopes (107)
/* tds:SetScopes */
class SOAP_CMAC _tds__SetScopes
{
public:
	std::vector<std::string >Scopes;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE__tds__SetScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopes() { _tds__SetScopes::soap_default(NULL); }
	virtual ~_tds__SetScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetScopesResponse
#define SOAP_TYPE__tds__SetScopesResponse (108)
/* tds:SetScopesResponse */
class SOAP_CMAC _tds__SetScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE__tds__SetScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetScopesResponse() { _tds__SetScopesResponse::soap_default(NULL); }
	virtual ~_tds__SetScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopes
#define SOAP_TYPE__tds__AddScopes (109)
/* tds:AddScopes */
class SOAP_CMAC _tds__AddScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE__tds__AddScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopes() { _tds__AddScopes::soap_default(NULL); }
	virtual ~_tds__AddScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddScopesResponse
#define SOAP_TYPE__tds__AddScopesResponse (110)
/* tds:AddScopesResponse */
class SOAP_CMAC _tds__AddScopesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE__tds__AddScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddScopesResponse() { _tds__AddScopesResponse::soap_default(NULL); }
	virtual ~_tds__AddScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopes
#define SOAP_TYPE__tds__RemoveScopes (111)
/* tds:RemoveScopes */
class SOAP_CMAC _tds__RemoveScopes
{
public:
	std::vector<std::string >ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE__tds__RemoveScopes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopes() { _tds__RemoveScopes::soap_default(NULL); }
	virtual ~_tds__RemoveScopes() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveScopesResponse
#define SOAP_TYPE__tds__RemoveScopesResponse (112)
/* tds:RemoveScopesResponse */
class SOAP_CMAC _tds__RemoveScopesResponse
{
public:
	std::vector<std::string >ScopeItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE__tds__RemoveScopesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveScopesResponse() { _tds__RemoveScopesResponse::soap_default(NULL); }
	virtual ~_tds__RemoveScopesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryMode
#define SOAP_TYPE__tds__GetDiscoveryMode (113)
/* tds:GetDiscoveryMode */
class SOAP_CMAC _tds__GetDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE__tds__GetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryMode() { _tds__GetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDiscoveryModeResponse
#define SOAP_TYPE__tds__GetDiscoveryModeResponse (114)
/* tds:GetDiscoveryModeResponse */
class SOAP_CMAC _tds__GetDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE__tds__GetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDiscoveryModeResponse() { _tds__GetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryMode
#define SOAP_TYPE__tds__SetDiscoveryMode (115)
/* tds:SetDiscoveryMode */
class SOAP_CMAC _tds__SetDiscoveryMode
{
public:
	enum tt__DiscoveryMode DiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE__tds__SetDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryMode() { _tds__SetDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDiscoveryModeResponse
#define SOAP_TYPE__tds__SetDiscoveryModeResponse (116)
/* tds:SetDiscoveryModeResponse */
class SOAP_CMAC _tds__SetDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE__tds__SetDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDiscoveryModeResponse() { _tds__SetDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryMode
#define SOAP_TYPE__tds__GetRemoteDiscoveryMode (117)
/* tds:GetRemoteDiscoveryMode */
class SOAP_CMAC _tds__GetRemoteDiscoveryMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE__tds__GetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryMode() { _tds__GetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse (118)
/* tds:GetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__GetRemoteDiscoveryModeResponse
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE__tds__GetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteDiscoveryModeResponse() { _tds__GetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryMode
#define SOAP_TYPE__tds__SetRemoteDiscoveryMode (119)
/* tds:SetRemoteDiscoveryMode */
class SOAP_CMAC _tds__SetRemoteDiscoveryMode
{
public:
	enum tt__DiscoveryMode RemoteDiscoveryMode;	/* required element of type tt:DiscoveryMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE__tds__SetRemoteDiscoveryMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryMode() { _tds__SetRemoteDiscoveryMode::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse
#define SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse (120)
/* tds:SetRemoteDiscoveryModeResponse */
class SOAP_CMAC _tds__SetRemoteDiscoveryModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE__tds__SetRemoteDiscoveryModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteDiscoveryModeResponse() { _tds__SetRemoteDiscoveryModeResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteDiscoveryModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddresses
#define SOAP_TYPE__tds__GetDPAddresses (121)
/* tds:GetDPAddresses */
class SOAP_CMAC _tds__GetDPAddresses
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE__tds__GetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddresses() { _tds__GetDPAddresses::soap_default(NULL); }
	virtual ~_tds__GetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDPAddressesResponse
#define SOAP_TYPE__tds__GetDPAddressesResponse (122)
/* tds:GetDPAddressesResponse */
class SOAP_CMAC _tds__GetDPAddressesResponse
{
public:
	std::vector<class tt__NetworkHost * >DPAddress;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE__tds__GetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDPAddressesResponse() { _tds__GetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__GetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddresses
#define SOAP_TYPE__tds__SetDPAddresses (123)
/* tds:SetDPAddresses */
class SOAP_CMAC _tds__SetDPAddresses
{
public:
	std::vector<tt__NetworkHost * >DPAddress;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE__tds__SetDPAddresses */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddresses() { _tds__SetDPAddresses::soap_default(NULL); }
	virtual ~_tds__SetDPAddresses() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDPAddressesResponse
#define SOAP_TYPE__tds__SetDPAddressesResponse (124)
/* tds:SetDPAddressesResponse */
class SOAP_CMAC _tds__SetDPAddressesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE__tds__SetDPAddressesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDPAddressesResponse() { _tds__SetDPAddressesResponse::soap_default(NULL); }
	virtual ~_tds__SetDPAddressesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReference
#define SOAP_TYPE__tds__GetEndpointReference (125)
/* tds:GetEndpointReference */
class SOAP_CMAC _tds__GetEndpointReference
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE__tds__GetEndpointReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReference() { _tds__GetEndpointReference::soap_default(NULL); }
	virtual ~_tds__GetEndpointReference() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetEndpointReferenceResponse
#define SOAP_TYPE__tds__GetEndpointReferenceResponse (126)
/* tds:GetEndpointReferenceResponse */
class SOAP_CMAC _tds__GetEndpointReferenceResponse
{
public:
	std::string GUID;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 126; } /* = unique id SOAP_TYPE__tds__GetEndpointReferenceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetEndpointReferenceResponse() { _tds__GetEndpointReferenceResponse::soap_default(NULL); }
	virtual ~_tds__GetEndpointReferenceResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUser
#define SOAP_TYPE__tds__GetRemoteUser (127)
/* tds:GetRemoteUser */
class SOAP_CMAC _tds__GetRemoteUser
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 127; } /* = unique id SOAP_TYPE__tds__GetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUser() { _tds__GetRemoteUser::soap_default(NULL); }
	virtual ~_tds__GetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRemoteUserResponse
#define SOAP_TYPE__tds__GetRemoteUserResponse (128)
/* tds:GetRemoteUserResponse */
class SOAP_CMAC _tds__GetRemoteUserResponse
{
public:
	class tt__RemoteUser *RemoteUser;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 128; } /* = unique id SOAP_TYPE__tds__GetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRemoteUserResponse() { _tds__GetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__GetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUser
#define SOAP_TYPE__tds__SetRemoteUser (129)
/* tds:SetRemoteUser */
class SOAP_CMAC _tds__SetRemoteUser
{
public:
	tt__RemoteUser *RemoteUser;	/* optional element of type tt:RemoteUser */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 129; } /* = unique id SOAP_TYPE__tds__SetRemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUser() { _tds__SetRemoteUser::soap_default(NULL); }
	virtual ~_tds__SetRemoteUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRemoteUserResponse
#define SOAP_TYPE__tds__SetRemoteUserResponse (130)
/* tds:SetRemoteUserResponse */
class SOAP_CMAC _tds__SetRemoteUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 130; } /* = unique id SOAP_TYPE__tds__SetRemoteUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRemoteUserResponse() { _tds__SetRemoteUserResponse::soap_default(NULL); }
	virtual ~_tds__SetRemoteUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsers
#define SOAP_TYPE__tds__GetUsers (131)
/* tds:GetUsers */
class SOAP_CMAC _tds__GetUsers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 131; } /* = unique id SOAP_TYPE__tds__GetUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsers() { _tds__GetUsers::soap_default(NULL); }
	virtual ~_tds__GetUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetUsersResponse
#define SOAP_TYPE__tds__GetUsersResponse (132)
/* tds:GetUsersResponse */
class SOAP_CMAC _tds__GetUsersResponse
{
public:
	std::vector<class tt__User * >User;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 132; } /* = unique id SOAP_TYPE__tds__GetUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetUsersResponse() { _tds__GetUsersResponse::soap_default(NULL); }
	virtual ~_tds__GetUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsers
#define SOAP_TYPE__tds__CreateUsers (133)
/* tds:CreateUsers */
class SOAP_CMAC _tds__CreateUsers
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 133; } /* = unique id SOAP_TYPE__tds__CreateUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsers() { _tds__CreateUsers::soap_default(NULL); }
	virtual ~_tds__CreateUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateUsersResponse
#define SOAP_TYPE__tds__CreateUsersResponse (134)
/* tds:CreateUsersResponse */
class SOAP_CMAC _tds__CreateUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 134; } /* = unique id SOAP_TYPE__tds__CreateUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateUsersResponse() { _tds__CreateUsersResponse::soap_default(NULL); }
	virtual ~_tds__CreateUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsers
#define SOAP_TYPE__tds__DeleteUsers (135)
/* tds:DeleteUsers */
class SOAP_CMAC _tds__DeleteUsers
{
public:
	std::vector<std::string >Username;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 135; } /* = unique id SOAP_TYPE__tds__DeleteUsers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsers() { _tds__DeleteUsers::soap_default(NULL); }
	virtual ~_tds__DeleteUsers() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteUsersResponse
#define SOAP_TYPE__tds__DeleteUsersResponse (136)
/* tds:DeleteUsersResponse */
class SOAP_CMAC _tds__DeleteUsersResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 136; } /* = unique id SOAP_TYPE__tds__DeleteUsersResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteUsersResponse() { _tds__DeleteUsersResponse::soap_default(NULL); }
	virtual ~_tds__DeleteUsersResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUser
#define SOAP_TYPE__tds__SetUser (137)
/* tds:SetUser */
class SOAP_CMAC _tds__SetUser
{
public:
	std::vector<tt__User * >User;	/* required element of type tt:User */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 137; } /* = unique id SOAP_TYPE__tds__SetUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUser() { _tds__SetUser::soap_default(NULL); }
	virtual ~_tds__SetUser() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetUserResponse
#define SOAP_TYPE__tds__SetUserResponse (138)
/* tds:SetUserResponse */
class SOAP_CMAC _tds__SetUserResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 138; } /* = unique id SOAP_TYPE__tds__SetUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetUserResponse() { _tds__SetUserResponse::soap_default(NULL); }
	virtual ~_tds__SetUserResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrl
#define SOAP_TYPE__tds__GetWsdlUrl (139)
/* tds:GetWsdlUrl */
class SOAP_CMAC _tds__GetWsdlUrl
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 139; } /* = unique id SOAP_TYPE__tds__GetWsdlUrl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrl() { _tds__GetWsdlUrl::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrl() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetWsdlUrlResponse
#define SOAP_TYPE__tds__GetWsdlUrlResponse (140)
/* tds:GetWsdlUrlResponse */
class SOAP_CMAC _tds__GetWsdlUrlResponse
{
public:
	std::string WsdlUrl;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 140; } /* = unique id SOAP_TYPE__tds__GetWsdlUrlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetWsdlUrlResponse() { _tds__GetWsdlUrlResponse::soap_default(NULL); }
	virtual ~_tds__GetWsdlUrlResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilities
#define SOAP_TYPE__tds__GetCapabilities (141)
/* tds:GetCapabilities */
class SOAP_CMAC _tds__GetCapabilities
{
public:
	std::vector<enum tt__CapabilityCategory >Category;	/* optional element of type tt:CapabilityCategory */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 141; } /* = unique id SOAP_TYPE__tds__GetCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilities() { _tds__GetCapabilities::soap_default(NULL); }
	virtual ~_tds__GetCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCapabilitiesResponse
#define SOAP_TYPE__tds__GetCapabilitiesResponse (142)
/* tds:GetCapabilitiesResponse */
class SOAP_CMAC _tds__GetCapabilitiesResponse
{
public:
	class tt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 142; } /* = unique id SOAP_TYPE__tds__GetCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCapabilitiesResponse() { _tds__GetCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostname
#define SOAP_TYPE__tds__GetHostname (143)
/* tds:GetHostname */
class SOAP_CMAC _tds__GetHostname
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 143; } /* = unique id SOAP_TYPE__tds__GetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostname() { _tds__GetHostname::soap_default(NULL); }
	virtual ~_tds__GetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetHostnameResponse
#define SOAP_TYPE__tds__GetHostnameResponse (144)
/* tds:GetHostnameResponse */
class SOAP_CMAC _tds__GetHostnameResponse
{
public:
	class tt__HostnameInformation *HostnameInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:HostnameInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 144; } /* = unique id SOAP_TYPE__tds__GetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetHostnameResponse() { _tds__GetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__GetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostname
#define SOAP_TYPE__tds__SetHostname (145)
/* tds:SetHostname */
class SOAP_CMAC _tds__SetHostname
{
public:
	std::string Name;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 145; } /* = unique id SOAP_TYPE__tds__SetHostname */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostname() { _tds__SetHostname::soap_default(NULL); }
	virtual ~_tds__SetHostname() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameResponse
#define SOAP_TYPE__tds__SetHostnameResponse (146)
/* tds:SetHostnameResponse */
class SOAP_CMAC _tds__SetHostnameResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 146; } /* = unique id SOAP_TYPE__tds__SetHostnameResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameResponse() { _tds__SetHostnameResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCP
#define SOAP_TYPE__tds__SetHostnameFromDHCP (147)
/* tds:SetHostnameFromDHCP */
class SOAP_CMAC _tds__SetHostnameFromDHCP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 147; } /* = unique id SOAP_TYPE__tds__SetHostnameFromDHCP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCP() { _tds__SetHostnameFromDHCP::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetHostnameFromDHCPResponse
#define SOAP_TYPE__tds__SetHostnameFromDHCPResponse (148)
/* tds:SetHostnameFromDHCPResponse */
class SOAP_CMAC _tds__SetHostnameFromDHCPResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 148; } /* = unique id SOAP_TYPE__tds__SetHostnameFromDHCPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetHostnameFromDHCPResponse() { _tds__SetHostnameFromDHCPResponse::soap_default(NULL); }
	virtual ~_tds__SetHostnameFromDHCPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNS
#define SOAP_TYPE__tds__GetDNS (149)
/* tds:GetDNS */
class SOAP_CMAC _tds__GetDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 149; } /* = unique id SOAP_TYPE__tds__GetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNS() { _tds__GetDNS::soap_default(NULL); }
	virtual ~_tds__GetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDNSResponse
#define SOAP_TYPE__tds__GetDNSResponse (150)
/* tds:GetDNSResponse */
class SOAP_CMAC _tds__GetDNSResponse
{
public:
	class tt__DNSInformation *DNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 150; } /* = unique id SOAP_TYPE__tds__GetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDNSResponse() { _tds__GetDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNS
#define SOAP_TYPE__tds__SetDNS (151)
/* tds:SetDNS */
class SOAP_CMAC _tds__SetDNS
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<class tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 151; } /* = unique id SOAP_TYPE__tds__SetDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNS() { _tds__SetDNS::soap_default(NULL); }
	virtual ~_tds__SetDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDNSResponse
#define SOAP_TYPE__tds__SetDNSResponse (152)
/* tds:SetDNSResponse */
class SOAP_CMAC _tds__SetDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 152; } /* = unique id SOAP_TYPE__tds__SetDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDNSResponse() { _tds__SetDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTP
#define SOAP_TYPE__tds__GetNTP (153)
/* tds:GetNTP */
class SOAP_CMAC _tds__GetNTP
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 153; } /* = unique id SOAP_TYPE__tds__GetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTP() { _tds__GetNTP::soap_default(NULL); }
	virtual ~_tds__GetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNTPResponse
#define SOAP_TYPE__tds__GetNTPResponse (154)
/* tds:GetNTPResponse */
class SOAP_CMAC _tds__GetNTPResponse
{
public:
	class tt__NTPInformation *NTPInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NTPInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 154; } /* = unique id SOAP_TYPE__tds__GetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNTPResponse() { _tds__GetNTPResponse::soap_default(NULL); }
	virtual ~_tds__GetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTP
#define SOAP_TYPE__tds__SetNTP (155)
/* tds:SetNTP */
class SOAP_CMAC _tds__SetNTP
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 155; } /* = unique id SOAP_TYPE__tds__SetNTP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTP() { _tds__SetNTP::soap_default(NULL); }
	virtual ~_tds__SetNTP() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNTPResponse
#define SOAP_TYPE__tds__SetNTPResponse (156)
/* tds:SetNTPResponse */
class SOAP_CMAC _tds__SetNTPResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 156; } /* = unique id SOAP_TYPE__tds__SetNTPResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNTPResponse() { _tds__SetNTPResponse::soap_default(NULL); }
	virtual ~_tds__SetNTPResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNS
#define SOAP_TYPE__tds__GetDynamicDNS (157)
/* tds:GetDynamicDNS */
class SOAP_CMAC _tds__GetDynamicDNS
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 157; } /* = unique id SOAP_TYPE__tds__GetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNS() { _tds__GetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDynamicDNSResponse
#define SOAP_TYPE__tds__GetDynamicDNSResponse (158)
/* tds:GetDynamicDNSResponse */
class SOAP_CMAC _tds__GetDynamicDNSResponse
{
public:
	class tt__DynamicDNSInformation *DynamicDNSInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:DynamicDNSInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 158; } /* = unique id SOAP_TYPE__tds__GetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDynamicDNSResponse() { _tds__GetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__GetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNS
#define SOAP_TYPE__tds__SetDynamicDNS (159)
/* tds:SetDynamicDNS */
class SOAP_CMAC _tds__SetDynamicDNS
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	std::string *TTL;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 159; } /* = unique id SOAP_TYPE__tds__SetDynamicDNS */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNS() { _tds__SetDynamicDNS::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNS() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDynamicDNSResponse
#define SOAP_TYPE__tds__SetDynamicDNSResponse (160)
/* tds:SetDynamicDNSResponse */
class SOAP_CMAC _tds__SetDynamicDNSResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 160; } /* = unique id SOAP_TYPE__tds__SetDynamicDNSResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDynamicDNSResponse() { _tds__SetDynamicDNSResponse::soap_default(NULL); }
	virtual ~_tds__SetDynamicDNSResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfaces
#define SOAP_TYPE__tds__GetNetworkInterfaces (161)
/* tds:GetNetworkInterfaces */
class SOAP_CMAC _tds__GetNetworkInterfaces
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 161; } /* = unique id SOAP_TYPE__tds__GetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfaces() { _tds__GetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkInterfacesResponse
#define SOAP_TYPE__tds__GetNetworkInterfacesResponse (162)
/* tds:GetNetworkInterfacesResponse */
class SOAP_CMAC _tds__GetNetworkInterfacesResponse
{
public:
	std::vector<class tt__NetworkInterface * >NetworkInterfaces;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkInterface */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 162; } /* = unique id SOAP_TYPE__tds__GetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkInterfacesResponse() { _tds__GetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfaces
#define SOAP_TYPE__tds__SetNetworkInterfaces (163)
/* tds:SetNetworkInterfaces */
class SOAP_CMAC _tds__SetNetworkInterfaces
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	class tt__NetworkInterfaceSetConfiguration *NetworkInterface;	/* required element of type tt:NetworkInterfaceSetConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 163; } /* = unique id SOAP_TYPE__tds__SetNetworkInterfaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfaces() { _tds__SetNetworkInterfaces::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfaces() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkInterfacesResponse
#define SOAP_TYPE__tds__SetNetworkInterfacesResponse (164)
/* tds:SetNetworkInterfacesResponse */
class SOAP_CMAC _tds__SetNetworkInterfacesResponse
{
public:
	bool RebootNeeded;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 164; } /* = unique id SOAP_TYPE__tds__SetNetworkInterfacesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkInterfacesResponse() { _tds__SetNetworkInterfacesResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkInterfacesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocols
#define SOAP_TYPE__tds__GetNetworkProtocols (165)
/* tds:GetNetworkProtocols */
class SOAP_CMAC _tds__GetNetworkProtocols
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 165; } /* = unique id SOAP_TYPE__tds__GetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocols() { _tds__GetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkProtocolsResponse
#define SOAP_TYPE__tds__GetNetworkProtocolsResponse (166)
/* tds:GetNetworkProtocolsResponse */
class SOAP_CMAC _tds__GetNetworkProtocolsResponse
{
public:
	std::vector<class tt__NetworkProtocol * >NetworkProtocols;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 166; } /* = unique id SOAP_TYPE__tds__GetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkProtocolsResponse() { _tds__GetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocols
#define SOAP_TYPE__tds__SetNetworkProtocols (167)
/* tds:SetNetworkProtocols */
class SOAP_CMAC _tds__SetNetworkProtocols
{
public:
	std::vector<tt__NetworkProtocol * >NetworkProtocols;	/* required element of type tt:NetworkProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 167; } /* = unique id SOAP_TYPE__tds__SetNetworkProtocols */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocols() { _tds__SetNetworkProtocols::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocols() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkProtocolsResponse
#define SOAP_TYPE__tds__SetNetworkProtocolsResponse (168)
/* tds:SetNetworkProtocolsResponse */
class SOAP_CMAC _tds__SetNetworkProtocolsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 168; } /* = unique id SOAP_TYPE__tds__SetNetworkProtocolsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkProtocolsResponse() { _tds__SetNetworkProtocolsResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkProtocolsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGateway
#define SOAP_TYPE__tds__GetNetworkDefaultGateway (169)
/* tds:GetNetworkDefaultGateway */
class SOAP_CMAC _tds__GetNetworkDefaultGateway
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 169; } /* = unique id SOAP_TYPE__tds__GetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGateway() { _tds__GetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse (170)
/* tds:GetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__GetNetworkDefaultGatewayResponse
{
public:
	class tt__NetworkGateway *NetworkGateway;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkGateway */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 170; } /* = unique id SOAP_TYPE__tds__GetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetNetworkDefaultGatewayResponse() { _tds__GetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__GetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGateway
#define SOAP_TYPE__tds__SetNetworkDefaultGateway (171)
/* tds:SetNetworkDefaultGateway */
class SOAP_CMAC _tds__SetNetworkDefaultGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 171; } /* = unique id SOAP_TYPE__tds__SetNetworkDefaultGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGateway() { _tds__SetNetworkDefaultGateway::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGateway() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse
#define SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse (172)
/* tds:SetNetworkDefaultGatewayResponse */
class SOAP_CMAC _tds__SetNetworkDefaultGatewayResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 172; } /* = unique id SOAP_TYPE__tds__SetNetworkDefaultGatewayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetNetworkDefaultGatewayResponse() { _tds__SetNetworkDefaultGatewayResponse::soap_default(NULL); }
	virtual ~_tds__SetNetworkDefaultGatewayResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfiguration
#define SOAP_TYPE__tds__GetZeroConfiguration (173)
/* tds:GetZeroConfiguration */
class SOAP_CMAC _tds__GetZeroConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 173; } /* = unique id SOAP_TYPE__tds__GetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfiguration() { _tds__GetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__GetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetZeroConfigurationResponse
#define SOAP_TYPE__tds__GetZeroConfigurationResponse (174)
/* tds:GetZeroConfigurationResponse */
class SOAP_CMAC _tds__GetZeroConfigurationResponse
{
public:
	class tt__NetworkZeroConfiguration *ZeroConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:NetworkZeroConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 174; } /* = unique id SOAP_TYPE__tds__GetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetZeroConfigurationResponse() { _tds__GetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfiguration
#define SOAP_TYPE__tds__SetZeroConfiguration (175)
/* tds:SetZeroConfiguration */
class SOAP_CMAC _tds__SetZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 175; } /* = unique id SOAP_TYPE__tds__SetZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfiguration() { _tds__SetZeroConfiguration::soap_default(NULL); }
	virtual ~_tds__SetZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetZeroConfigurationResponse
#define SOAP_TYPE__tds__SetZeroConfigurationResponse (176)
/* tds:SetZeroConfigurationResponse */
class SOAP_CMAC _tds__SetZeroConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 176; } /* = unique id SOAP_TYPE__tds__SetZeroConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetZeroConfigurationResponse() { _tds__SetZeroConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetZeroConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilter
#define SOAP_TYPE__tds__GetIPAddressFilter (177)
/* tds:GetIPAddressFilter */
class SOAP_CMAC _tds__GetIPAddressFilter
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 177; } /* = unique id SOAP_TYPE__tds__GetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilter() { _tds__GetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetIPAddressFilterResponse
#define SOAP_TYPE__tds__GetIPAddressFilterResponse (178)
/* tds:GetIPAddressFilterResponse */
class SOAP_CMAC _tds__GetIPAddressFilterResponse
{
public:
	class tt__IPAddressFilter *IPAddressFilter;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 178; } /* = unique id SOAP_TYPE__tds__GetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetIPAddressFilterResponse() { _tds__GetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__GetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilter
#define SOAP_TYPE__tds__SetIPAddressFilter (179)
/* tds:SetIPAddressFilter */
class SOAP_CMAC _tds__SetIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 179; } /* = unique id SOAP_TYPE__tds__SetIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilter() { _tds__SetIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetIPAddressFilterResponse
#define SOAP_TYPE__tds__SetIPAddressFilterResponse (180)
/* tds:SetIPAddressFilterResponse */
class SOAP_CMAC _tds__SetIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 180; } /* = unique id SOAP_TYPE__tds__SetIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetIPAddressFilterResponse() { _tds__SetIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__SetIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilter
#define SOAP_TYPE__tds__AddIPAddressFilter (181)
/* tds:AddIPAddressFilter */
class SOAP_CMAC _tds__AddIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 181; } /* = unique id SOAP_TYPE__tds__AddIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilter() { _tds__AddIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__AddIPAddressFilterResponse
#define SOAP_TYPE__tds__AddIPAddressFilterResponse (182)
/* tds:AddIPAddressFilterResponse */
class SOAP_CMAC _tds__AddIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 182; } /* = unique id SOAP_TYPE__tds__AddIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__AddIPAddressFilterResponse() { _tds__AddIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__AddIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilter
#define SOAP_TYPE__tds__RemoveIPAddressFilter (183)
/* tds:RemoveIPAddressFilter */
class SOAP_CMAC _tds__RemoveIPAddressFilter
{
public:
	tt__IPAddressFilter *IPAddressFilter;	/* required element of type tt:IPAddressFilter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 183; } /* = unique id SOAP_TYPE__tds__RemoveIPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilter() { _tds__RemoveIPAddressFilter::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE__tds__RemoveIPAddressFilterResponse
#define SOAP_TYPE__tds__RemoveIPAddressFilterResponse (184)
/* tds:RemoveIPAddressFilterResponse */
class SOAP_CMAC _tds__RemoveIPAddressFilterResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 184; } /* = unique id SOAP_TYPE__tds__RemoveIPAddressFilterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__RemoveIPAddressFilterResponse() { _tds__RemoveIPAddressFilterResponse::soap_default(NULL); }
	virtual ~_tds__RemoveIPAddressFilterResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicy
#define SOAP_TYPE__tds__GetAccessPolicy (185)
/* tds:GetAccessPolicy */
class SOAP_CMAC _tds__GetAccessPolicy
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 185; } /* = unique id SOAP_TYPE__tds__GetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicy() { _tds__GetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetAccessPolicyResponse
#define SOAP_TYPE__tds__GetAccessPolicyResponse (186)
/* tds:GetAccessPolicyResponse */
class SOAP_CMAC _tds__GetAccessPolicyResponse
{
public:
	class tt__BinaryData *PolicyFile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 186; } /* = unique id SOAP_TYPE__tds__GetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetAccessPolicyResponse() { _tds__GetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__GetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicy
#define SOAP_TYPE__tds__SetAccessPolicy (187)
/* tds:SetAccessPolicy */
class SOAP_CMAC _tds__SetAccessPolicy
{
public:
	tt__BinaryData *PolicyFile;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 187; } /* = unique id SOAP_TYPE__tds__SetAccessPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicy() { _tds__SetAccessPolicy::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetAccessPolicyResponse
#define SOAP_TYPE__tds__SetAccessPolicyResponse (188)
/* tds:SetAccessPolicyResponse */
class SOAP_CMAC _tds__SetAccessPolicyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 188; } /* = unique id SOAP_TYPE__tds__SetAccessPolicyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetAccessPolicyResponse() { _tds__SetAccessPolicyResponse::soap_default(NULL); }
	virtual ~_tds__SetAccessPolicyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificate
#define SOAP_TYPE__tds__CreateCertificate (189)
/* tds:CreateCertificate */
class SOAP_CMAC _tds__CreateCertificate
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	time_t *ValidNotBefore;	/* optional element of type xsd:dateTime */
	time_t *ValidNotAfter;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 189; } /* = unique id SOAP_TYPE__tds__CreateCertificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificate() { _tds__CreateCertificate::soap_default(NULL); }
	virtual ~_tds__CreateCertificate() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateCertificateResponse
#define SOAP_TYPE__tds__CreateCertificateResponse (190)
/* tds:CreateCertificateResponse */
class SOAP_CMAC _tds__CreateCertificateResponse
{
public:
	class tt__Certificate *NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 190; } /* = unique id SOAP_TYPE__tds__CreateCertificateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateCertificateResponse() { _tds__CreateCertificateResponse::soap_default(NULL); }
	virtual ~_tds__CreateCertificateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificates
#define SOAP_TYPE__tds__GetCertificates (191)
/* tds:GetCertificates */
class SOAP_CMAC _tds__GetCertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 191; } /* = unique id SOAP_TYPE__tds__GetCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificates() { _tds__GetCertificates::soap_default(NULL); }
	virtual ~_tds__GetCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesResponse
#define SOAP_TYPE__tds__GetCertificatesResponse (192)
/* tds:GetCertificatesResponse */
class SOAP_CMAC _tds__GetCertificatesResponse
{
public:
	std::vector<tt__Certificate * >NvtCertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 192; } /* = unique id SOAP_TYPE__tds__GetCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesResponse() { _tds__GetCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatus
#define SOAP_TYPE__tds__GetCertificatesStatus (193)
/* tds:GetCertificatesStatus */
class SOAP_CMAC _tds__GetCertificatesStatus
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 193; } /* = unique id SOAP_TYPE__tds__GetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatus() { _tds__GetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificatesStatusResponse
#define SOAP_TYPE__tds__GetCertificatesStatusResponse (194)
/* tds:GetCertificatesStatusResponse */
class SOAP_CMAC _tds__GetCertificatesStatusResponse
{
public:
	std::vector<class tt__CertificateStatus * >CertificateStatus;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 194; } /* = unique id SOAP_TYPE__tds__GetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificatesStatusResponse() { _tds__GetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatus
#define SOAP_TYPE__tds__SetCertificatesStatus (195)
/* tds:SetCertificatesStatus */
class SOAP_CMAC _tds__SetCertificatesStatus
{
public:
	std::vector<tt__CertificateStatus * >CertificateStatus;	/* optional element of type tt:CertificateStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 195; } /* = unique id SOAP_TYPE__tds__SetCertificatesStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatus() { _tds__SetCertificatesStatus::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatus() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetCertificatesStatusResponse
#define SOAP_TYPE__tds__SetCertificatesStatusResponse (196)
/* tds:SetCertificatesStatusResponse */
class SOAP_CMAC _tds__SetCertificatesStatusResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 196; } /* = unique id SOAP_TYPE__tds__SetCertificatesStatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetCertificatesStatusResponse() { _tds__SetCertificatesStatusResponse::soap_default(NULL); }
	virtual ~_tds__SetCertificatesStatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificates
#define SOAP_TYPE__tds__DeleteCertificates (197)
/* tds:DeleteCertificates */
class SOAP_CMAC _tds__DeleteCertificates
{
public:
	std::vector<std::string >CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 197; } /* = unique id SOAP_TYPE__tds__DeleteCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificates() { _tds__DeleteCertificates::soap_default(NULL); }
	virtual ~_tds__DeleteCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteCertificatesResponse
#define SOAP_TYPE__tds__DeleteCertificatesResponse (198)
/* tds:DeleteCertificatesResponse */
class SOAP_CMAC _tds__DeleteCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 198; } /* = unique id SOAP_TYPE__tds__DeleteCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteCertificatesResponse() { _tds__DeleteCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__DeleteCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10Request
#define SOAP_TYPE__tds__GetPkcs10Request (199)
/* tds:GetPkcs10Request */
class SOAP_CMAC _tds__GetPkcs10Request
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	tt__BinaryData *Attributes;	/* optional element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 199; } /* = unique id SOAP_TYPE__tds__GetPkcs10Request */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10Request() { _tds__GetPkcs10Request::soap_default(NULL); }
	virtual ~_tds__GetPkcs10Request() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetPkcs10RequestResponse
#define SOAP_TYPE__tds__GetPkcs10RequestResponse (200)
/* tds:GetPkcs10RequestResponse */
class SOAP_CMAC _tds__GetPkcs10RequestResponse
{
public:
	tt__BinaryData *Pkcs10Request;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 200; } /* = unique id SOAP_TYPE__tds__GetPkcs10RequestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetPkcs10RequestResponse() { _tds__GetPkcs10RequestResponse::soap_default(NULL); }
	virtual ~_tds__GetPkcs10RequestResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificates
#define SOAP_TYPE__tds__LoadCertificates (201)
/* tds:LoadCertificates */
class SOAP_CMAC _tds__LoadCertificates
{
public:
	std::vector<tt__Certificate * >NVTCertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 201; } /* = unique id SOAP_TYPE__tds__LoadCertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificates() { _tds__LoadCertificates::soap_default(NULL); }
	virtual ~_tds__LoadCertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificatesResponse
#define SOAP_TYPE__tds__LoadCertificatesResponse (202)
/* tds:LoadCertificatesResponse */
class SOAP_CMAC _tds__LoadCertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 202; } /* = unique id SOAP_TYPE__tds__LoadCertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificatesResponse() { _tds__LoadCertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateMode
#define SOAP_TYPE__tds__GetClientCertificateMode (203)
/* tds:GetClientCertificateMode */
class SOAP_CMAC _tds__GetClientCertificateMode
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 203; } /* = unique id SOAP_TYPE__tds__GetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateMode() { _tds__GetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetClientCertificateModeResponse
#define SOAP_TYPE__tds__GetClientCertificateModeResponse (204)
/* tds:GetClientCertificateModeResponse */
class SOAP_CMAC _tds__GetClientCertificateModeResponse
{
public:
	bool Enabled;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 204; } /* = unique id SOAP_TYPE__tds__GetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetClientCertificateModeResponse() { _tds__GetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__GetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateMode
#define SOAP_TYPE__tds__SetClientCertificateMode (205)
/* tds:SetClientCertificateMode */
class SOAP_CMAC _tds__SetClientCertificateMode
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 205; } /* = unique id SOAP_TYPE__tds__SetClientCertificateMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateMode() { _tds__SetClientCertificateMode::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateMode() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetClientCertificateModeResponse
#define SOAP_TYPE__tds__SetClientCertificateModeResponse (206)
/* tds:SetClientCertificateModeResponse */
class SOAP_CMAC _tds__SetClientCertificateModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 206; } /* = unique id SOAP_TYPE__tds__SetClientCertificateModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetClientCertificateModeResponse() { _tds__SetClientCertificateModeResponse::soap_default(NULL); }
	virtual ~_tds__SetClientCertificateModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificates
#define SOAP_TYPE__tds__GetCACertificates (207)
/* tds:GetCACertificates */
class SOAP_CMAC _tds__GetCACertificates
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 207; } /* = unique id SOAP_TYPE__tds__GetCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificates() { _tds__GetCACertificates::soap_default(NULL); }
	virtual ~_tds__GetCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCACertificatesResponse
#define SOAP_TYPE__tds__GetCACertificatesResponse (208)
/* tds:GetCACertificatesResponse */
class SOAP_CMAC _tds__GetCACertificatesResponse
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 208; } /* = unique id SOAP_TYPE__tds__GetCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCACertificatesResponse() { _tds__GetCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__GetCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKey (209)
/* tds:LoadCertificateWithPrivateKey */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKey
{
public:
	std::vector<class tt__CertificateWithPrivateKey * >CertificateWithPrivateKey;	/* required element of type tt:CertificateWithPrivateKey */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 209; } /* = unique id SOAP_TYPE__tds__LoadCertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKey() { _tds__LoadCertificateWithPrivateKey::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse
#define SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse (210)
/* tds:LoadCertificateWithPrivateKeyResponse */
class SOAP_CMAC _tds__LoadCertificateWithPrivateKeyResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 210; } /* = unique id SOAP_TYPE__tds__LoadCertificateWithPrivateKeyResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCertificateWithPrivateKeyResponse() { _tds__LoadCertificateWithPrivateKeyResponse::soap_default(NULL); }
	virtual ~_tds__LoadCertificateWithPrivateKeyResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformation
#define SOAP_TYPE__tds__GetCertificateInformation (211)
/* tds:GetCertificateInformation */
class SOAP_CMAC _tds__GetCertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 211; } /* = unique id SOAP_TYPE__tds__GetCertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformation() { _tds__GetCertificateInformation::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetCertificateInformationResponse
#define SOAP_TYPE__tds__GetCertificateInformationResponse (212)
/* tds:GetCertificateInformationResponse */
class SOAP_CMAC _tds__GetCertificateInformationResponse
{
public:
	class tt__CertificateInformation *CertificateInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:CertificateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 212; } /* = unique id SOAP_TYPE__tds__GetCertificateInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetCertificateInformationResponse() { _tds__GetCertificateInformationResponse::soap_default(NULL); }
	virtual ~_tds__GetCertificateInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificates
#define SOAP_TYPE__tds__LoadCACertificates (213)
/* tds:LoadCACertificates */
class SOAP_CMAC _tds__LoadCACertificates
{
public:
	std::vector<tt__Certificate * >CACertificate;	/* required element of type tt:Certificate */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 213; } /* = unique id SOAP_TYPE__tds__LoadCACertificates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificates() { _tds__LoadCACertificates::soap_default(NULL); }
	virtual ~_tds__LoadCACertificates() { }
};
#endif

#ifndef SOAP_TYPE__tds__LoadCACertificatesResponse
#define SOAP_TYPE__tds__LoadCACertificatesResponse (214)
/* tds:LoadCACertificatesResponse */
class SOAP_CMAC _tds__LoadCACertificatesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 214; } /* = unique id SOAP_TYPE__tds__LoadCACertificatesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__LoadCACertificatesResponse() { _tds__LoadCACertificatesResponse::soap_default(NULL); }
	virtual ~_tds__LoadCACertificatesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfiguration
#define SOAP_TYPE__tds__CreateDot1XConfiguration (215)
/* tds:CreateDot1XConfiguration */
class SOAP_CMAC _tds__CreateDot1XConfiguration
{
public:
	class tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 215; } /* = unique id SOAP_TYPE__tds__CreateDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfiguration() { _tds__CreateDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__CreateDot1XConfigurationResponse
#define SOAP_TYPE__tds__CreateDot1XConfigurationResponse (216)
/* tds:CreateDot1XConfigurationResponse */
class SOAP_CMAC _tds__CreateDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 216; } /* = unique id SOAP_TYPE__tds__CreateDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__CreateDot1XConfigurationResponse() { _tds__CreateDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__CreateDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfiguration
#define SOAP_TYPE__tds__SetDot1XConfiguration (217)
/* tds:SetDot1XConfiguration */
class SOAP_CMAC _tds__SetDot1XConfiguration
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 217; } /* = unique id SOAP_TYPE__tds__SetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfiguration() { _tds__SetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetDot1XConfigurationResponse
#define SOAP_TYPE__tds__SetDot1XConfigurationResponse (218)
/* tds:SetDot1XConfigurationResponse */
class SOAP_CMAC _tds__SetDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 218; } /* = unique id SOAP_TYPE__tds__SetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetDot1XConfigurationResponse() { _tds__SetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__SetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfiguration
#define SOAP_TYPE__tds__GetDot1XConfiguration (219)
/* tds:GetDot1XConfiguration */
class SOAP_CMAC _tds__GetDot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 219; } /* = unique id SOAP_TYPE__tds__GetDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfiguration() { _tds__GetDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationResponse (220)
/* tds:GetDot1XConfigurationResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationResponse
{
public:
	tt__Dot1XConfiguration *Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 220; } /* = unique id SOAP_TYPE__tds__GetDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationResponse() { _tds__GetDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurations
#define SOAP_TYPE__tds__GetDot1XConfigurations (221)
/* tds:GetDot1XConfigurations */
class SOAP_CMAC _tds__GetDot1XConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 221; } /* = unique id SOAP_TYPE__tds__GetDot1XConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurations() { _tds__GetDot1XConfigurations::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot1XConfigurationsResponse
#define SOAP_TYPE__tds__GetDot1XConfigurationsResponse (222)
/* tds:GetDot1XConfigurationsResponse */
class SOAP_CMAC _tds__GetDot1XConfigurationsResponse
{
public:
	std::vector<tt__Dot1XConfiguration * >Dot1XConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot1XConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 222; } /* = unique id SOAP_TYPE__tds__GetDot1XConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot1XConfigurationsResponse() { _tds__GetDot1XConfigurationsResponse::soap_default(NULL); }
	virtual ~_tds__GetDot1XConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfiguration
#define SOAP_TYPE__tds__DeleteDot1XConfiguration (223)
/* tds:DeleteDot1XConfiguration */
class SOAP_CMAC _tds__DeleteDot1XConfiguration
{
public:
	std::vector<std::string >Dot1XConfigurationToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 223; } /* = unique id SOAP_TYPE__tds__DeleteDot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfiguration() { _tds__DeleteDot1XConfiguration::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tds__DeleteDot1XConfigurationResponse
#define SOAP_TYPE__tds__DeleteDot1XConfigurationResponse (224)
/* tds:DeleteDot1XConfigurationResponse */
class SOAP_CMAC _tds__DeleteDot1XConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 224; } /* = unique id SOAP_TYPE__tds__DeleteDot1XConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__DeleteDot1XConfigurationResponse() { _tds__DeleteDot1XConfigurationResponse::soap_default(NULL); }
	virtual ~_tds__DeleteDot1XConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputs
#define SOAP_TYPE__tds__GetRelayOutputs (225)
/* tds:GetRelayOutputs */
class SOAP_CMAC _tds__GetRelayOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 225; } /* = unique id SOAP_TYPE__tds__GetRelayOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputs() { _tds__GetRelayOutputs::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetRelayOutputsResponse
#define SOAP_TYPE__tds__GetRelayOutputsResponse (226)
/* tds:GetRelayOutputsResponse */
class SOAP_CMAC _tds__GetRelayOutputsResponse
{
public:
	std::vector<class tt__RelayOutput * >RelayOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 226; } /* = unique id SOAP_TYPE__tds__GetRelayOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetRelayOutputsResponse() { _tds__GetRelayOutputsResponse::soap_default(NULL); }
	virtual ~_tds__GetRelayOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettings
#define SOAP_TYPE__tds__SetRelayOutputSettings (227)
/* tds:SetRelayOutputSettings */
class SOAP_CMAC _tds__SetRelayOutputSettings
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	class tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 227; } /* = unique id SOAP_TYPE__tds__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettings() { _tds__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tds__SetRelayOutputSettingsResponse (228)
/* tds:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tds__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 228; } /* = unique id SOAP_TYPE__tds__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputSettingsResponse() { _tds__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputState
#define SOAP_TYPE__tds__SetRelayOutputState (229)
/* tds:SetRelayOutputState */
class SOAP_CMAC _tds__SetRelayOutputState
{
public:
	std::string RelayOutputToken;	/* required element of type tt:ReferenceToken */
	enum tt__RelayLogicalState LogicalState;	/* required element of type tt:RelayLogicalState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 229; } /* = unique id SOAP_TYPE__tds__SetRelayOutputState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputState() { _tds__SetRelayOutputState::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputState() { }
};
#endif

#ifndef SOAP_TYPE__tds__SetRelayOutputStateResponse
#define SOAP_TYPE__tds__SetRelayOutputStateResponse (230)
/* tds:SetRelayOutputStateResponse */
class SOAP_CMAC _tds__SetRelayOutputStateResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 230; } /* = unique id SOAP_TYPE__tds__SetRelayOutputStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SetRelayOutputStateResponse() { _tds__SetRelayOutputStateResponse::soap_default(NULL); }
	virtual ~_tds__SetRelayOutputStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommand
#define SOAP_TYPE__tds__SendAuxiliaryCommand (231)
/* tds:SendAuxiliaryCommand */
class SOAP_CMAC _tds__SendAuxiliaryCommand
{
public:
	std::string AuxiliaryCommand;	/* required element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 231; } /* = unique id SOAP_TYPE__tds__SendAuxiliaryCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommand() { _tds__SendAuxiliaryCommand::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommand() { }
};
#endif

#ifndef SOAP_TYPE__tds__SendAuxiliaryCommandResponse
#define SOAP_TYPE__tds__SendAuxiliaryCommandResponse (232)
/* tds:SendAuxiliaryCommandResponse */
class SOAP_CMAC _tds__SendAuxiliaryCommandResponse
{
public:
	std::string *AuxiliaryCommandResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AuxiliaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 232; } /* = unique id SOAP_TYPE__tds__SendAuxiliaryCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__SendAuxiliaryCommandResponse() { _tds__SendAuxiliaryCommandResponse::soap_default(NULL); }
	virtual ~_tds__SendAuxiliaryCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Capabilities
#define SOAP_TYPE__tds__GetDot11Capabilities (233)
/* tds:GetDot11Capabilities */
class SOAP_CMAC _tds__GetDot11Capabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 233; } /* = unique id SOAP_TYPE__tds__GetDot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Capabilities() { _tds__GetDot11Capabilities::soap_default(NULL); }
	virtual ~_tds__GetDot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11CapabilitiesResponse
#define SOAP_TYPE__tds__GetDot11CapabilitiesResponse (234)
/* tds:GetDot11CapabilitiesResponse */
class SOAP_CMAC _tds__GetDot11CapabilitiesResponse
{
public:
	class tt__Dot11Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 234; } /* = unique id SOAP_TYPE__tds__GetDot11CapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11CapabilitiesResponse() { _tds__GetDot11CapabilitiesResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11CapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11Status
#define SOAP_TYPE__tds__GetDot11Status (235)
/* tds:GetDot11Status */
class SOAP_CMAC _tds__GetDot11Status
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 235; } /* = unique id SOAP_TYPE__tds__GetDot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11Status() { _tds__GetDot11Status::soap_default(NULL); }
	virtual ~_tds__GetDot11Status() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetDot11StatusResponse
#define SOAP_TYPE__tds__GetDot11StatusResponse (236)
/* tds:GetDot11StatusResponse */
class SOAP_CMAC _tds__GetDot11StatusResponse
{
public:
	class tt__Dot11Status *Status;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Dot11Status */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 236; } /* = unique id SOAP_TYPE__tds__GetDot11StatusResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetDot11StatusResponse() { _tds__GetDot11StatusResponse::soap_default(NULL); }
	virtual ~_tds__GetDot11StatusResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11Networks
#define SOAP_TYPE__tds__ScanAvailableDot11Networks (237)
/* tds:ScanAvailableDot11Networks */
class SOAP_CMAC _tds__ScanAvailableDot11Networks
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 237; } /* = unique id SOAP_TYPE__tds__ScanAvailableDot11Networks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11Networks() { _tds__ScanAvailableDot11Networks::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11Networks() { }
};
#endif

#ifndef SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse
#define SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse (238)
/* tds:ScanAvailableDot11NetworksResponse */
class SOAP_CMAC _tds__ScanAvailableDot11NetworksResponse
{
public:
	std::vector<class tt__Dot11AvailableNetworks * >Networks;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Dot11AvailableNetworks */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 238; } /* = unique id SOAP_TYPE__tds__ScanAvailableDot11NetworksResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__ScanAvailableDot11NetworksResponse() { _tds__ScanAvailableDot11NetworksResponse::soap_default(NULL); }
	virtual ~_tds__ScanAvailableDot11NetworksResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUris
#define SOAP_TYPE__tds__GetSystemUris (239)
/* tds:GetSystemUris */
class SOAP_CMAC _tds__GetSystemUris
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 239; } /* = unique id SOAP_TYPE__tds__GetSystemUris */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUris() { _tds__GetSystemUris::soap_default(NULL); }
	virtual ~_tds__GetSystemUris() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse_Extension
#define SOAP_TYPE__tds__GetSystemUrisResponse_Extension (1275)
/* tds:GetSystemUrisResponse-Extension */
class SOAP_CMAC _tds__GetSystemUrisResponse_Extension
{
public:
	virtual int soap_type() const { return 1275; } /* = unique id SOAP_TYPE__tds__GetSystemUrisResponse_Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse_Extension() { _tds__GetSystemUrisResponse_Extension::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse_Extension() { }
};
#endif

#ifndef SOAP_TYPE__tds__GetSystemUrisResponse
#define SOAP_TYPE__tds__GetSystemUrisResponse (240)
/* tds:GetSystemUrisResponse */
class SOAP_CMAC _tds__GetSystemUrisResponse
{
public:
	class tt__SystemLogUriList *SystemLogUris;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:SystemLogUriList */
	std::string *SupportInfoUri;	/* optional element of type xsd:anyURI */
	std::string *SystemBackupUri;	/* optional element of type xsd:anyURI */
	_tds__GetSystemUrisResponse_Extension *Extension;	/* optional element of type tds:GetSystemUrisResponse-Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 240; } /* = unique id SOAP_TYPE__tds__GetSystemUrisResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__GetSystemUrisResponse() { _tds__GetSystemUrisResponse::soap_default(NULL); }
	virtual ~_tds__GetSystemUrisResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgrade
#define SOAP_TYPE__tds__StartFirmwareUpgrade (241)
/* tds:StartFirmwareUpgrade */
class SOAP_CMAC _tds__StartFirmwareUpgrade
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 241; } /* = unique id SOAP_TYPE__tds__StartFirmwareUpgrade */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgrade() { _tds__StartFirmwareUpgrade::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgrade() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartFirmwareUpgradeResponse
#define SOAP_TYPE__tds__StartFirmwareUpgradeResponse (242)
/* tds:StartFirmwareUpgradeResponse */
class SOAP_CMAC _tds__StartFirmwareUpgradeResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	std::string UploadDelay;	/* required element of type xsd:duration */
	std::string ExpectedDownTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 242; } /* = unique id SOAP_TYPE__tds__StartFirmwareUpgradeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartFirmwareUpgradeResponse() { _tds__StartFirmwareUpgradeResponse::soap_default(NULL); }
	virtual ~_tds__StartFirmwareUpgradeResponse() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestore
#define SOAP_TYPE__tds__StartSystemRestore (243)
/* tds:StartSystemRestore */
class SOAP_CMAC _tds__StartSystemRestore
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 243; } /* = unique id SOAP_TYPE__tds__StartSystemRestore */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestore() { _tds__StartSystemRestore::soap_default(NULL); }
	virtual ~_tds__StartSystemRestore() { }
};
#endif

#ifndef SOAP_TYPE__tds__StartSystemRestoreResponse
#define SOAP_TYPE__tds__StartSystemRestoreResponse (244)
/* tds:StartSystemRestoreResponse */
class SOAP_CMAC _tds__StartSystemRestoreResponse
{
public:
	std::string UploadUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	std::string ExpectedDownTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 244; } /* = unique id SOAP_TYPE__tds__StartSystemRestoreResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tds__StartSystemRestoreResponse() { _tds__StartSystemRestoreResponse::soap_default(NULL); }
	virtual ~_tds__StartSystemRestoreResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceEntity
#define SOAP_TYPE_tt__DeviceEntity (245)
/* tt:DeviceEntity */
class SOAP_CMAC tt__DeviceEntity
{
public:
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 245; } /* = unique id SOAP_TYPE_tt__DeviceEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceEntity() { tt__DeviceEntity::soap_default(NULL); }
	virtual ~tt__DeviceEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangle
#define SOAP_TYPE_tt__IntRectangle (246)
/* tt:IntRectangle */
class SOAP_CMAC tt__IntRectangle
{
public:
	int x;	/* required attribute */
	int y;	/* required attribute */
	int width;	/* required attribute */
	int height;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 246; } /* = unique id SOAP_TYPE_tt__IntRectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangle() { tt__IntRectangle::soap_default(NULL); }
	virtual ~tt__IntRectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRectangleRange
#define SOAP_TYPE_tt__IntRectangleRange (247)
/* tt:IntRectangleRange */
class SOAP_CMAC tt__IntRectangleRange
{
public:
	class tt__IntRange *XRange;	/* required element of type tt:IntRange */
	tt__IntRange *YRange;	/* required element of type tt:IntRange */
	tt__IntRange *WidthRange;	/* required element of type tt:IntRange */
	tt__IntRange *HeightRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 247; } /* = unique id SOAP_TYPE_tt__IntRectangleRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRectangleRange() { tt__IntRectangleRange::soap_default(NULL); }
	virtual ~tt__IntRectangleRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntRange
#define SOAP_TYPE_tt__IntRange (248)
/* tt:IntRange */
class SOAP_CMAC tt__IntRange
{
public:
	int Min;	/* required element of type xsd:int */
	int Max;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 248; } /* = unique id SOAP_TYPE_tt__IntRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntRange() { tt__IntRange::soap_default(NULL); }
	virtual ~tt__IntRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatRange
#define SOAP_TYPE_tt__FloatRange (249)
/* tt:FloatRange */
class SOAP_CMAC tt__FloatRange
{
public:
	float Min;	/* required element of type xsd:float */
	float Max;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 249; } /* = unique id SOAP_TYPE_tt__FloatRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatRange() { tt__FloatRange::soap_default(NULL); }
	virtual ~tt__FloatRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__DurationRange
#define SOAP_TYPE_tt__DurationRange (250)
/* tt:DurationRange */
class SOAP_CMAC tt__DurationRange
{
public:
	std::string Min;	/* required element of type xsd:duration */
	std::string Max;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 250; } /* = unique id SOAP_TYPE_tt__DurationRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DurationRange() { tt__DurationRange::soap_default(NULL); }
	virtual ~tt__DurationRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__IntList
#define SOAP_TYPE_tt__IntList (251)
/* tt:IntList */
class SOAP_CMAC tt__IntList
{
public:
	std::vector<int >Items;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 251; } /* = unique id SOAP_TYPE_tt__IntList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IntList() { tt__IntList::soap_default(NULL); }
	virtual ~tt__IntList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FloatList
#define SOAP_TYPE_tt__FloatList (252)
/* tt:FloatList */
class SOAP_CMAC tt__FloatList
{
public:
	std::vector<float >Items;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 252; } /* = unique id SOAP_TYPE_tt__FloatList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FloatList() { tt__FloatList::soap_default(NULL); }
	virtual ~tt__FloatList() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnyHolder
#define SOAP_TYPE_tt__AnyHolder (253)
/* tt:AnyHolder */
class SOAP_CMAC tt__AnyHolder
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 253; } /* = unique id SOAP_TYPE_tt__AnyHolder */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnyHolder() { tt__AnyHolder::soap_default(NULL); }
	virtual ~tt__AnyHolder() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension
#define SOAP_TYPE_tt__VideoSourceExtension (255)
/* tt:VideoSourceExtension */
class SOAP_CMAC tt__VideoSourceExtension
{
public:
	class tt__ImagingSettings20 *Imaging;	/* optional element of type tt:ImagingSettings20 */
	class tt__VideoSourceExtension2 *Extension;	/* optional element of type tt:VideoSourceExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 255; } /* = unique id SOAP_TYPE_tt__VideoSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension() { tt__VideoSourceExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceExtension2
#define SOAP_TYPE_tt__VideoSourceExtension2 (256)
/* tt:VideoSourceExtension2 */
class SOAP_CMAC tt__VideoSourceExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 256; } /* = unique id SOAP_TYPE_tt__VideoSourceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceExtension2() { tt__VideoSourceExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Profile
#define SOAP_TYPE_tt__Profile (258)
/* tt:Profile */
class SOAP_CMAC tt__Profile
{
public:
	std::string Name;	/* required element of type tt:Name */
	class tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* optional element of type tt:VideoSourceConfiguration */
	class tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* optional element of type tt:AudioSourceConfiguration */
	class tt__VideoEncoderConfiguration *VideoEncoderConfiguration;	/* optional element of type tt:VideoEncoderConfiguration */
	class tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	class tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* optional element of type tt:VideoAnalyticsConfiguration */
	class tt__PTZConfiguration *PTZConfiguration;	/* optional element of type tt:PTZConfiguration */
	class tt__MetadataConfiguration *MetadataConfiguration;	/* optional element of type tt:MetadataConfiguration */
	class tt__ProfileExtension *Extension;	/* optional element of type tt:ProfileExtension */
	std::string token;	/* required attribute */
	bool *fixed;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 258; } /* = unique id SOAP_TYPE_tt__Profile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Profile() { tt__Profile::soap_default(NULL); }
	virtual ~tt__Profile() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension
#define SOAP_TYPE_tt__ProfileExtension (259)
/* tt:ProfileExtension */
class SOAP_CMAC tt__ProfileExtension
{
public:
	class tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* optional element of type tt:AudioOutputConfiguration */
	class tt__AudioDecoderConfiguration *AudioDecoderConfiguration;	/* optional element of type tt:AudioDecoderConfiguration */
	class tt__ProfileExtension2 *Extension;	/* optional element of type tt:ProfileExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 259; } /* = unique id SOAP_TYPE_tt__ProfileExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension() { tt__ProfileExtension::soap_default(NULL); }
	virtual ~tt__ProfileExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileExtension2
#define SOAP_TYPE_tt__ProfileExtension2 (260)
/* tt:ProfileExtension2 */
class SOAP_CMAC tt__ProfileExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 260; } /* = unique id SOAP_TYPE_tt__ProfileExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileExtension2() { tt__ProfileExtension2::soap_default(NULL); }
	virtual ~tt__ProfileExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigurationEntity
#define SOAP_TYPE_tt__ConfigurationEntity (261)
/* tt:ConfigurationEntity */
class SOAP_CMAC tt__ConfigurationEntity
{
public:
	std::string Name;	/* required element of type tt:Name */
	int UseCount;	/* required element of type xsd:int */
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 261; } /* = unique id SOAP_TYPE_tt__ConfigurationEntity */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigurationEntity() { tt__ConfigurationEntity::soap_default(NULL); }
	virtual ~tt__ConfigurationEntity() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension (263)
/* tt:VideoSourceConfigurationExtension */
class SOAP_CMAC tt__VideoSourceConfigurationExtension
{
public:
	class tt__Rotate *Rotate;	/* optional element of type tt:Rotate */
	class tt__VideoSourceConfigurationExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 263; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension() { tt__VideoSourceConfigurationExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationExtension2 (264)
/* tt:VideoSourceConfigurationExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 264; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationExtension2() { tt__VideoSourceConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rotate
#define SOAP_TYPE_tt__Rotate (265)
/* tt:Rotate */
class SOAP_CMAC tt__Rotate
{
public:
	enum tt__RotateMode Mode;	/* required element of type tt:RotateMode */
	int *Degree;	/* optional element of type xsd:int */
	class tt__RotateExtension *Extension;	/* optional element of type tt:RotateExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 265; } /* = unique id SOAP_TYPE_tt__Rotate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rotate() { tt__Rotate::soap_default(NULL); }
	virtual ~tt__Rotate() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateExtension
#define SOAP_TYPE_tt__RotateExtension (266)
/* tt:RotateExtension */
class SOAP_CMAC tt__RotateExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 266; } /* = unique id SOAP_TYPE_tt__RotateExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateExtension() { tt__RotateExtension::soap_default(NULL); }
	virtual ~tt__RotateExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptions
#define SOAP_TYPE_tt__VideoSourceConfigurationOptions (267)
/* tt:VideoSourceConfigurationOptions */
class SOAP_CMAC tt__VideoSourceConfigurationOptions
{
public:
	tt__IntRectangleRange *BoundsRange;	/* required element of type tt:IntRectangleRange */
	std::vector<std::string >VideoSourceTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__VideoSourceConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 267; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptions() { tt__VideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension (268)
/* tt:VideoSourceConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension
{
public:
	class tt__RotateOptions *Rotate;	/* optional element of type tt:RotateOptions */
	class tt__VideoSourceConfigurationOptionsExtension2 *Extension;	/* optional element of type tt:VideoSourceConfigurationOptionsExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 268; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension() { tt__VideoSourceConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2
#define SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 (269)
/* tt:VideoSourceConfigurationOptionsExtension2 */
class SOAP_CMAC tt__VideoSourceConfigurationOptionsExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 269; } /* = unique id SOAP_TYPE_tt__VideoSourceConfigurationOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfigurationOptionsExtension2() { tt__VideoSourceConfigurationOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoSourceConfigurationOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptions
#define SOAP_TYPE_tt__RotateOptions (270)
/* tt:RotateOptions */
class SOAP_CMAC tt__RotateOptions
{
public:
	std::vector<enum tt__RotateMode >Mode;	/* required element of type tt:RotateMode */
	tt__IntList *DegreeList;	/* optional element of type tt:IntList */
	class tt__RotateOptionsExtension *Extension;	/* optional element of type tt:RotateOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 270; } /* = unique id SOAP_TYPE_tt__RotateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptions() { tt__RotateOptions::soap_default(NULL); }
	virtual ~tt__RotateOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RotateOptionsExtension
#define SOAP_TYPE_tt__RotateOptionsExtension (271)
/* tt:RotateOptionsExtension */
class SOAP_CMAC tt__RotateOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 271; } /* = unique id SOAP_TYPE_tt__RotateOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RotateOptionsExtension() { tt__RotateOptionsExtension::soap_default(NULL); }
	virtual ~tt__RotateOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoResolution
#define SOAP_TYPE_tt__VideoResolution (273)
/* tt:VideoResolution */
class SOAP_CMAC tt__VideoResolution
{
public:
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 273; } /* = unique id SOAP_TYPE_tt__VideoResolution */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoResolution() { tt__VideoResolution::soap_default(NULL); }
	virtual ~tt__VideoResolution() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoRateControl
#define SOAP_TYPE_tt__VideoRateControl (274)
/* tt:VideoRateControl */
class SOAP_CMAC tt__VideoRateControl
{
public:
	int FrameRateLimit;	/* required element of type xsd:int */
	int EncodingInterval;	/* required element of type xsd:int */
	int BitrateLimit;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 274; } /* = unique id SOAP_TYPE_tt__VideoRateControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoRateControl() { tt__VideoRateControl::soap_default(NULL); }
	virtual ~tt__VideoRateControl() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Configuration
#define SOAP_TYPE_tt__Mpeg4Configuration (275)
/* tt:Mpeg4Configuration */
class SOAP_CMAC tt__Mpeg4Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__Mpeg4Profile Mpeg4Profile;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 275; } /* = unique id SOAP_TYPE_tt__Mpeg4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Configuration() { tt__Mpeg4Configuration::soap_default(NULL); }
	virtual ~tt__Mpeg4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Configuration
#define SOAP_TYPE_tt__H264Configuration (276)
/* tt:H264Configuration */
class SOAP_CMAC tt__H264Configuration
{
public:
	int GovLength;	/* required element of type xsd:int */
	enum tt__H264Profile H264Profile;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 276; } /* = unique id SOAP_TYPE_tt__H264Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Configuration() { tt__H264Configuration::soap_default(NULL); }
	virtual ~tt__H264Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfigurationOptions
#define SOAP_TYPE_tt__VideoEncoderConfigurationOptions (277)
/* tt:VideoEncoderConfigurationOptions */
class SOAP_CMAC tt__VideoEncoderConfigurationOptions
{
public:
	tt__IntRange *QualityRange;	/* required element of type tt:IntRange */
	class tt__JpegOptions *JPEG;	/* optional element of type tt:JpegOptions */
	class tt__Mpeg4Options *MPEG4;	/* optional element of type tt:Mpeg4Options */
	class tt__H264Options *H264;	/* optional element of type tt:H264Options */
	class tt__VideoEncoderOptionsExtension *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 277; } /* = unique id SOAP_TYPE_tt__VideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfigurationOptions() { tt__VideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension (278)
/* tt:VideoEncoderOptionsExtension */
class SOAP_CMAC tt__VideoEncoderOptionsExtension
{
public:
	class tt__JpegOptions2 *JPEG;	/* optional element of type tt:JpegOptions2 */
	class tt__Mpeg4Options2 *MPEG4;	/* optional element of type tt:Mpeg4Options2 */
	class tt__H264Options2 *H264;	/* optional element of type tt:H264Options2 */
	class tt__VideoEncoderOptionsExtension2 *Extension;	/* optional element of type tt:VideoEncoderOptionsExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 278; } /* = unique id SOAP_TYPE_tt__VideoEncoderOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension() { tt__VideoEncoderOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderOptionsExtension2
#define SOAP_TYPE_tt__VideoEncoderOptionsExtension2 (279)
/* tt:VideoEncoderOptionsExtension2 */
class SOAP_CMAC tt__VideoEncoderOptionsExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 279; } /* = unique id SOAP_TYPE_tt__VideoEncoderOptionsExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderOptionsExtension2() { tt__VideoEncoderOptionsExtension2::soap_default(NULL); }
	virtual ~tt__VideoEncoderOptionsExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions
#define SOAP_TYPE_tt__JpegOptions (280)
/* tt:JpegOptions */
class SOAP_CMAC tt__JpegOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 280; } /* = unique id SOAP_TYPE_tt__JpegOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions() { tt__JpegOptions::soap_default(NULL); }
	virtual ~tt__JpegOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options
#define SOAP_TYPE_tt__Mpeg4Options (282)
/* tt:Mpeg4Options */
class SOAP_CMAC tt__Mpeg4Options
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__Mpeg4Profile >Mpeg4ProfilesSupported;	/* required element of type tt:Mpeg4Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 282; } /* = unique id SOAP_TYPE_tt__Mpeg4Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options() { tt__Mpeg4Options::soap_default(NULL); }
	virtual ~tt__Mpeg4Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options
#define SOAP_TYPE_tt__H264Options (284)
/* tt:H264Options */
class SOAP_CMAC tt__H264Options
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *GovLengthRange;	/* required element of type tt:IntRange */
	tt__IntRange *FrameRateRange;	/* required element of type tt:IntRange */
	tt__IntRange *EncodingIntervalRange;	/* required element of type tt:IntRange */
	std::vector<enum tt__H264Profile >H264ProfilesSupported;	/* required element of type tt:H264Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 284; } /* = unique id SOAP_TYPE_tt__H264Options */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options() { tt__H264Options::soap_default(NULL); }
	virtual ~tt__H264Options() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfigurationOptions
#define SOAP_TYPE_tt__AudioSourceConfigurationOptions (287)
/* tt:AudioSourceConfigurationOptions */
class SOAP_CMAC tt__AudioSourceConfigurationOptions
{
public:
	std::vector<std::string >InputTokensAvailable;	/* required element of type tt:ReferenceToken */
	class tt__AudioSourceOptionsExtension *Extension;	/* optional element of type tt:AudioSourceOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 287; } /* = unique id SOAP_TYPE_tt__AudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfigurationOptions() { tt__AudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceOptionsExtension
#define SOAP_TYPE_tt__AudioSourceOptionsExtension (288)
/* tt:AudioSourceOptionsExtension */
class SOAP_CMAC tt__AudioSourceOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 288; } /* = unique id SOAP_TYPE_tt__AudioSourceOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceOptionsExtension() { tt__AudioSourceOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioSourceOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOptions
#define SOAP_TYPE_tt__AudioEncoderConfigurationOptions (290)
/* tt:AudioEncoderConfigurationOptions */
class SOAP_CMAC tt__AudioEncoderConfigurationOptions
{
public:
	std::vector<class tt__AudioEncoderConfigurationOption * >Options;	/* optional element of type tt:AudioEncoderConfigurationOption */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 290; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOptions() { tt__AudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfigurationOption
#define SOAP_TYPE_tt__AudioEncoderConfigurationOption (291)
/* tt:AudioEncoderConfigurationOption */
class SOAP_CMAC tt__AudioEncoderConfigurationOption
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	tt__IntList *BitrateList;	/* required element of type tt:IntList */
	tt__IntList *SampleRateList;	/* required element of type tt:IntList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 291; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfigurationOption */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfigurationOption() { tt__AudioEncoderConfigurationOption::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfigurationOption() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationExtension
#define SOAP_TYPE_tt__MetadataConfigurationExtension (294)
/* tt:MetadataConfigurationExtension */
class SOAP_CMAC tt__MetadataConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 294; } /* = unique id SOAP_TYPE_tt__MetadataConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationExtension() { tt__MetadataConfigurationExtension::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZFilter
#define SOAP_TYPE_tt__PTZFilter (295)
/* tt:PTZFilter */
class SOAP_CMAC tt__PTZFilter
{
public:
	bool Status;	/* required element of type xsd:boolean */
	bool Position;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 295; } /* = unique id SOAP_TYPE_tt__PTZFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZFilter() { tt__PTZFilter::soap_default(NULL); }
	virtual ~tt__PTZFilter() { }
};
#endif

#ifndef SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy
#define SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy (1320)
/* tt:EventSubscription-SubscriptionPolicy */
class SOAP_CMAC _tt__EventSubscription_SubscriptionPolicy
{
public:
	virtual int soap_type() const { return 1320; } /* = unique id SOAP_TYPE__tt__EventSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__EventSubscription_SubscriptionPolicy() { _tt__EventSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tt__EventSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventSubscription
#define SOAP_TYPE_tt__EventSubscription (296)
/* tt:EventSubscription */
class SOAP_CMAC tt__EventSubscription
{
public:
	class wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	_tt__EventSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tt:EventSubscription-SubscriptionPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 296; } /* = unique id SOAP_TYPE_tt__EventSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventSubscription() { tt__EventSubscription::soap_default(NULL); }
	virtual ~tt__EventSubscription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfigurationOptions
#define SOAP_TYPE_tt__MetadataConfigurationOptions (297)
/* tt:MetadataConfigurationOptions */
class SOAP_CMAC tt__MetadataConfigurationOptions
{
public:
	class tt__PTZStatusFilterOptions *PTZStatusFilterOptions;	/* required element of type tt:PTZStatusFilterOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 297; } /* = unique id SOAP_TYPE_tt__MetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfigurationOptions() { tt__MetadataConfigurationOptions::soap_default(NULL); }
	virtual ~tt__MetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptions
#define SOAP_TYPE_tt__PTZStatusFilterOptions (298)
/* tt:PTZStatusFilterOptions */
class SOAP_CMAC tt__PTZStatusFilterOptions
{
public:
	bool PanTiltStatusSupported;	/* required element of type xsd:boolean */
	bool ZoomStatusSupported;	/* required element of type xsd:boolean */
	bool *PanTiltPositionSupported;	/* optional element of type xsd:boolean */
	bool *ZoomPositionSupported;	/* optional element of type xsd:boolean */
	class tt__PTZStatusFilterOptionsExtension *Extension;	/* optional element of type tt:PTZStatusFilterOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 298; } /* = unique id SOAP_TYPE_tt__PTZStatusFilterOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptions() { tt__PTZStatusFilterOptions::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatusFilterOptionsExtension
#define SOAP_TYPE_tt__PTZStatusFilterOptionsExtension (299)
/* tt:PTZStatusFilterOptionsExtension */
class SOAP_CMAC tt__PTZStatusFilterOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 299; } /* = unique id SOAP_TYPE_tt__PTZStatusFilterOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatusFilterOptionsExtension() { tt__PTZStatusFilterOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZStatusFilterOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputExtension
#define SOAP_TYPE_tt__VideoOutputExtension (301)
/* tt:VideoOutputExtension */
class SOAP_CMAC tt__VideoOutputExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 301; } /* = unique id SOAP_TYPE_tt__VideoOutputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputExtension() { tt__VideoOutputExtension::soap_default(NULL); }
	virtual ~tt__VideoOutputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfigurationOptions
#define SOAP_TYPE_tt__VideoOutputConfigurationOptions (303)
/* tt:VideoOutputConfigurationOptions */
class SOAP_CMAC tt__VideoOutputConfigurationOptions
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 303; } /* = unique id SOAP_TYPE_tt__VideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfigurationOptions() { tt__VideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptions
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptions (304)
/* tt:VideoDecoderConfigurationOptions */
class SOAP_CMAC tt__VideoDecoderConfigurationOptions
{
public:
	class tt__JpegDecOptions *JpegDecOptions;	/* optional element of type tt:JpegDecOptions */
	class tt__H264DecOptions *H264DecOptions;	/* optional element of type tt:H264DecOptions */
	class tt__Mpeg4DecOptions *Mpeg4DecOptions;	/* optional element of type tt:Mpeg4DecOptions */
	class tt__VideoDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:VideoDecoderConfigurationOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 304; } /* = unique id SOAP_TYPE_tt__VideoDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptions() { tt__VideoDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264DecOptions
#define SOAP_TYPE_tt__H264DecOptions (305)
/* tt:H264DecOptions */
class SOAP_CMAC tt__H264DecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__H264Profile >SupportedH264Profiles;	/* required element of type tt:H264Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 305; } /* = unique id SOAP_TYPE_tt__H264DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264DecOptions() { tt__H264DecOptions::soap_default(NULL); }
	virtual ~tt__H264DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegDecOptions
#define SOAP_TYPE_tt__JpegDecOptions (306)
/* tt:JpegDecOptions */
class SOAP_CMAC tt__JpegDecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 306; } /* = unique id SOAP_TYPE_tt__JpegDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegDecOptions() { tt__JpegDecOptions::soap_default(NULL); }
	virtual ~tt__JpegDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4DecOptions
#define SOAP_TYPE_tt__Mpeg4DecOptions (307)
/* tt:Mpeg4DecOptions */
class SOAP_CMAC tt__Mpeg4DecOptions
{
public:
	std::vector<tt__VideoResolution * >ResolutionsAvailable;	/* required element of type tt:VideoResolution */
	std::vector<enum tt__Mpeg4Profile >SupportedMpeg4Profiles;	/* required element of type tt:Mpeg4Profile */
	tt__IntRange *SupportedInputBitrate;	/* required element of type tt:IntRange */
	tt__IntRange *SupportedFrameRate;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 307; } /* = unique id SOAP_TYPE_tt__Mpeg4DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4DecOptions() { tt__Mpeg4DecOptions::soap_default(NULL); }
	virtual ~tt__Mpeg4DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension (308)
/* tt:VideoDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__VideoDecoderConfigurationOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 308; } /* = unique id SOAP_TYPE_tt__VideoDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoDecoderConfigurationOptionsExtension() { tt__VideoDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__VideoDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfigurationOptions
#define SOAP_TYPE_tt__AudioOutputConfigurationOptions (311)
/* tt:AudioOutputConfigurationOptions */
class SOAP_CMAC tt__AudioOutputConfigurationOptions
{
public:
	std::vector<std::string >OutputTokensAvailable;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >SendPrimacyOptions;	/* optional element of type xsd:anyURI */
	tt__IntRange *OutputLevelRange;	/* required element of type tt:IntRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 311; } /* = unique id SOAP_TYPE_tt__AudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfigurationOptions() { tt__AudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptions
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptions (313)
/* tt:AudioDecoderConfigurationOptions */
class SOAP_CMAC tt__AudioDecoderConfigurationOptions
{
public:
	class tt__AACDecOptions *AACDecOptions;	/* optional element of type tt:AACDecOptions */
	class tt__G711DecOptions *G711DecOptions;	/* optional element of type tt:G711DecOptions */
	class tt__G726DecOptions *G726DecOptions;	/* optional element of type tt:G726DecOptions */
	class tt__AudioDecoderConfigurationOptionsExtension *Extension;	/* optional element of type tt:AudioDecoderConfigurationOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 313; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptions() { tt__AudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G711DecOptions
#define SOAP_TYPE_tt__G711DecOptions (314)
/* tt:G711DecOptions */
class SOAP_CMAC tt__G711DecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 314; } /* = unique id SOAP_TYPE_tt__G711DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G711DecOptions() { tt__G711DecOptions::soap_default(NULL); }
	virtual ~tt__G711DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AACDecOptions
#define SOAP_TYPE_tt__AACDecOptions (315)
/* tt:AACDecOptions */
class SOAP_CMAC tt__AACDecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 315; } /* = unique id SOAP_TYPE_tt__AACDecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AACDecOptions() { tt__AACDecOptions::soap_default(NULL); }
	virtual ~tt__AACDecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__G726DecOptions
#define SOAP_TYPE_tt__G726DecOptions (316)
/* tt:G726DecOptions */
class SOAP_CMAC tt__G726DecOptions
{
public:
	tt__IntList *Bitrate;	/* required element of type tt:IntList */
	tt__IntList *SampleRateRange;	/* required element of type tt:IntList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 316; } /* = unique id SOAP_TYPE_tt__G726DecOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__G726DecOptions() { tt__G726DecOptions::soap_default(NULL); }
	virtual ~tt__G726DecOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension
#define SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension (317)
/* tt:AudioDecoderConfigurationOptionsExtension */
class SOAP_CMAC tt__AudioDecoderConfigurationOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 317; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfigurationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfigurationOptionsExtension() { tt__AudioDecoderConfigurationOptionsExtension::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfigurationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MulticastConfiguration
#define SOAP_TYPE_tt__MulticastConfiguration (318)
/* tt:MulticastConfiguration */
class SOAP_CMAC tt__MulticastConfiguration
{
public:
	tt__IPAddress *Address;	/* required element of type tt:IPAddress */
	int Port;	/* required element of type xsd:int */
	int TTL;	/* required element of type xsd:int */
	bool AutoStart;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 318; } /* = unique id SOAP_TYPE_tt__MulticastConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MulticastConfiguration() { tt__MulticastConfiguration::soap_default(NULL); }
	virtual ~tt__MulticastConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__StreamSetup
#define SOAP_TYPE_tt__StreamSetup (319)
/* tt:StreamSetup */
class SOAP_CMAC tt__StreamSetup
{
public:
	enum tt__StreamType Stream;	/* required element of type tt:StreamType */
	class tt__Transport *Transport;	/* required element of type tt:Transport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 319; } /* = unique id SOAP_TYPE_tt__StreamSetup */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__StreamSetup() { tt__StreamSetup::soap_default(NULL); }
	virtual ~tt__StreamSetup() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transport
#define SOAP_TYPE_tt__Transport (320)
/* tt:Transport */
class SOAP_CMAC tt__Transport
{
public:
	enum tt__TransportProtocol Protocol;	/* required element of type tt:TransportProtocol */
	tt__Transport *Tunnel;	/* optional element of type tt:Transport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 320; } /* = unique id SOAP_TYPE_tt__Transport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transport() { tt__Transport::soap_default(NULL); }
	virtual ~tt__Transport() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaUri
#define SOAP_TYPE_tt__MediaUri (321)
/* tt:MediaUri */
class SOAP_CMAC tt__MediaUri
{
public:
	std::string Uri;	/* required element of type xsd:anyURI */
	bool InvalidAfterConnect;	/* required element of type xsd:boolean */
	bool InvalidAfterReboot;	/* required element of type xsd:boolean */
	std::string Timeout;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 321; } /* = unique id SOAP_TYPE_tt__MediaUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaUri() { tt__MediaUri::soap_default(NULL); }
	virtual ~tt__MediaUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__Scope
#define SOAP_TYPE_tt__Scope (322)
/* tt:Scope */
class SOAP_CMAC tt__Scope
{
public:
	enum tt__ScopeDefinition ScopeDef;	/* required element of type tt:ScopeDefinition */
	std::string ScopeItem;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 322; } /* = unique id SOAP_TYPE_tt__Scope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Scope() { tt__Scope::soap_default(NULL); }
	virtual ~tt__Scope() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension
#define SOAP_TYPE_tt__NetworkInterfaceExtension (324)
/* tt:NetworkInterfaceExtension */
class SOAP_CMAC tt__NetworkInterfaceExtension
{
public:
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	std::vector<class tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<class tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 324; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension() { tt__NetworkInterfaceExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot3Configuration
#define SOAP_TYPE_tt__Dot3Configuration (325)
/* tt:Dot3Configuration */
class SOAP_CMAC tt__Dot3Configuration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 325; } /* = unique id SOAP_TYPE_tt__Dot3Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot3Configuration() { tt__Dot3Configuration::soap_default(NULL); }
	virtual ~tt__Dot3Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceExtension2
#define SOAP_TYPE_tt__NetworkInterfaceExtension2 (326)
/* tt:NetworkInterfaceExtension2 */
class SOAP_CMAC tt__NetworkInterfaceExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 326; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceExtension2() { tt__NetworkInterfaceExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceLink
#define SOAP_TYPE_tt__NetworkInterfaceLink (327)
/* tt:NetworkInterfaceLink */
class SOAP_CMAC tt__NetworkInterfaceLink
{
public:
	class tt__NetworkInterfaceConnectionSetting *AdminSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	tt__NetworkInterfaceConnectionSetting *OperSettings;	/* required element of type tt:NetworkInterfaceConnectionSetting */
	int InterfaceType;	/* required element of type tt:IANA-IfTypes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 327; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceLink */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceLink() { tt__NetworkInterfaceLink::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceLink() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConnectionSetting
#define SOAP_TYPE_tt__NetworkInterfaceConnectionSetting (328)
/* tt:NetworkInterfaceConnectionSetting */
class SOAP_CMAC tt__NetworkInterfaceConnectionSetting
{
public:
	bool AutoNegotiation;	/* required element of type xsd:boolean */
	int Speed;	/* required element of type xsd:int */
	enum tt__Duplex Duplex;	/* required element of type tt:Duplex */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 328; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceConnectionSetting */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceConnectionSetting() { tt__NetworkInterfaceConnectionSetting::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceConnectionSetting() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceInfo
#define SOAP_TYPE_tt__NetworkInterfaceInfo (329)
/* tt:NetworkInterfaceInfo */
class SOAP_CMAC tt__NetworkInterfaceInfo
{
public:
	std::string *Name;	/* optional element of type xsd:string */
	std::string HwAddress;	/* required element of type tt:HwAddress */
	int *MTU;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 329; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceInfo() { tt__NetworkInterfaceInfo::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterface
#define SOAP_TYPE_tt__IPv6NetworkInterface (330)
/* tt:IPv6NetworkInterface */
class SOAP_CMAC tt__IPv6NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv6Configuration *Config;	/* optional element of type tt:IPv6Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 330; } /* = unique id SOAP_TYPE_tt__IPv6NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterface() { tt__IPv6NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterface
#define SOAP_TYPE_tt__IPv4NetworkInterface (331)
/* tt:IPv4NetworkInterface */
class SOAP_CMAC tt__IPv4NetworkInterface
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	class tt__IPv4Configuration *Config;	/* required element of type tt:IPv4Configuration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 331; } /* = unique id SOAP_TYPE_tt__IPv4NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterface() { tt__IPv4NetworkInterface::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4Configuration
#define SOAP_TYPE_tt__IPv4Configuration (332)
/* tt:IPv4Configuration */
class SOAP_CMAC tt__IPv4Configuration
{
public:
	std::vector<class tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *LinkLocal;	/* optional element of type tt:PrefixedIPv4Address */
	tt__PrefixedIPv4Address *FromDHCP;	/* optional element of type tt:PrefixedIPv4Address */
	bool DHCP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 332; } /* = unique id SOAP_TYPE_tt__IPv4Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4Configuration() { tt__IPv4Configuration::soap_default(NULL); }
	virtual ~tt__IPv4Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6Configuration
#define SOAP_TYPE_tt__IPv6Configuration (333)
/* tt:IPv6Configuration */
class SOAP_CMAC tt__IPv6Configuration
{
public:
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	enum tt__IPv6DHCPConfiguration DHCP;	/* required element of type tt:IPv6DHCPConfiguration */
	std::vector<class tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >LinkLocal;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromDHCP;	/* optional element of type tt:PrefixedIPv6Address */
	std::vector<tt__PrefixedIPv6Address * >FromRA;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPv6ConfigurationExtension *Extension;	/* optional element of type tt:IPv6ConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 333; } /* = unique id SOAP_TYPE_tt__IPv6Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6Configuration() { tt__IPv6Configuration::soap_default(NULL); }
	virtual ~tt__IPv6Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6ConfigurationExtension
#define SOAP_TYPE_tt__IPv6ConfigurationExtension (334)
/* tt:IPv6ConfigurationExtension */
class SOAP_CMAC tt__IPv6ConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 334; } /* = unique id SOAP_TYPE_tt__IPv6ConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6ConfigurationExtension() { tt__IPv6ConfigurationExtension::soap_default(NULL); }
	virtual ~tt__IPv6ConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocol
#define SOAP_TYPE_tt__NetworkProtocol (335)
/* tt:NetworkProtocol */
class SOAP_CMAC tt__NetworkProtocol
{
public:
	enum tt__NetworkProtocolType Name;	/* required element of type tt:NetworkProtocolType */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<int >Port;	/* required element of type xsd:int */
	class tt__NetworkProtocolExtension *Extension;	/* optional element of type tt:NetworkProtocolExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 335; } /* = unique id SOAP_TYPE_tt__NetworkProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocol() { tt__NetworkProtocol::soap_default(NULL); }
	virtual ~tt__NetworkProtocol() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkProtocolExtension
#define SOAP_TYPE_tt__NetworkProtocolExtension (336)
/* tt:NetworkProtocolExtension */
class SOAP_CMAC tt__NetworkProtocolExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 336; } /* = unique id SOAP_TYPE_tt__NetworkProtocolExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkProtocolExtension() { tt__NetworkProtocolExtension::soap_default(NULL); }
	virtual ~tt__NetworkProtocolExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHost
#define SOAP_TYPE_tt__NetworkHost (337)
/* tt:NetworkHost */
class SOAP_CMAC tt__NetworkHost
{
public:
	enum tt__NetworkHostType Type;	/* required element of type tt:NetworkHostType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
	std::string *DNSname;	/* optional element of type tt:DNSName */
	class tt__NetworkHostExtension *Extension;	/* optional element of type tt:NetworkHostExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 337; } /* = unique id SOAP_TYPE_tt__NetworkHost */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHost() { tt__NetworkHost::soap_default(NULL); }
	virtual ~tt__NetworkHost() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkHostExtension
#define SOAP_TYPE_tt__NetworkHostExtension (338)
/* tt:NetworkHostExtension */
class SOAP_CMAC tt__NetworkHostExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 338; } /* = unique id SOAP_TYPE_tt__NetworkHostExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkHostExtension() { tt__NetworkHostExtension::soap_default(NULL); }
	virtual ~tt__NetworkHostExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddress
#define SOAP_TYPE_tt__IPAddress (339)
/* tt:IPAddress */
class SOAP_CMAC tt__IPAddress
{
public:
	enum tt__IPType Type;	/* required element of type tt:IPType */
	std::string *IPv4Address;	/* optional element of type tt:IPv4Address */
	std::string *IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 339; } /* = unique id SOAP_TYPE_tt__IPAddress */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddress() { tt__IPAddress::soap_default(NULL); }
	virtual ~tt__IPAddress() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv4Address
#define SOAP_TYPE_tt__PrefixedIPv4Address (340)
/* tt:PrefixedIPv4Address */
class SOAP_CMAC tt__PrefixedIPv4Address
{
public:
	std::string Address;	/* required element of type tt:IPv4Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 340; } /* = unique id SOAP_TYPE_tt__PrefixedIPv4Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv4Address() { tt__PrefixedIPv4Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv4Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__PrefixedIPv6Address
#define SOAP_TYPE_tt__PrefixedIPv6Address (341)
/* tt:PrefixedIPv6Address */
class SOAP_CMAC tt__PrefixedIPv6Address
{
public:
	std::string Address;	/* required element of type tt:IPv6Address */
	int PrefixLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 341; } /* = unique id SOAP_TYPE_tt__PrefixedIPv6Address */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PrefixedIPv6Address() { tt__PrefixedIPv6Address::soap_default(NULL); }
	virtual ~tt__PrefixedIPv6Address() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformation
#define SOAP_TYPE_tt__HostnameInformation (342)
/* tt:HostnameInformation */
class SOAP_CMAC tt__HostnameInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::string *Name;	/* optional element of type xsd:token */
	class tt__HostnameInformationExtension *Extension;	/* optional element of type tt:HostnameInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 342; } /* = unique id SOAP_TYPE_tt__HostnameInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformation() { tt__HostnameInformation::soap_default(NULL); }
	virtual ~tt__HostnameInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__HostnameInformationExtension
#define SOAP_TYPE_tt__HostnameInformationExtension (343)
/* tt:HostnameInformationExtension */
class SOAP_CMAC tt__HostnameInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 343; } /* = unique id SOAP_TYPE_tt__HostnameInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__HostnameInformationExtension() { tt__HostnameInformationExtension::soap_default(NULL); }
	virtual ~tt__HostnameInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformation
#define SOAP_TYPE_tt__DNSInformation (344)
/* tt:DNSInformation */
class SOAP_CMAC tt__DNSInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<std::string >SearchDomain;	/* optional element of type xsd:token */
	std::vector<tt__IPAddress * >DNSFromDHCP;	/* optional element of type tt:IPAddress */
	std::vector<tt__IPAddress * >DNSManual;	/* optional element of type tt:IPAddress */
	class tt__DNSInformationExtension *Extension;	/* optional element of type tt:DNSInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 344; } /* = unique id SOAP_TYPE_tt__DNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformation() { tt__DNSInformation::soap_default(NULL); }
	virtual ~tt__DNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DNSInformationExtension
#define SOAP_TYPE_tt__DNSInformationExtension (345)
/* tt:DNSInformationExtension */
class SOAP_CMAC tt__DNSInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 345; } /* = unique id SOAP_TYPE_tt__DNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DNSInformationExtension() { tt__DNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformation
#define SOAP_TYPE_tt__NTPInformation (346)
/* tt:NTPInformation */
class SOAP_CMAC tt__NTPInformation
{
public:
	bool FromDHCP;	/* required element of type xsd:boolean */
	std::vector<tt__NetworkHost * >NTPFromDHCP;	/* optional element of type tt:NetworkHost */
	std::vector<tt__NetworkHost * >NTPManual;	/* optional element of type tt:NetworkHost */
	class tt__NTPInformationExtension *Extension;	/* optional element of type tt:NTPInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 346; } /* = unique id SOAP_TYPE_tt__NTPInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformation() { tt__NTPInformation::soap_default(NULL); }
	virtual ~tt__NTPInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__NTPInformationExtension
#define SOAP_TYPE_tt__NTPInformationExtension (347)
/* tt:NTPInformationExtension */
class SOAP_CMAC tt__NTPInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 347; } /* = unique id SOAP_TYPE_tt__NTPInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NTPInformationExtension() { tt__NTPInformationExtension::soap_default(NULL); }
	virtual ~tt__NTPInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformation
#define SOAP_TYPE_tt__DynamicDNSInformation (348)
/* tt:DynamicDNSInformation */
class SOAP_CMAC tt__DynamicDNSInformation
{
public:
	enum tt__DynamicDNSType Type;	/* required element of type tt:DynamicDNSType */
	std::string *Name;	/* optional element of type tt:DNSName */
	std::string *TTL;	/* optional element of type xsd:duration */
	class tt__DynamicDNSInformationExtension *Extension;	/* optional element of type tt:DynamicDNSInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 348; } /* = unique id SOAP_TYPE_tt__DynamicDNSInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformation() { tt__DynamicDNSInformation::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__DynamicDNSInformationExtension
#define SOAP_TYPE_tt__DynamicDNSInformationExtension (349)
/* tt:DynamicDNSInformationExtension */
class SOAP_CMAC tt__DynamicDNSInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 349; } /* = unique id SOAP_TYPE_tt__DynamicDNSInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DynamicDNSInformationExtension() { tt__DynamicDNSInformationExtension::soap_default(NULL); }
	virtual ~tt__DynamicDNSInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__NetworkInterfaceSetConfiguration (350)
/* tt:NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	tt__NetworkInterfaceConnectionSetting *Link;	/* optional element of type tt:NetworkInterfaceConnectionSetting */
	int *MTU;	/* optional element of type xsd:int */
	class tt__IPv4NetworkInterfaceSetConfiguration *IPv4;	/* optional element of type tt:IPv4NetworkInterfaceSetConfiguration */
	class tt__IPv6NetworkInterfaceSetConfiguration *IPv6;	/* optional element of type tt:IPv6NetworkInterfaceSetConfiguration */
	class tt__NetworkInterfaceSetConfigurationExtension *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 350; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfiguration() { tt__NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension (351)
/* tt:NetworkInterfaceSetConfigurationExtension */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension
{
public:
	std::vector<tt__Dot3Configuration * >Dot3;	/* optional element of type tt:Dot3Configuration */
	std::vector<tt__Dot11Configuration * >Dot11;	/* optional element of type tt:Dot11Configuration */
	class tt__NetworkInterfaceSetConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkInterfaceSetConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 351; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension() { tt__NetworkInterfaceSetConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration (352)
/* tt:IPv6NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv6NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	bool *AcceptRouterAdvert;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv6Address * >Manual;	/* optional element of type tt:PrefixedIPv6Address */
	enum tt__IPv6DHCPConfiguration *DHCP;	/* optional element of type tt:IPv6DHCPConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 352; } /* = unique id SOAP_TYPE_tt__IPv6NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv6NetworkInterfaceSetConfiguration() { tt__IPv6NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv6NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration
#define SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration (353)
/* tt:IPv4NetworkInterfaceSetConfiguration */
class SOAP_CMAC tt__IPv4NetworkInterfaceSetConfiguration
{
public:
	bool *Enabled;	/* optional element of type xsd:boolean */
	std::vector<tt__PrefixedIPv4Address * >Manual;	/* optional element of type tt:PrefixedIPv4Address */
	bool *DHCP;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 353; } /* = unique id SOAP_TYPE_tt__IPv4NetworkInterfaceSetConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPv4NetworkInterfaceSetConfiguration() { tt__IPv4NetworkInterfaceSetConfiguration::soap_default(NULL); }
	virtual ~tt__IPv4NetworkInterfaceSetConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkGateway
#define SOAP_TYPE_tt__NetworkGateway (354)
/* tt:NetworkGateway */
class SOAP_CMAC tt__NetworkGateway
{
public:
	std::vector<std::string >IPv4Address;	/* optional element of type tt:IPv4Address */
	std::vector<std::string >IPv6Address;	/* optional element of type tt:IPv6Address */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 354; } /* = unique id SOAP_TYPE_tt__NetworkGateway */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkGateway() { tt__NetworkGateway::soap_default(NULL); }
	virtual ~tt__NetworkGateway() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfiguration
#define SOAP_TYPE_tt__NetworkZeroConfiguration (355)
/* tt:NetworkZeroConfiguration */
class SOAP_CMAC tt__NetworkZeroConfiguration
{
public:
	std::string InterfaceToken;	/* required element of type tt:ReferenceToken */
	bool Enabled;	/* required element of type xsd:boolean */
	std::vector<std::string >Addresses;	/* optional element of type tt:IPv4Address */
	class tt__NetworkZeroConfigurationExtension *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 355; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfiguration() { tt__NetworkZeroConfiguration::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension (356)
/* tt:NetworkZeroConfigurationExtension */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension
{
public:
	std::vector<tt__NetworkZeroConfiguration * >Additional;	/* optional element of type tt:NetworkZeroConfiguration */
	class tt__NetworkZeroConfigurationExtension2 *Extension;	/* optional element of type tt:NetworkZeroConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 356; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension() { tt__NetworkZeroConfigurationExtension::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkZeroConfigurationExtension2
#define SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 (357)
/* tt:NetworkZeroConfigurationExtension2 */
class SOAP_CMAC tt__NetworkZeroConfigurationExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 357; } /* = unique id SOAP_TYPE_tt__NetworkZeroConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkZeroConfigurationExtension2() { tt__NetworkZeroConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkZeroConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilter
#define SOAP_TYPE_tt__IPAddressFilter (358)
/* tt:IPAddressFilter */
class SOAP_CMAC tt__IPAddressFilter
{
public:
	enum tt__IPAddressFilterType Type;	/* required element of type tt:IPAddressFilterType */
	std::vector<tt__PrefixedIPv4Address * >IPv4Address;	/* optional element of type tt:PrefixedIPv4Address */
	std::vector<tt__PrefixedIPv6Address * >IPv6Address;	/* optional element of type tt:PrefixedIPv6Address */
	class tt__IPAddressFilterExtension *Extension;	/* optional element of type tt:IPAddressFilterExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 358; } /* = unique id SOAP_TYPE_tt__IPAddressFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilter() { tt__IPAddressFilter::soap_default(NULL); }
	virtual ~tt__IPAddressFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__IPAddressFilterExtension
#define SOAP_TYPE_tt__IPAddressFilterExtension (359)
/* tt:IPAddressFilterExtension */
class SOAP_CMAC tt__IPAddressFilterExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 359; } /* = unique id SOAP_TYPE_tt__IPAddressFilterExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IPAddressFilterExtension() { tt__IPAddressFilterExtension::soap_default(NULL); }
	virtual ~tt__IPAddressFilterExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Configuration
#define SOAP_TYPE_tt__Dot11Configuration (360)
/* tt:Dot11Configuration */
class SOAP_CMAC tt__Dot11Configuration
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	enum tt__Dot11StationMode Mode;	/* required element of type tt:Dot11StationMode */
	std::string Alias;	/* required element of type tt:Name */
	std::string Priority;	/* required element of type tt:NetworkInterfaceConfigPriority */
	class tt__Dot11SecurityConfiguration *Security;	/* required element of type tt:Dot11SecurityConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 360; } /* = unique id SOAP_TYPE_tt__Dot11Configuration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Configuration() { tt__Dot11Configuration::soap_default(NULL); }
	virtual ~tt__Dot11Configuration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfiguration
#define SOAP_TYPE_tt__Dot11SecurityConfiguration (361)
/* tt:Dot11SecurityConfiguration */
class SOAP_CMAC tt__Dot11SecurityConfiguration
{
public:
	enum tt__Dot11SecurityMode Mode;	/* required element of type tt:Dot11SecurityMode */
	enum tt__Dot11Cipher *Algorithm;	/* optional element of type tt:Dot11Cipher */
	class tt__Dot11PSKSet *PSK;	/* optional element of type tt:Dot11PSKSet */
	std::string *Dot1X;	/* optional element of type tt:ReferenceToken */
	class tt__Dot11SecurityConfigurationExtension *Extension;	/* optional element of type tt:Dot11SecurityConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 361; } /* = unique id SOAP_TYPE_tt__Dot11SecurityConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfiguration() { tt__Dot11SecurityConfiguration::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11SecurityConfigurationExtension
#define SOAP_TYPE_tt__Dot11SecurityConfigurationExtension (362)
/* tt:Dot11SecurityConfigurationExtension */
class SOAP_CMAC tt__Dot11SecurityConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 362; } /* = unique id SOAP_TYPE_tt__Dot11SecurityConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11SecurityConfigurationExtension() { tt__Dot11SecurityConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot11SecurityConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSet
#define SOAP_TYPE_tt__Dot11PSKSet (363)
/* tt:Dot11PSKSet */
class SOAP_CMAC tt__Dot11PSKSet
{
public:
	xsd__hexBinary *Key;	/* optional element of type tt:Dot11PSK */
	std::string *Passphrase;	/* optional element of type tt:Dot11PSKPassphrase */
	class tt__Dot11PSKSetExtension *Extension;	/* optional element of type tt:Dot11PSKSetExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 363; } /* = unique id SOAP_TYPE_tt__Dot11PSKSet */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSet() { tt__Dot11PSKSet::soap_default(NULL); }
	virtual ~tt__Dot11PSKSet() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKSetExtension
#define SOAP_TYPE_tt__Dot11PSKSetExtension (364)
/* tt:Dot11PSKSetExtension */
class SOAP_CMAC tt__Dot11PSKSetExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 364; } /* = unique id SOAP_TYPE_tt__Dot11PSKSetExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11PSKSetExtension() { tt__Dot11PSKSetExtension::soap_default(NULL); }
	virtual ~tt__Dot11PSKSetExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2
#define SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 (365)
/* tt:NetworkInterfaceSetConfigurationExtension2 */
class SOAP_CMAC tt__NetworkInterfaceSetConfigurationExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 365; } /* = unique id SOAP_TYPE_tt__NetworkInterfaceSetConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterfaceSetConfigurationExtension2() { tt__NetworkInterfaceSetConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__NetworkInterfaceSetConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Capabilities
#define SOAP_TYPE_tt__Dot11Capabilities (366)
/* tt:Dot11Capabilities */
class SOAP_CMAC tt__Dot11Capabilities
{
public:
	bool TKIP;	/* required element of type xsd:boolean */
	bool ScanAvailableNetworks;	/* required element of type xsd:boolean */
	bool MultipleConfiguration;	/* required element of type xsd:boolean */
	bool AdHocStationMode;	/* required element of type xsd:boolean */
	bool WEP;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 366; } /* = unique id SOAP_TYPE_tt__Dot11Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Capabilities() { tt__Dot11Capabilities::soap_default(NULL); }
	virtual ~tt__Dot11Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11Status
#define SOAP_TYPE_tt__Dot11Status (367)
/* tt:Dot11Status */
class SOAP_CMAC tt__Dot11Status
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	enum tt__Dot11Cipher *PairCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11Cipher *GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	std::string ActiveConfigAlias;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 367; } /* = unique id SOAP_TYPE_tt__Dot11Status */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11Status() { tt__Dot11Status::soap_default(NULL); }
	virtual ~tt__Dot11Status() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworks
#define SOAP_TYPE_tt__Dot11AvailableNetworks (368)
/* tt:Dot11AvailableNetworks */
class SOAP_CMAC tt__Dot11AvailableNetworks
{
public:
	xsd__hexBinary SSID;	/* required element of type tt:Dot11SSIDType */
	std::string *BSSID;	/* optional element of type xsd:string */
	std::vector<enum tt__Dot11AuthAndMangementSuite >AuthAndMangementSuite;	/* optional element of type tt:Dot11AuthAndMangementSuite */
	std::vector<enum tt__Dot11Cipher >PairCipher;	/* optional element of type tt:Dot11Cipher */
	std::vector<enum tt__Dot11Cipher >GroupCipher;	/* optional element of type tt:Dot11Cipher */
	enum tt__Dot11SignalStrength *SignalStrength;	/* optional element of type tt:Dot11SignalStrength */
	class tt__Dot11AvailableNetworksExtension *Extension;	/* optional element of type tt:Dot11AvailableNetworksExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 368; } /* = unique id SOAP_TYPE_tt__Dot11AvailableNetworks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworks() { tt__Dot11AvailableNetworks::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworks() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot11AvailableNetworksExtension
#define SOAP_TYPE_tt__Dot11AvailableNetworksExtension (369)
/* tt:Dot11AvailableNetworksExtension */
class SOAP_CMAC tt__Dot11AvailableNetworksExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 369; } /* = unique id SOAP_TYPE_tt__Dot11AvailableNetworksExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot11AvailableNetworksExtension() { tt__Dot11AvailableNetworksExtension::soap_default(NULL); }
	virtual ~tt__Dot11AvailableNetworksExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Capabilities
#define SOAP_TYPE_tt__Capabilities (370)
/* tt:Capabilities */
class SOAP_CMAC tt__Capabilities
{
public:
	class tt__AnalyticsCapabilities *Analytics;	/* optional element of type tt:AnalyticsCapabilities */
	class tt__DeviceCapabilities *Device;	/* optional element of type tt:DeviceCapabilities */
	class tt__EventCapabilities *Events;	/* optional element of type tt:EventCapabilities */
	class tt__ImagingCapabilities *Imaging;	/* optional element of type tt:ImagingCapabilities */
	class tt__MediaCapabilities *Media;	/* optional element of type tt:MediaCapabilities */
	class tt__PTZCapabilities *PTZ;	/* optional element of type tt:PTZCapabilities */
	class tt__CapabilitiesExtension *Extension;	/* optional element of type tt:CapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 370; } /* = unique id SOAP_TYPE_tt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Capabilities() { tt__Capabilities::soap_default(NULL); }
	virtual ~tt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension
#define SOAP_TYPE_tt__CapabilitiesExtension (371)
/* tt:CapabilitiesExtension */
class SOAP_CMAC tt__CapabilitiesExtension
{
public:
	class tt__DeviceIOCapabilities *DeviceIO;	/* optional element of type tt:DeviceIOCapabilities */
	class tt__DisplayCapabilities *Display;	/* optional element of type tt:DisplayCapabilities */
	class tt__RecordingCapabilities *Recording;	/* optional element of type tt:RecordingCapabilities */
	class tt__SearchCapabilities *Search;	/* optional element of type tt:SearchCapabilities */
	class tt__ReplayCapabilities *Replay;	/* optional element of type tt:ReplayCapabilities */
	class tt__ReceiverCapabilities *Receiver;	/* optional element of type tt:ReceiverCapabilities */
	class tt__AnalyticsDeviceCapabilities *AnalyticsDevice;	/* optional element of type tt:AnalyticsDeviceCapabilities */
	class tt__CapabilitiesExtension2 *Extensions;	/* optional element of type tt:CapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 371; } /* = unique id SOAP_TYPE_tt__CapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension() { tt__CapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CapabilitiesExtension2
#define SOAP_TYPE_tt__CapabilitiesExtension2 (372)
/* tt:CapabilitiesExtension2 */
class SOAP_CMAC tt__CapabilitiesExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 372; } /* = unique id SOAP_TYPE_tt__CapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CapabilitiesExtension2() { tt__CapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__CapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsCapabilities
#define SOAP_TYPE_tt__AnalyticsCapabilities (373)
/* tt:AnalyticsCapabilities */
class SOAP_CMAC tt__AnalyticsCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RuleSupport;	/* required element of type xsd:boolean */
	bool AnalyticsModuleSupport;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 373; } /* = unique id SOAP_TYPE_tt__AnalyticsCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsCapabilities() { tt__AnalyticsCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilities
#define SOAP_TYPE_tt__DeviceCapabilities (374)
/* tt:DeviceCapabilities */
class SOAP_CMAC tt__DeviceCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__NetworkCapabilities *Network;	/* optional element of type tt:NetworkCapabilities */
	class tt__SystemCapabilities *System;	/* optional element of type tt:SystemCapabilities */
	class tt__IOCapabilities *IO;	/* optional element of type tt:IOCapabilities */
	class tt__SecurityCapabilities *Security;	/* optional element of type tt:SecurityCapabilities */
	class tt__DeviceCapabilitiesExtension *Extension;	/* optional element of type tt:DeviceCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 374; } /* = unique id SOAP_TYPE_tt__DeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilities() { tt__DeviceCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceCapabilitiesExtension
#define SOAP_TYPE_tt__DeviceCapabilitiesExtension (375)
/* tt:DeviceCapabilitiesExtension */
class SOAP_CMAC tt__DeviceCapabilitiesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 375; } /* = unique id SOAP_TYPE_tt__DeviceCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceCapabilitiesExtension() { tt__DeviceCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__DeviceCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventCapabilities
#define SOAP_TYPE_tt__EventCapabilities (376)
/* tt:EventCapabilities */
class SOAP_CMAC tt__EventCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool WSSubscriptionPolicySupport;	/* required element of type xsd:boolean */
	bool WSPullPointSupport;	/* required element of type xsd:boolean */
	bool WSPausableSubscriptionManagerInterfaceSupport;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 376; } /* = unique id SOAP_TYPE_tt__EventCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventCapabilities() { tt__EventCapabilities::soap_default(NULL); }
	virtual ~tt__EventCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilities
#define SOAP_TYPE_tt__IOCapabilities (377)
/* tt:IOCapabilities */
class SOAP_CMAC tt__IOCapabilities
{
public:
	int *InputConnectors;	/* optional element of type xsd:int */
	int *RelayOutputs;	/* optional element of type xsd:int */
	class tt__IOCapabilitiesExtension *Extension;	/* optional element of type tt:IOCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 377; } /* = unique id SOAP_TYPE_tt__IOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilities() { tt__IOCapabilities::soap_default(NULL); }
	virtual ~tt__IOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension
#define SOAP_TYPE_tt__IOCapabilitiesExtension (378)
/* tt:IOCapabilitiesExtension */
class SOAP_CMAC tt__IOCapabilitiesExtension
{
public:
	bool *Auxiliary;	/* optional element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	class tt__IOCapabilitiesExtension2 *Extension;	/* required element of type tt:IOCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 378; } /* = unique id SOAP_TYPE_tt__IOCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension() { tt__IOCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__IOCapabilitiesExtension2
#define SOAP_TYPE_tt__IOCapabilitiesExtension2 (379)
/* tt:IOCapabilitiesExtension2 */
class SOAP_CMAC tt__IOCapabilitiesExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 379; } /* = unique id SOAP_TYPE_tt__IOCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__IOCapabilitiesExtension2() { tt__IOCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__IOCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilities
#define SOAP_TYPE_tt__MediaCapabilities (380)
/* tt:MediaCapabilities */
class SOAP_CMAC tt__MediaCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	class tt__RealTimeStreamingCapabilities *StreamingCapabilities;	/* required element of type tt:RealTimeStreamingCapabilities */
	class tt__MediaCapabilitiesExtension *Extension;	/* optional element of type tt:MediaCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 380; } /* = unique id SOAP_TYPE_tt__MediaCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilities() { tt__MediaCapabilities::soap_default(NULL); }
	virtual ~tt__MediaCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaCapabilitiesExtension
#define SOAP_TYPE_tt__MediaCapabilitiesExtension (381)
/* tt:MediaCapabilitiesExtension */
class SOAP_CMAC tt__MediaCapabilitiesExtension
{
public:
	class tt__ProfileCapabilities *ProfileCapabilities;	/* required element of type tt:ProfileCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 381; } /* = unique id SOAP_TYPE_tt__MediaCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaCapabilitiesExtension() { tt__MediaCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__MediaCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilities
#define SOAP_TYPE_tt__RealTimeStreamingCapabilities (382)
/* tt:RealTimeStreamingCapabilities */
class SOAP_CMAC tt__RealTimeStreamingCapabilities
{
public:
	bool *RTPMulticast;	/* optional element of type xsd:boolean */
	bool *RTP_USCORETCP;	/* optional element of type xsd:boolean */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional element of type xsd:boolean */
	class tt__RealTimeStreamingCapabilitiesExtension *Extension;	/* optional element of type tt:RealTimeStreamingCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 382; } /* = unique id SOAP_TYPE_tt__RealTimeStreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilities() { tt__RealTimeStreamingCapabilities::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension
#define SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension (383)
/* tt:RealTimeStreamingCapabilitiesExtension */
class SOAP_CMAC tt__RealTimeStreamingCapabilitiesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 383; } /* = unique id SOAP_TYPE_tt__RealTimeStreamingCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RealTimeStreamingCapabilitiesExtension() { tt__RealTimeStreamingCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__RealTimeStreamingCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ProfileCapabilities
#define SOAP_TYPE_tt__ProfileCapabilities (384)
/* tt:ProfileCapabilities */
class SOAP_CMAC tt__ProfileCapabilities
{
public:
	int MaximumNumberOfProfiles;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 384; } /* = unique id SOAP_TYPE_tt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ProfileCapabilities() { tt__ProfileCapabilities::soap_default(NULL); }
	virtual ~tt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilities
#define SOAP_TYPE_tt__NetworkCapabilities (385)
/* tt:NetworkCapabilities */
class SOAP_CMAC tt__NetworkCapabilities
{
public:
	bool *IPFilter;	/* optional element of type xsd:boolean */
	bool *ZeroConfiguration;	/* optional element of type xsd:boolean */
	bool *IPVersion6;	/* optional element of type xsd:boolean */
	bool *DynDNS;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 385; } /* = unique id SOAP_TYPE_tt__NetworkCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilities() { tt__NetworkCapabilities::soap_default(NULL); }
	virtual ~tt__NetworkCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension (386)
/* tt:NetworkCapabilitiesExtension */
class SOAP_CMAC tt__NetworkCapabilitiesExtension
{
public:
	bool *Dot11Configuration;	/* optional element of type xsd:boolean */
	class tt__NetworkCapabilitiesExtension2 *Extension;	/* optional element of type tt:NetworkCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 386; } /* = unique id SOAP_TYPE_tt__NetworkCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension() { tt__NetworkCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkCapabilitiesExtension2
#define SOAP_TYPE_tt__NetworkCapabilitiesExtension2 (387)
/* tt:NetworkCapabilitiesExtension2 */
class SOAP_CMAC tt__NetworkCapabilitiesExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 387; } /* = unique id SOAP_TYPE_tt__NetworkCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkCapabilitiesExtension2() { tt__NetworkCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__NetworkCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilities
#define SOAP_TYPE_tt__SecurityCapabilities (388)
/* tt:SecurityCapabilities */
class SOAP_CMAC tt__SecurityCapabilities
{
public:
	bool TLS1_x002e1;	/* required element of type xsd:boolean */
	bool TLS1_x002e2;	/* required element of type xsd:boolean */
	bool OnboardKeyGeneration;	/* required element of type xsd:boolean */
	bool AccessPolicyConfig;	/* required element of type xsd:boolean */
	bool X_x002e509Token;	/* required element of type xsd:boolean */
	bool SAMLToken;	/* required element of type xsd:boolean */
	bool KerberosToken;	/* required element of type xsd:boolean */
	bool RELToken;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 388; } /* = unique id SOAP_TYPE_tt__SecurityCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilities() { tt__SecurityCapabilities::soap_default(NULL); }
	virtual ~tt__SecurityCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension (389)
/* tt:SecurityCapabilitiesExtension */
class SOAP_CMAC tt__SecurityCapabilitiesExtension
{
public:
	bool TLS1_x002e0;	/* required element of type xsd:boolean */
	class tt__SecurityCapabilitiesExtension2 *Extension;	/* optional element of type tt:SecurityCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 389; } /* = unique id SOAP_TYPE_tt__SecurityCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension() { tt__SecurityCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SecurityCapabilitiesExtension2
#define SOAP_TYPE_tt__SecurityCapabilitiesExtension2 (390)
/* tt:SecurityCapabilitiesExtension2 */
class SOAP_CMAC tt__SecurityCapabilitiesExtension2
{
public:
	bool Dot1X;	/* required element of type xsd:boolean */
	std::vector<int >SupportedEAPMethod;	/* optional element of type xsd:int */
	bool RemoteUserHandling;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 390; } /* = unique id SOAP_TYPE_tt__SecurityCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SecurityCapabilitiesExtension2() { tt__SecurityCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SecurityCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilities
#define SOAP_TYPE_tt__SystemCapabilities (391)
/* tt:SystemCapabilities */
class SOAP_CMAC tt__SystemCapabilities
{
public:
	bool DiscoveryResolve;	/* required element of type xsd:boolean */
	bool DiscoveryBye;	/* required element of type xsd:boolean */
	bool RemoteDiscovery;	/* required element of type xsd:boolean */
	bool SystemBackup;	/* required element of type xsd:boolean */
	bool SystemLogging;	/* required element of type xsd:boolean */
	bool FirmwareUpgrade;	/* required element of type xsd:boolean */
	std::vector<tt__OnvifVersion * >SupportedVersions;	/* required element of type tt:OnvifVersion */
	class tt__SystemCapabilitiesExtension *Extension;	/* optional element of type tt:SystemCapabilitiesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 391; } /* = unique id SOAP_TYPE_tt__SystemCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilities() { tt__SystemCapabilities::soap_default(NULL); }
	virtual ~tt__SystemCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension
#define SOAP_TYPE_tt__SystemCapabilitiesExtension (392)
/* tt:SystemCapabilitiesExtension */
class SOAP_CMAC tt__SystemCapabilitiesExtension
{
public:
	bool *HttpFirmwareUpgrade;	/* optional element of type xsd:boolean */
	bool *HttpSystemBackup;	/* optional element of type xsd:boolean */
	bool *HttpSystemLogging;	/* optional element of type xsd:boolean */
	bool *HttpSupportInformation;	/* optional element of type xsd:boolean */
	class tt__SystemCapabilitiesExtension2 *Extension;	/* optional element of type tt:SystemCapabilitiesExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 392; } /* = unique id SOAP_TYPE_tt__SystemCapabilitiesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension() { tt__SystemCapabilitiesExtension::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemCapabilitiesExtension2
#define SOAP_TYPE_tt__SystemCapabilitiesExtension2 (393)
/* tt:SystemCapabilitiesExtension2 */
class SOAP_CMAC tt__SystemCapabilitiesExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 393; } /* = unique id SOAP_TYPE_tt__SystemCapabilitiesExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemCapabilitiesExtension2() { tt__SystemCapabilitiesExtension2::soap_default(NULL); }
	virtual ~tt__SystemCapabilitiesExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OnvifVersion
#define SOAP_TYPE_tt__OnvifVersion (394)
/* tt:OnvifVersion */
class SOAP_CMAC tt__OnvifVersion
{
public:
	int Major;	/* required element of type xsd:int */
	int Minor;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 394; } /* = unique id SOAP_TYPE_tt__OnvifVersion */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OnvifVersion() { tt__OnvifVersion::soap_default(NULL); }
	virtual ~tt__OnvifVersion() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingCapabilities
#define SOAP_TYPE_tt__ImagingCapabilities (395)
/* tt:ImagingCapabilities */
class SOAP_CMAC tt__ImagingCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 395; } /* = unique id SOAP_TYPE_tt__ImagingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingCapabilities() { tt__ImagingCapabilities::soap_default(NULL); }
	virtual ~tt__ImagingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZCapabilities
#define SOAP_TYPE_tt__PTZCapabilities (396)
/* tt:PTZCapabilities */
class SOAP_CMAC tt__PTZCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 396; } /* = unique id SOAP_TYPE_tt__PTZCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZCapabilities() { tt__PTZCapabilities::soap_default(NULL); }
	virtual ~tt__PTZCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DeviceIOCapabilities
#define SOAP_TYPE_tt__DeviceIOCapabilities (397)
/* tt:DeviceIOCapabilities */
class SOAP_CMAC tt__DeviceIOCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	int VideoSources;	/* required element of type xsd:int */
	int VideoOutputs;	/* required element of type xsd:int */
	int AudioSources;	/* required element of type xsd:int */
	int AudioOutputs;	/* required element of type xsd:int */
	int RelayOutputs;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 397; } /* = unique id SOAP_TYPE_tt__DeviceIOCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DeviceIOCapabilities() { tt__DeviceIOCapabilities::soap_default(NULL); }
	virtual ~tt__DeviceIOCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__DisplayCapabilities
#define SOAP_TYPE_tt__DisplayCapabilities (398)
/* tt:DisplayCapabilities */
class SOAP_CMAC tt__DisplayCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool FixedLayout;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 398; } /* = unique id SOAP_TYPE_tt__DisplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DisplayCapabilities() { tt__DisplayCapabilities::soap_default(NULL); }
	virtual ~tt__DisplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingCapabilities
#define SOAP_TYPE_tt__RecordingCapabilities (399)
/* tt:RecordingCapabilities */
class SOAP_CMAC tt__RecordingCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool ReceiverSource;	/* required element of type xsd:boolean */
	bool MediaProfileSource;	/* required element of type xsd:boolean */
	bool DynamicRecordings;	/* required element of type xsd:boolean */
	bool DynamicTracks;	/* required element of type xsd:boolean */
	int MaxStringLength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 399; } /* = unique id SOAP_TYPE_tt__RecordingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingCapabilities() { tt__RecordingCapabilities::soap_default(NULL); }
	virtual ~tt__RecordingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchCapabilities
#define SOAP_TYPE_tt__SearchCapabilities (400)
/* tt:SearchCapabilities */
class SOAP_CMAC tt__SearchCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool MetadataSearch;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 400; } /* = unique id SOAP_TYPE_tt__SearchCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchCapabilities() { tt__SearchCapabilities::soap_default(NULL); }
	virtual ~tt__SearchCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayCapabilities
#define SOAP_TYPE_tt__ReplayCapabilities (401)
/* tt:ReplayCapabilities */
class SOAP_CMAC tt__ReplayCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 401; } /* = unique id SOAP_TYPE_tt__ReplayCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayCapabilities() { tt__ReplayCapabilities::soap_default(NULL); }
	virtual ~tt__ReplayCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverCapabilities
#define SOAP_TYPE_tt__ReceiverCapabilities (402)
/* tt:ReceiverCapabilities */
class SOAP_CMAC tt__ReceiverCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool RTP_USCOREMulticast;	/* required element of type xsd:boolean */
	bool RTP_USCORETCP;	/* required element of type xsd:boolean */
	bool RTP_USCORERTSP_USCORETCP;	/* required element of type xsd:boolean */
	int SupportedReceivers;	/* required element of type xsd:int */
	int MaximumRTSPURILength;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 402; } /* = unique id SOAP_TYPE_tt__ReceiverCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverCapabilities() { tt__ReceiverCapabilities::soap_default(NULL); }
	virtual ~tt__ReceiverCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceCapabilities
#define SOAP_TYPE_tt__AnalyticsDeviceCapabilities (403)
/* tt:AnalyticsDeviceCapabilities */
class SOAP_CMAC tt__AnalyticsDeviceCapabilities
{
public:
	std::string XAddr;	/* required element of type xsd:anyURI */
	bool *RuleSupport;	/* optional element of type xsd:boolean */
	class tt__AnalyticsDeviceExtension *Extension;	/* optional element of type tt:AnalyticsDeviceExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 403; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceCapabilities() { tt__AnalyticsDeviceCapabilities::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceExtension
#define SOAP_TYPE_tt__AnalyticsDeviceExtension (404)
/* tt:AnalyticsDeviceExtension */
class SOAP_CMAC tt__AnalyticsDeviceExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 404; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceExtension() { tt__AnalyticsDeviceExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLog
#define SOAP_TYPE_tt__SystemLog (405)
/* tt:SystemLog */
class SOAP_CMAC tt__SystemLog
{
public:
	tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 405; } /* = unique id SOAP_TYPE_tt__SystemLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLog() { tt__SystemLog::soap_default(NULL); }
	virtual ~tt__SystemLog() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportInformation
#define SOAP_TYPE_tt__SupportInformation (406)
/* tt:SupportInformation */
class SOAP_CMAC tt__SupportInformation
{
public:
	tt__AttachmentData *Binary;	/* optional element of type tt:AttachmentData */
	std::string *String;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 406; } /* = unique id SOAP_TYPE_tt__SupportInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportInformation() { tt__SupportInformation::soap_default(NULL); }
	virtual ~tt__SupportInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__BinaryData
#define SOAP_TYPE_tt__BinaryData (407)
/* tt:BinaryData */
class SOAP_CMAC tt__BinaryData
{
public:
	xsd__base64Binary Data;	/* required element of type xsd:base64Binary */
	std::string *xmime__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 407; } /* = unique id SOAP_TYPE_tt__BinaryData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BinaryData() { tt__BinaryData::soap_default(NULL); }
	virtual ~tt__BinaryData() { }
};
#endif

#ifndef SOAP_TYPE_tt__AttachmentData
#define SOAP_TYPE_tt__AttachmentData (408)
/* tt:AttachmentData */
class SOAP_CMAC tt__AttachmentData
{
public:
	struct _xop__Include xop__Include;	/* required element of type xop:Include */
	std::string *xmime__contentType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 408; } /* = unique id SOAP_TYPE_tt__AttachmentData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AttachmentData() { tt__AttachmentData::soap_default(NULL); }
	virtual ~tt__AttachmentData() { }
};
#endif

#ifndef SOAP_TYPE_tt__BackupFile
#define SOAP_TYPE_tt__BackupFile (409)
/* tt:BackupFile */
class SOAP_CMAC tt__BackupFile
{
public:
	std::string Name;	/* required element of type xsd:string */
	tt__AttachmentData *Data;	/* required element of type tt:AttachmentData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 409; } /* = unique id SOAP_TYPE_tt__BackupFile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BackupFile() { tt__BackupFile::soap_default(NULL); }
	virtual ~tt__BackupFile() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUriList
#define SOAP_TYPE_tt__SystemLogUriList (410)
/* tt:SystemLogUriList */
class SOAP_CMAC tt__SystemLogUriList
{
public:
	std::vector<class tt__SystemLogUri * >SystemLog;	/* optional element of type tt:SystemLogUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 410; } /* = unique id SOAP_TYPE_tt__SystemLogUriList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUriList() { tt__SystemLogUriList::soap_default(NULL); }
	virtual ~tt__SystemLogUriList() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemLogUri
#define SOAP_TYPE_tt__SystemLogUri (411)
/* tt:SystemLogUri */
class SOAP_CMAC tt__SystemLogUri
{
public:
	enum tt__SystemLogType Type;	/* required element of type tt:SystemLogType */
	std::string Uri;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 411; } /* = unique id SOAP_TYPE_tt__SystemLogUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemLogUri() { tt__SystemLogUri::soap_default(NULL); }
	virtual ~tt__SystemLogUri() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTime
#define SOAP_TYPE_tt__SystemDateTime (412)
/* tt:SystemDateTime */
class SOAP_CMAC tt__SystemDateTime
{
public:
	enum tt__SetDateTimeType DateTimeType;	/* required element of type tt:SetDateTimeType */
	bool DaylightSavings;	/* required element of type xsd:boolean */
	tt__TimeZone *TimeZone;	/* optional element of type tt:TimeZone */
	tt__DateTime *UTCDateTime;	/* optional element of type tt:DateTime */
	tt__DateTime *LocalDateTime;	/* optional element of type tt:DateTime */
	class tt__SystemDateTimeExtension *Extension;	/* optional element of type tt:SystemDateTimeExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 412; } /* = unique id SOAP_TYPE_tt__SystemDateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTime() { tt__SystemDateTime::soap_default(NULL); }
	virtual ~tt__SystemDateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__SystemDateTimeExtension
#define SOAP_TYPE_tt__SystemDateTimeExtension (413)
/* tt:SystemDateTimeExtension */
class SOAP_CMAC tt__SystemDateTimeExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 413; } /* = unique id SOAP_TYPE_tt__SystemDateTimeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SystemDateTimeExtension() { tt__SystemDateTimeExtension::soap_default(NULL); }
	virtual ~tt__SystemDateTimeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTime
#define SOAP_TYPE_tt__DateTime (414)
/* tt:DateTime */
class SOAP_CMAC tt__DateTime
{
public:
	class tt__Time *Time;	/* required element of type tt:Time */
	class tt__Date *Date;	/* required element of type tt:Date */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 414; } /* = unique id SOAP_TYPE_tt__DateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTime() { tt__DateTime::soap_default(NULL); }
	virtual ~tt__DateTime() { }
};
#endif

#ifndef SOAP_TYPE_tt__Date
#define SOAP_TYPE_tt__Date (415)
/* tt:Date */
class SOAP_CMAC tt__Date
{
public:
	int Year;	/* required element of type xsd:int */
	int Month;	/* required element of type xsd:int */
	int Day;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 415; } /* = unique id SOAP_TYPE_tt__Date */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Date() { tt__Date::soap_default(NULL); }
	virtual ~tt__Date() { }
};
#endif

#ifndef SOAP_TYPE_tt__Time
#define SOAP_TYPE_tt__Time (416)
/* tt:Time */
class SOAP_CMAC tt__Time
{
public:
	int Hour;	/* required element of type xsd:int */
	int Minute;	/* required element of type xsd:int */
	int Second;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 416; } /* = unique id SOAP_TYPE_tt__Time */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Time() { tt__Time::soap_default(NULL); }
	virtual ~tt__Time() { }
};
#endif

#ifndef SOAP_TYPE_tt__TimeZone
#define SOAP_TYPE_tt__TimeZone (417)
/* tt:TimeZone */
class SOAP_CMAC tt__TimeZone
{
public:
	std::string TZ;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 417; } /* = unique id SOAP_TYPE_tt__TimeZone */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TimeZone() { tt__TimeZone::soap_default(NULL); }
	virtual ~tt__TimeZone() { }
};
#endif

#ifndef SOAP_TYPE_tt__RemoteUser
#define SOAP_TYPE_tt__RemoteUser (418)
/* tt:RemoteUser */
class SOAP_CMAC tt__RemoteUser
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	bool UseDerivedPassword;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 418; } /* = unique id SOAP_TYPE_tt__RemoteUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RemoteUser() { tt__RemoteUser::soap_default(NULL); }
	virtual ~tt__RemoteUser() { }
};
#endif

#ifndef SOAP_TYPE_tt__User
#define SOAP_TYPE_tt__User (419)
/* tt:User */
class SOAP_CMAC tt__User
{
public:
	std::string Username;	/* required element of type xsd:string */
	std::string *Password;	/* optional element of type xsd:string */
	enum tt__UserLevel UserLevel;	/* required element of type tt:UserLevel */
	class tt__UserExtension *Extension;	/* optional element of type tt:UserExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 419; } /* = unique id SOAP_TYPE_tt__User */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__User() { tt__User::soap_default(NULL); }
	virtual ~tt__User() { }
};
#endif

#ifndef SOAP_TYPE_tt__UserExtension
#define SOAP_TYPE_tt__UserExtension (420)
/* tt:UserExtension */
class SOAP_CMAC tt__UserExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 420; } /* = unique id SOAP_TYPE_tt__UserExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__UserExtension() { tt__UserExtension::soap_default(NULL); }
	virtual ~tt__UserExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParameters
#define SOAP_TYPE_tt__CertificateGenerationParameters (421)
/* tt:CertificateGenerationParameters */
class SOAP_CMAC tt__CertificateGenerationParameters
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	std::string *Subject;	/* optional element of type xsd:string */
	std::string *ValidNotBefore;	/* optional element of type xsd:token */
	std::string *ValidNotAfter;	/* optional element of type xsd:token */
	class tt__CertificateGenerationParametersExtension *Extension;	/* optional element of type tt:CertificateGenerationParametersExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 421; } /* = unique id SOAP_TYPE_tt__CertificateGenerationParameters */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParameters() { tt__CertificateGenerationParameters::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParameters() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateGenerationParametersExtension
#define SOAP_TYPE_tt__CertificateGenerationParametersExtension (422)
/* tt:CertificateGenerationParametersExtension */
class SOAP_CMAC tt__CertificateGenerationParametersExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 422; } /* = unique id SOAP_TYPE_tt__CertificateGenerationParametersExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateGenerationParametersExtension() { tt__CertificateGenerationParametersExtension::soap_default(NULL); }
	virtual ~tt__CertificateGenerationParametersExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Certificate
#define SOAP_TYPE_tt__Certificate (423)
/* tt:Certificate */
class SOAP_CMAC tt__Certificate
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 423; } /* = unique id SOAP_TYPE_tt__Certificate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Certificate() { tt__Certificate::soap_default(NULL); }
	virtual ~tt__Certificate() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateStatus
#define SOAP_TYPE_tt__CertificateStatus (424)
/* tt:CertificateStatus */
class SOAP_CMAC tt__CertificateStatus
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	bool Status;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 424; } /* = unique id SOAP_TYPE_tt__CertificateStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateStatus() { tt__CertificateStatus::soap_default(NULL); }
	virtual ~tt__CertificateStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateWithPrivateKey
#define SOAP_TYPE_tt__CertificateWithPrivateKey (425)
/* tt:CertificateWithPrivateKey */
class SOAP_CMAC tt__CertificateWithPrivateKey
{
public:
	std::string *CertificateID;	/* optional element of type xsd:token */
	tt__BinaryData *Certificate;	/* required element of type tt:BinaryData */
	tt__BinaryData *PrivateKey;	/* required element of type tt:BinaryData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 425; } /* = unique id SOAP_TYPE_tt__CertificateWithPrivateKey */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateWithPrivateKey() { tt__CertificateWithPrivateKey::soap_default(NULL); }
	virtual ~tt__CertificateWithPrivateKey() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformation
#define SOAP_TYPE_tt__CertificateInformation (426)
/* tt:CertificateInformation */
class SOAP_CMAC tt__CertificateInformation
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	std::string *IssuerDN;	/* optional element of type xsd:string */
	std::string *SubjectDN;	/* optional element of type xsd:string */
	class tt__CertificateUsage *KeyUsage;	/* optional element of type tt:CertificateUsage */
	tt__CertificateUsage *ExtendedKeyUsage;	/* optional element of type tt:CertificateUsage */
	int *KeyLength;	/* optional element of type xsd:int */
	std::string *Version;	/* optional element of type xsd:string */
	std::string *SerialNum;	/* optional element of type xsd:string */
	std::string *SignatureAlgorithm;	/* optional element of type xsd:string */
	class tt__DateTimeRange *Validity;	/* optional element of type tt:DateTimeRange */
	class tt__CertificateInformationExtension *Extension;	/* optional element of type tt:CertificateInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 426; } /* = unique id SOAP_TYPE_tt__CertificateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformation() { tt__CertificateInformation::soap_default(NULL); }
	virtual ~tt__CertificateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateInformationExtension
#define SOAP_TYPE_tt__CertificateInformationExtension (428)
/* tt:CertificateInformationExtension */
class SOAP_CMAC tt__CertificateInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 428; } /* = unique id SOAP_TYPE_tt__CertificateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateInformationExtension() { tt__CertificateInformationExtension::soap_default(NULL); }
	virtual ~tt__CertificateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfiguration
#define SOAP_TYPE_tt__Dot1XConfiguration (429)
/* tt:Dot1XConfiguration */
class SOAP_CMAC tt__Dot1XConfiguration
{
public:
	std::string Dot1XConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::string Identity;	/* required element of type xsd:string */
	std::string *AnonymousID;	/* optional element of type xsd:string */
	int EAPMethod;	/* required element of type xsd:int */
	std::vector<std::string >CACertificateID;	/* optional element of type xsd:token */
	class tt__EAPMethodConfiguration *EAPMethodConfiguration;	/* optional element of type tt:EAPMethodConfiguration */
	class tt__Dot1XConfigurationExtension *Extension;	/* optional element of type tt:Dot1XConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 429; } /* = unique id SOAP_TYPE_tt__Dot1XConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfiguration() { tt__Dot1XConfiguration::soap_default(NULL); }
	virtual ~tt__Dot1XConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Dot1XConfigurationExtension
#define SOAP_TYPE_tt__Dot1XConfigurationExtension (430)
/* tt:Dot1XConfigurationExtension */
class SOAP_CMAC tt__Dot1XConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 430; } /* = unique id SOAP_TYPE_tt__Dot1XConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Dot1XConfigurationExtension() { tt__Dot1XConfigurationExtension::soap_default(NULL); }
	virtual ~tt__Dot1XConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EAPMethodConfiguration
#define SOAP_TYPE_tt__EAPMethodConfiguration (431)
/* tt:EAPMethodConfiguration */
class SOAP_CMAC tt__EAPMethodConfiguration
{
public:
	class tt__TLSConfiguration *TLSConfiguration;	/* optional element of type tt:TLSConfiguration */
	std::string *Password;	/* optional element of type xsd:string */
	class tt__EapMethodExtension *Extension;	/* optional element of type tt:EapMethodExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 431; } /* = unique id SOAP_TYPE_tt__EAPMethodConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EAPMethodConfiguration() { tt__EAPMethodConfiguration::soap_default(NULL); }
	virtual ~tt__EAPMethodConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__EapMethodExtension
#define SOAP_TYPE_tt__EapMethodExtension (432)
/* tt:EapMethodExtension */
class SOAP_CMAC tt__EapMethodExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 432; } /* = unique id SOAP_TYPE_tt__EapMethodExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EapMethodExtension() { tt__EapMethodExtension::soap_default(NULL); }
	virtual ~tt__EapMethodExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__TLSConfiguration
#define SOAP_TYPE_tt__TLSConfiguration (433)
/* tt:TLSConfiguration */
class SOAP_CMAC tt__TLSConfiguration
{
public:
	std::string CertificateID;	/* required element of type xsd:token */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 433; } /* = unique id SOAP_TYPE_tt__TLSConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TLSConfiguration() { tt__TLSConfiguration::soap_default(NULL); }
	virtual ~tt__TLSConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GenericEapPwdConfigurationExtension
#define SOAP_TYPE_tt__GenericEapPwdConfigurationExtension (434)
/* tt:GenericEapPwdConfigurationExtension */
class SOAP_CMAC tt__GenericEapPwdConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 434; } /* = unique id SOAP_TYPE_tt__GenericEapPwdConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GenericEapPwdConfigurationExtension() { tt__GenericEapPwdConfigurationExtension::soap_default(NULL); }
	virtual ~tt__GenericEapPwdConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutputSettings
#define SOAP_TYPE_tt__RelayOutputSettings (435)
/* tt:RelayOutputSettings */
class SOAP_CMAC tt__RelayOutputSettings
{
public:
	enum tt__RelayMode Mode;	/* required element of type tt:RelayMode */
	std::string DelayTime;	/* required element of type xsd:duration */
	enum tt__RelayIdleState IdleState;	/* required element of type tt:RelayIdleState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 435; } /* = unique id SOAP_TYPE_tt__RelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutputSettings() { tt__RelayOutputSettings::soap_default(NULL); }
	virtual ~tt__RelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension
#define SOAP_TYPE_tt__PTZNodeExtension (439)
/* tt:PTZNodeExtension */
class SOAP_CMAC tt__PTZNodeExtension
{
public:
	class tt__PTZPresetTourSupported *SupportedPresetTour;	/* required element of type tt:PTZPresetTourSupported */
	class tt__PTZNodeExtension2 *Extension;	/* optional element of type tt:PTZNodeExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 439; } /* = unique id SOAP_TYPE_tt__PTZNodeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension() { tt__PTZNodeExtension::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNodeExtension2
#define SOAP_TYPE_tt__PTZNodeExtension2 (440)
/* tt:PTZNodeExtension2 */
class SOAP_CMAC tt__PTZNodeExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 440; } /* = unique id SOAP_TYPE_tt__PTZNodeExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNodeExtension2() { tt__PTZNodeExtension2::soap_default(NULL); }
	virtual ~tt__PTZNodeExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupported
#define SOAP_TYPE_tt__PTZPresetTourSupported (441)
/* tt:PTZPresetTourSupported */
class SOAP_CMAC tt__PTZPresetTourSupported
{
public:
	int MaximumNumberOfPresetTours;	/* required element of type xsd:int */
	std::vector<enum tt__PTZPresetTourOperation >PTZPresetTourOperation;	/* optional element of type tt:PTZPresetTourOperation */
	class tt__PTZPresetTourSupportedExtension *Extension;	/* optional element of type tt:PTZPresetTourSupportedExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 441; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSupported */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupported() { tt__PTZPresetTourSupported::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupported() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSupportedExtension
#define SOAP_TYPE_tt__PTZPresetTourSupportedExtension (442)
/* tt:PTZPresetTourSupportedExtension */
class SOAP_CMAC tt__PTZPresetTourSupportedExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 442; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSupportedExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSupportedExtension() { tt__PTZPresetTourSupportedExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSupportedExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension
#define SOAP_TYPE_tt__PTZConfigurationExtension (444)
/* tt:PTZConfigurationExtension */
class SOAP_CMAC tt__PTZConfigurationExtension
{
public:
	class tt__PTControlDirection *PTControlDirection;	/* optional element of type tt:PTControlDirection */
	class tt__PTZConfigurationExtension2 *Extension;	/* optional element of type tt:PTZConfigurationExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 444; } /* = unique id SOAP_TYPE_tt__PTZConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension() { tt__PTZConfigurationExtension::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationExtension2
#define SOAP_TYPE_tt__PTZConfigurationExtension2 (445)
/* tt:PTZConfigurationExtension2 */
class SOAP_CMAC tt__PTZConfigurationExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 445; } /* = unique id SOAP_TYPE_tt__PTZConfigurationExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationExtension2() { tt__PTZConfigurationExtension2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirection
#define SOAP_TYPE_tt__PTControlDirection (446)
/* tt:PTControlDirection */
class SOAP_CMAC tt__PTControlDirection
{
public:
	class tt__EFlip *EFlip;	/* optional element of type tt:EFlip */
	class tt__Reverse *Reverse;	/* optional element of type tt:Reverse */
	class tt__PTControlDirectionExtension *Extension;	/* optional element of type tt:PTControlDirectionExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 446; } /* = unique id SOAP_TYPE_tt__PTControlDirection */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirection() { tt__PTControlDirection::soap_default(NULL); }
	virtual ~tt__PTControlDirection() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionExtension
#define SOAP_TYPE_tt__PTControlDirectionExtension (447)
/* tt:PTControlDirectionExtension */
class SOAP_CMAC tt__PTControlDirectionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 447; } /* = unique id SOAP_TYPE_tt__PTControlDirectionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionExtension() { tt__PTControlDirectionExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlip
#define SOAP_TYPE_tt__EFlip (448)
/* tt:EFlip */
class SOAP_CMAC tt__EFlip
{
public:
	enum tt__EFlipMode Mode;	/* required element of type tt:EFlipMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 448; } /* = unique id SOAP_TYPE_tt__EFlip */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlip() { tt__EFlip::soap_default(NULL); }
	virtual ~tt__EFlip() { }
};
#endif

#ifndef SOAP_TYPE_tt__Reverse
#define SOAP_TYPE_tt__Reverse (449)
/* tt:Reverse */
class SOAP_CMAC tt__Reverse
{
public:
	enum tt__ReverseMode Mode;	/* required element of type tt:ReverseMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 449; } /* = unique id SOAP_TYPE_tt__Reverse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Reverse() { tt__Reverse::soap_default(NULL); }
	virtual ~tt__Reverse() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions
#define SOAP_TYPE_tt__PTZConfigurationOptions (450)
/* tt:PTZConfigurationOptions */
class SOAP_CMAC tt__PTZConfigurationOptions
{
public:
	class tt__PTZSpaces *Spaces;	/* required element of type tt:PTZSpaces */
	tt__DurationRange *PTZTimeout;	/* required element of type tt:DurationRange */
	class tt__PTControlDirectionOptions *PTControlDirection;	/* optional element of type tt:PTControlDirectionOptions */
	class tt__PTZConfigurationOptions2 *Extension;	/* optional element of type tt:PTZConfigurationOptions2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 450; } /* = unique id SOAP_TYPE_tt__PTZConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions() { tt__PTZConfigurationOptions::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfigurationOptions2
#define SOAP_TYPE_tt__PTZConfigurationOptions2 (451)
/* tt:PTZConfigurationOptions2 */
class SOAP_CMAC tt__PTZConfigurationOptions2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 451; } /* = unique id SOAP_TYPE_tt__PTZConfigurationOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfigurationOptions2() { tt__PTZConfigurationOptions2::soap_default(NULL); }
	virtual ~tt__PTZConfigurationOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptions
#define SOAP_TYPE_tt__PTControlDirectionOptions (452)
/* tt:PTControlDirectionOptions */
class SOAP_CMAC tt__PTControlDirectionOptions
{
public:
	class tt__EFlipOptions *EFlip;	/* optional element of type tt:EFlipOptions */
	class tt__ReverseOptions *Reverse;	/* optional element of type tt:ReverseOptions */
	class tt__PTControlDirectionOptionsExtension *Extension;	/* optional element of type tt:PTControlDirectionOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 452; } /* = unique id SOAP_TYPE_tt__PTControlDirectionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptions() { tt__PTControlDirectionOptions::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTControlDirectionOptionsExtension
#define SOAP_TYPE_tt__PTControlDirectionOptionsExtension (453)
/* tt:PTControlDirectionOptionsExtension */
class SOAP_CMAC tt__PTControlDirectionOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 453; } /* = unique id SOAP_TYPE_tt__PTControlDirectionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTControlDirectionOptionsExtension() { tt__PTControlDirectionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTControlDirectionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptions
#define SOAP_TYPE_tt__EFlipOptions (454)
/* tt:EFlipOptions */
class SOAP_CMAC tt__EFlipOptions
{
public:
	std::vector<enum tt__EFlipMode >Mode;	/* optional element of type tt:EFlipMode */
	class tt__EFlipOptionsExtension *Extension;	/* optional element of type tt:EFlipOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 454; } /* = unique id SOAP_TYPE_tt__EFlipOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptions() { tt__EFlipOptions::soap_default(NULL); }
	virtual ~tt__EFlipOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__EFlipOptionsExtension
#define SOAP_TYPE_tt__EFlipOptionsExtension (455)
/* tt:EFlipOptionsExtension */
class SOAP_CMAC tt__EFlipOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 455; } /* = unique id SOAP_TYPE_tt__EFlipOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EFlipOptionsExtension() { tt__EFlipOptionsExtension::soap_default(NULL); }
	virtual ~tt__EFlipOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptions
#define SOAP_TYPE_tt__ReverseOptions (456)
/* tt:ReverseOptions */
class SOAP_CMAC tt__ReverseOptions
{
public:
	std::vector<enum tt__ReverseMode >Mode;	/* optional element of type tt:ReverseMode */
	class tt__ReverseOptionsExtension *Extension;	/* optional element of type tt:ReverseOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 456; } /* = unique id SOAP_TYPE_tt__ReverseOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptions() { tt__ReverseOptions::soap_default(NULL); }
	virtual ~tt__ReverseOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReverseOptionsExtension
#define SOAP_TYPE_tt__ReverseOptionsExtension (457)
/* tt:ReverseOptionsExtension */
class SOAP_CMAC tt__ReverseOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 457; } /* = unique id SOAP_TYPE_tt__ReverseOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReverseOptionsExtension() { tt__ReverseOptionsExtension::soap_default(NULL); }
	virtual ~tt__ReverseOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PanTiltLimits
#define SOAP_TYPE_tt__PanTiltLimits (458)
/* tt:PanTiltLimits */
class SOAP_CMAC tt__PanTiltLimits
{
public:
	class tt__Space2DDescription *Range;	/* required element of type tt:Space2DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 458; } /* = unique id SOAP_TYPE_tt__PanTiltLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PanTiltLimits() { tt__PanTiltLimits::soap_default(NULL); }
	virtual ~tt__PanTiltLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__ZoomLimits
#define SOAP_TYPE_tt__ZoomLimits (459)
/* tt:ZoomLimits */
class SOAP_CMAC tt__ZoomLimits
{
public:
	class tt__Space1DDescription *Range;	/* required element of type tt:Space1DDescription */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 459; } /* = unique id SOAP_TYPE_tt__ZoomLimits */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ZoomLimits() { tt__ZoomLimits::soap_default(NULL); }
	virtual ~tt__ZoomLimits() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpaces
#define SOAP_TYPE_tt__PTZSpaces (460)
/* tt:PTZSpaces */
class SOAP_CMAC tt__PTZSpaces
{
public:
	std::vector<tt__Space2DDescription * >AbsolutePanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >AbsoluteZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >RelativePanTiltTranslationSpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >RelativeZoomTranslationSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space2DDescription * >ContinuousPanTiltVelocitySpace;	/* optional element of type tt:Space2DDescription */
	std::vector<tt__Space1DDescription * >ContinuousZoomVelocitySpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >PanTiltSpeedSpace;	/* optional element of type tt:Space1DDescription */
	std::vector<tt__Space1DDescription * >ZoomSpeedSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZSpacesExtension *Extension;	/* optional element of type tt:PTZSpacesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 460; } /* = unique id SOAP_TYPE_tt__PTZSpaces */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpaces() { tt__PTZSpaces::soap_default(NULL); }
	virtual ~tt__PTZSpaces() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpacesExtension
#define SOAP_TYPE_tt__PTZSpacesExtension (461)
/* tt:PTZSpacesExtension */
class SOAP_CMAC tt__PTZSpacesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 461; } /* = unique id SOAP_TYPE_tt__PTZSpacesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpacesExtension() { tt__PTZSpacesExtension::soap_default(NULL); }
	virtual ~tt__PTZSpacesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space2DDescription
#define SOAP_TYPE_tt__Space2DDescription (462)
/* tt:Space2DDescription */
class SOAP_CMAC tt__Space2DDescription
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	tt__FloatRange *YRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 462; } /* = unique id SOAP_TYPE_tt__Space2DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space2DDescription() { tt__Space2DDescription::soap_default(NULL); }
	virtual ~tt__Space2DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Space1DDescription
#define SOAP_TYPE_tt__Space1DDescription (463)
/* tt:Space1DDescription */
class SOAP_CMAC tt__Space1DDescription
{
public:
	std::string URI;	/* required element of type xsd:anyURI */
	tt__FloatRange *XRange;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 463; } /* = unique id SOAP_TYPE_tt__Space1DDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Space1DDescription() { tt__Space1DDescription::soap_default(NULL); }
	virtual ~tt__Space1DDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector2D
#define SOAP_TYPE_tt__Vector2D (464)
/* tt:Vector2D */
class SOAP_CMAC tt__Vector2D
{
public:
	float x;	/* required attribute */
	float y;	/* required attribute */
	std::string *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 464; } /* = unique id SOAP_TYPE_tt__Vector2D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector2D() { tt__Vector2D::soap_default(NULL); }
	virtual ~tt__Vector2D() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector1D
#define SOAP_TYPE_tt__Vector1D (465)
/* tt:Vector1D */
class SOAP_CMAC tt__Vector1D
{
public:
	float x;	/* required attribute */
	std::string *space;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 465; } /* = unique id SOAP_TYPE_tt__Vector1D */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector1D() { tt__Vector1D::soap_default(NULL); }
	virtual ~tt__Vector1D() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZVector
#define SOAP_TYPE_tt__PTZVector (466)
/* tt:PTZVector */
class SOAP_CMAC tt__PTZVector
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 466; } /* = unique id SOAP_TYPE_tt__PTZVector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZVector() { tt__PTZVector::soap_default(NULL); }
	virtual ~tt__PTZVector() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZSpeed
#define SOAP_TYPE_tt__PTZSpeed (467)
/* tt:PTZSpeed */
class SOAP_CMAC tt__PTZSpeed
{
public:
	tt__Vector2D *PanTilt;	/* optional element of type tt:Vector2D */
	tt__Vector1D *Zoom;	/* optional element of type tt:Vector1D */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 467; } /* = unique id SOAP_TYPE_tt__PTZSpeed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZSpeed() { tt__PTZSpeed::soap_default(NULL); }
	virtual ~tt__PTZSpeed() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStatus
#define SOAP_TYPE_tt__PTZStatus (468)
/* tt:PTZStatus */
class SOAP_CMAC tt__PTZStatus
{
public:
	tt__PTZVector *Position;	/* optional element of type tt:PTZVector */
	class tt__PTZMoveStatus *MoveStatus;	/* optional element of type tt:PTZMoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	time_t UtcTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 468; } /* = unique id SOAP_TYPE_tt__PTZStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStatus() { tt__PTZStatus::soap_default(NULL); }
	virtual ~tt__PTZStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPreset
#define SOAP_TYPE_tt__PTZPreset (469)
/* tt:PTZPreset */
class SOAP_CMAC tt__PTZPreset
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	tt__PTZVector *PTZPosition;	/* optional element of type tt:PTZVector */
	std::string *token;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 469; } /* = unique id SOAP_TYPE_tt__PTZPreset */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPreset() { tt__PTZPreset::soap_default(NULL); }
	virtual ~tt__PTZPreset() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZMoveStatus
#define SOAP_TYPE_tt__PTZMoveStatus (470)
/* tt:PTZMoveStatus */
class SOAP_CMAC tt__PTZMoveStatus
{
public:
	enum tt__MoveStatus *PanTilt;	/* optional element of type tt:MoveStatus */
	enum tt__MoveStatus *Zoom;	/* optional element of type tt:MoveStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 470; } /* = unique id SOAP_TYPE_tt__PTZMoveStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZMoveStatus() { tt__PTZMoveStatus::soap_default(NULL); }
	virtual ~tt__PTZMoveStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PresetTour
#define SOAP_TYPE_tt__PresetTour (471)
/* tt:PresetTour */
class SOAP_CMAC tt__PresetTour
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	class tt__PTZPresetTourStatus *Status;	/* required element of type tt:PTZPresetTourStatus */
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingCondition *StartingCondition;	/* required element of type tt:PTZPresetTourStartingCondition */
	std::vector<class tt__PTZPresetTourSpot * >TourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourExtension *Extension;	/* optional element of type tt:PTZPresetTourExtension */
	std::string *token;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 471; } /* = unique id SOAP_TYPE_tt__PresetTour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PresetTour() { tt__PresetTour::soap_default(NULL); }
	virtual ~tt__PresetTour() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourExtension
#define SOAP_TYPE_tt__PTZPresetTourExtension (472)
/* tt:PTZPresetTourExtension */
class SOAP_CMAC tt__PTZPresetTourExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 472; } /* = unique id SOAP_TYPE_tt__PTZPresetTourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourExtension() { tt__PTZPresetTourExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpot
#define SOAP_TYPE_tt__PTZPresetTourSpot (473)
/* tt:PTZPresetTourSpot */
class SOAP_CMAC tt__PTZPresetTourSpot
{
public:
	class tt__PTZPresetTourPresetDetail *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetail */
	tt__PTZSpeed *Speed;	/* optional element of type tt:PTZSpeed */
	std::string *StayTime;	/* optional element of type xsd:duration */
	class tt__PTZPresetTourSpotExtension *Extension;	/* optional element of type tt:PTZPresetTourSpotExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 473; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpot() { tt__PTZPresetTourSpot::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpot() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotExtension
#define SOAP_TYPE_tt__PTZPresetTourSpotExtension (474)
/* tt:PTZPresetTourSpotExtension */
class SOAP_CMAC tt__PTZPresetTourSpotExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 474; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpotExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotExtension() { tt__PTZPresetTourSpotExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZPresetTourPresetDetail
#define SOAP_TYPE__tt__union_PTZPresetTourPresetDetail (1466)
/* xsd:choice */
union _tt__union_PTZPresetTourPresetDetail
{
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PresetToken	(1)
	std::string *PresetToken;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_Home	(2)
	bool Home;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_PTZPosition	(3)
	tt__PTZVector *PTZPosition;
#define SOAP_UNION__tt__union_PTZPresetTourPresetDetail_TypeExtension	(4)
	class tt__PTZPresetTourTypeExtension *TypeExtension;
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetail
#define SOAP_TYPE_tt__PTZPresetTourPresetDetail (475)
/* Choice: */
class SOAP_CMAC tt__PTZPresetTourPresetDetail
{
public:
	int __union_PTZPresetTourPresetDetail;	/* union discriminant (of union defined below) */
	union _tt__union_PTZPresetTourPresetDetail union_PTZPresetTourPresetDetail;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 475; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetail */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetail() { tt__PTZPresetTourPresetDetail::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetail() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourTypeExtension
#define SOAP_TYPE_tt__PTZPresetTourTypeExtension (476)
/* tt:PTZPresetTourTypeExtension */
class SOAP_CMAC tt__PTZPresetTourTypeExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 476; } /* = unique id SOAP_TYPE_tt__PTZPresetTourTypeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourTypeExtension() { tt__PTZPresetTourTypeExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourTypeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatus
#define SOAP_TYPE_tt__PTZPresetTourStatus (477)
/* tt:PTZPresetTourStatus */
class SOAP_CMAC tt__PTZPresetTourStatus
{
public:
	enum tt__PTZPresetTourState State;	/* required element of type tt:PTZPresetTourState */
	tt__PTZPresetTourSpot *CurrentTourSpot;	/* optional element of type tt:PTZPresetTourSpot */
	class tt__PTZPresetTourStatusExtension *Extension;	/* optional element of type tt:PTZPresetTourStatusExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 477; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatus() { tt__PTZPresetTourStatus::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStatusExtension
#define SOAP_TYPE_tt__PTZPresetTourStatusExtension (478)
/* tt:PTZPresetTourStatusExtension */
class SOAP_CMAC tt__PTZPresetTourStatusExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 478; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStatusExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStatusExtension() { tt__PTZPresetTourStatusExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStatusExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingCondition
#define SOAP_TYPE_tt__PTZPresetTourStartingCondition (479)
/* tt:PTZPresetTourStartingCondition */
class SOAP_CMAC tt__PTZPresetTourStartingCondition
{
public:
	int *RecurringTime;	/* optional element of type xsd:int */
	std::string *RecurringDuration;	/* optional element of type xsd:duration */
	enum tt__PTZPresetTourDirection *Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 479; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingCondition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingCondition() { tt__PTZPresetTourStartingCondition::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingCondition() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension (480)
/* tt:PTZPresetTourStartingConditionExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 480; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionExtension() { tt__PTZPresetTourStartingConditionExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourOptions
#define SOAP_TYPE_tt__PTZPresetTourOptions (481)
/* tt:PTZPresetTourOptions */
class SOAP_CMAC tt__PTZPresetTourOptions
{
public:
	bool AutoStart;	/* required element of type xsd:boolean */
	class tt__PTZPresetTourStartingConditionOptions *StartingCondition;	/* required element of type tt:PTZPresetTourStartingConditionOptions */
	class tt__PTZPresetTourSpotOptions *TourSpot;	/* required element of type tt:PTZPresetTourSpotOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 481; } /* = unique id SOAP_TYPE_tt__PTZPresetTourOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourOptions() { tt__PTZPresetTourOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourSpotOptions
#define SOAP_TYPE_tt__PTZPresetTourSpotOptions (482)
/* tt:PTZPresetTourSpotOptions */
class SOAP_CMAC tt__PTZPresetTourSpotOptions
{
public:
	class tt__PTZPresetTourPresetDetailOptions *PresetDetail;	/* required element of type tt:PTZPresetTourPresetDetailOptions */
	tt__DurationRange *StayTime;	/* required element of type tt:DurationRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 482; } /* = unique id SOAP_TYPE_tt__PTZPresetTourSpotOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourSpotOptions() { tt__PTZPresetTourSpotOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourSpotOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions (483)
/* tt:PTZPresetTourPresetDetailOptions */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptions
{
public:
	std::vector<std::string >PresetToken;	/* optional element of type tt:ReferenceToken */
	bool *Home;	/* optional element of type xsd:boolean */
	tt__Space2DDescription *PanTiltPositionSpace;	/* optional element of type tt:Space2DDescription */
	tt__Space1DDescription *ZoomPositionSpace;	/* optional element of type tt:Space1DDescription */
	class tt__PTZPresetTourPresetDetailOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourPresetDetailOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 483; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptions() { tt__PTZPresetTourPresetDetailOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension (484)
/* tt:PTZPresetTourPresetDetailOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourPresetDetailOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 484; } /* = unique id SOAP_TYPE_tt__PTZPresetTourPresetDetailOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourPresetDetailOptionsExtension() { tt__PTZPresetTourPresetDetailOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourPresetDetailOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions (485)
/* tt:PTZPresetTourStartingConditionOptions */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptions
{
public:
	tt__IntRange *RecurringTime;	/* optional element of type tt:IntRange */
	tt__DurationRange *RecurringDuration;	/* optional element of type tt:DurationRange */
	std::vector<enum tt__PTZPresetTourDirection >Direction;	/* optional element of type tt:PTZPresetTourDirection */
	class tt__PTZPresetTourStartingConditionOptionsExtension *Extension;	/* optional element of type tt:PTZPresetTourStartingConditionOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 485; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptions() { tt__PTZPresetTourStartingConditionOptions::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension
#define SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension (486)
/* tt:PTZPresetTourStartingConditionOptionsExtension */
class SOAP_CMAC tt__PTZPresetTourStartingConditionOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 486; } /* = unique id SOAP_TYPE_tt__PTZPresetTourStartingConditionOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPresetTourStartingConditionOptionsExtension() { tt__PTZPresetTourStartingConditionOptionsExtension::soap_default(NULL); }
	virtual ~tt__PTZPresetTourStartingConditionOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus
#define SOAP_TYPE_tt__ImagingStatus (487)
/* tt:ImagingStatus */
class SOAP_CMAC tt__ImagingStatus
{
public:
	class tt__FocusStatus *FocusStatus;	/* required element of type tt:FocusStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 487; } /* = unique id SOAP_TYPE_tt__ImagingStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus() { tt__ImagingStatus::soap_default(NULL); }
	virtual ~tt__ImagingStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus
#define SOAP_TYPE_tt__FocusStatus (488)
/* tt:FocusStatus */
class SOAP_CMAC tt__FocusStatus
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string Error;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 488; } /* = unique id SOAP_TYPE_tt__FocusStatus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus() { tt__FocusStatus::soap_default(NULL); }
	virtual ~tt__FocusStatus() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration
#define SOAP_TYPE_tt__FocusConfiguration (489)
/* tt:FocusConfiguration */
class SOAP_CMAC tt__FocusConfiguration
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float DefaultSpeed;	/* required element of type xsd:float */
	float NearLimit;	/* required element of type xsd:float */
	float FarLimit;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 489; } /* = unique id SOAP_TYPE_tt__FocusConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration() { tt__FocusConfiguration::soap_default(NULL); }
	virtual ~tt__FocusConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings
#define SOAP_TYPE_tt__ImagingSettings (490)
/* tt:ImagingSettings */
class SOAP_CMAC tt__ImagingSettings
{
public:
	class tt__BacklightCompensation *BacklightCompensation;	/* optional element of type tt:BacklightCompensation */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure *Exposure;	/* optional element of type tt:Exposure */
	tt__FocusConfiguration *Focus;	/* optional element of type tt:FocusConfiguration */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange *WideDynamicRange;	/* optional element of type tt:WideDynamicRange */
	class tt__WhiteBalance *WhiteBalance;	/* optional element of type tt:WhiteBalance */
	class tt__ImagingSettingsExtension *Extension;	/* optional element of type tt:ImagingSettingsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 490; } /* = unique id SOAP_TYPE_tt__ImagingSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings() { tt__ImagingSettings::soap_default(NULL); }
	virtual ~tt__ImagingSettings() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension
#define SOAP_TYPE_tt__ImagingSettingsExtension (491)
/* tt:ImagingSettingsExtension */
class SOAP_CMAC tt__ImagingSettingsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 491; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension() { tt__ImagingSettingsExtension::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure
#define SOAP_TYPE_tt__Exposure (492)
/* tt:Exposure */
class SOAP_CMAC tt__Exposure
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority Priority;	/* required element of type tt:ExposurePriority */
	class tt__Rectangle *Window;	/* required element of type tt:Rectangle */
	float MinExposureTime;	/* required element of type xsd:float */
	float MaxExposureTime;	/* required element of type xsd:float */
	float MinGain;	/* required element of type xsd:float */
	float MaxGain;	/* required element of type xsd:float */
	float MinIris;	/* required element of type xsd:float */
	float MaxIris;	/* required element of type xsd:float */
	float ExposureTime;	/* required element of type xsd:float */
	float Gain;	/* required element of type xsd:float */
	float Iris;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 492; } /* = unique id SOAP_TYPE_tt__Exposure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure() { tt__Exposure::soap_default(NULL); }
	virtual ~tt__Exposure() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange
#define SOAP_TYPE_tt__WideDynamicRange (493)
/* tt:WideDynamicRange */
class SOAP_CMAC tt__WideDynamicRange
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 493; } /* = unique id SOAP_TYPE_tt__WideDynamicRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange() { tt__WideDynamicRange::soap_default(NULL); }
	virtual ~tt__WideDynamicRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation
#define SOAP_TYPE_tt__BacklightCompensation (494)
/* tt:BacklightCompensation */
class SOAP_CMAC tt__BacklightCompensation
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float Level;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 494; } /* = unique id SOAP_TYPE_tt__BacklightCompensation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation() { tt__BacklightCompensation::soap_default(NULL); }
	virtual ~tt__BacklightCompensation() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions
#define SOAP_TYPE_tt__ImagingOptions (495)
/* tt:ImagingOptions */
class SOAP_CMAC tt__ImagingOptions
{
public:
	class tt__BacklightCompensationOptions *BacklightCompensation;	/* required element of type tt:BacklightCompensationOptions */
	tt__FloatRange *Brightness;	/* required element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* required element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* required element of type tt:FloatRange */
	class tt__ExposureOptions *Exposure;	/* required element of type tt:ExposureOptions */
	class tt__FocusOptions *Focus;	/* required element of type tt:FocusOptions */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* required element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* required element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions *WideDynamicRange;	/* required element of type tt:WideDynamicRangeOptions */
	class tt__WhiteBalanceOptions *WhiteBalance;	/* required element of type tt:WhiteBalanceOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 495; } /* = unique id SOAP_TYPE_tt__ImagingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions() { tt__ImagingOptions::soap_default(NULL); }
	virtual ~tt__ImagingOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions
#define SOAP_TYPE_tt__WideDynamicRangeOptions (496)
/* tt:WideDynamicRangeOptions */
class SOAP_CMAC tt__WideDynamicRangeOptions
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 496; } /* = unique id SOAP_TYPE_tt__WideDynamicRangeOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions() { tt__WideDynamicRangeOptions::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions
#define SOAP_TYPE_tt__BacklightCompensationOptions (497)
/* tt:BacklightCompensationOptions */
class SOAP_CMAC tt__BacklightCompensationOptions
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 497; } /* = unique id SOAP_TYPE_tt__BacklightCompensationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions() { tt__BacklightCompensationOptions::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions
#define SOAP_TYPE_tt__FocusOptions (498)
/* tt:FocusOptions */
class SOAP_CMAC tt__FocusOptions
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* required element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* required element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 498; } /* = unique id SOAP_TYPE_tt__FocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions() { tt__FocusOptions::soap_default(NULL); }
	virtual ~tt__FocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions
#define SOAP_TYPE_tt__ExposureOptions (499)
/* tt:ExposureOptions */
class SOAP_CMAC tt__ExposureOptions
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* required element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* required element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* required element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* required element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 499; } /* = unique id SOAP_TYPE_tt__ExposureOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions() { tt__ExposureOptions::soap_default(NULL); }
	virtual ~tt__ExposureOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions
#define SOAP_TYPE_tt__WhiteBalanceOptions (500)
/* tt:WhiteBalanceOptions */
class SOAP_CMAC tt__WhiteBalanceOptions
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* required element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 500; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions() { tt__WhiteBalanceOptions::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusMove
#define SOAP_TYPE_tt__FocusMove (501)
/* tt:FocusMove */
class SOAP_CMAC tt__FocusMove
{
public:
	class tt__AbsoluteFocus *Absolute;	/* optional element of type tt:AbsoluteFocus */
	class tt__RelativeFocus *Relative;	/* optional element of type tt:RelativeFocus */
	class tt__ContinuousFocus *Continuous;	/* optional element of type tt:ContinuousFocus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 501; } /* = unique id SOAP_TYPE_tt__FocusMove */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusMove() { tt__FocusMove::soap_default(NULL); }
	virtual ~tt__FocusMove() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocus
#define SOAP_TYPE_tt__AbsoluteFocus (502)
/* tt:AbsoluteFocus */
class SOAP_CMAC tt__AbsoluteFocus
{
public:
	float Position;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 502; } /* = unique id SOAP_TYPE_tt__AbsoluteFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocus() { tt__AbsoluteFocus::soap_default(NULL); }
	virtual ~tt__AbsoluteFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocus
#define SOAP_TYPE_tt__RelativeFocus (503)
/* tt:RelativeFocus */
class SOAP_CMAC tt__RelativeFocus
{
public:
	float Distance;	/* required element of type xsd:float */
	float *Speed;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 503; } /* = unique id SOAP_TYPE_tt__RelativeFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocus() { tt__RelativeFocus::soap_default(NULL); }
	virtual ~tt__RelativeFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocus
#define SOAP_TYPE_tt__ContinuousFocus (504)
/* tt:ContinuousFocus */
class SOAP_CMAC tt__ContinuousFocus
{
public:
	float Speed;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 504; } /* = unique id SOAP_TYPE_tt__ContinuousFocus */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocus() { tt__ContinuousFocus::soap_default(NULL); }
	virtual ~tt__ContinuousFocus() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions
#define SOAP_TYPE_tt__MoveOptions (505)
/* tt:MoveOptions */
class SOAP_CMAC tt__MoveOptions
{
public:
	class tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions *Relative;	/* optional element of type tt:RelativeFocusOptions */
	class tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 505; } /* = unique id SOAP_TYPE_tt__MoveOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions() { tt__MoveOptions::soap_default(NULL); }
	virtual ~tt__MoveOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__AbsoluteFocusOptions
#define SOAP_TYPE_tt__AbsoluteFocusOptions (506)
/* tt:AbsoluteFocusOptions */
class SOAP_CMAC tt__AbsoluteFocusOptions
{
public:
	tt__FloatRange *Position;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 506; } /* = unique id SOAP_TYPE_tt__AbsoluteFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AbsoluteFocusOptions() { tt__AbsoluteFocusOptions::soap_default(NULL); }
	virtual ~tt__AbsoluteFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions
#define SOAP_TYPE_tt__RelativeFocusOptions (507)
/* tt:RelativeFocusOptions */
class SOAP_CMAC tt__RelativeFocusOptions
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 507; } /* = unique id SOAP_TYPE_tt__RelativeFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions() { tt__RelativeFocusOptions::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ContinuousFocusOptions
#define SOAP_TYPE_tt__ContinuousFocusOptions (508)
/* tt:ContinuousFocusOptions */
class SOAP_CMAC tt__ContinuousFocusOptions
{
public:
	tt__FloatRange *Speed;	/* required element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 508; } /* = unique id SOAP_TYPE_tt__ContinuousFocusOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ContinuousFocusOptions() { tt__ContinuousFocusOptions::soap_default(NULL); }
	virtual ~tt__ContinuousFocusOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance
#define SOAP_TYPE_tt__WhiteBalance (509)
/* tt:WhiteBalance */
class SOAP_CMAC tt__WhiteBalance
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float CrGain;	/* required element of type xsd:float */
	float CbGain;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 509; } /* = unique id SOAP_TYPE_tt__WhiteBalance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance() { tt__WhiteBalance::soap_default(NULL); }
	virtual ~tt__WhiteBalance() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20
#define SOAP_TYPE_tt__ImagingStatus20 (510)
/* tt:ImagingStatus20 */
class SOAP_CMAC tt__ImagingStatus20
{
public:
	class tt__FocusStatus20 *FocusStatus20;	/* optional element of type tt:FocusStatus20 */
	class tt__ImagingStatus20Extension *Extension;	/* optional element of type tt:ImagingStatus20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 510; } /* = unique id SOAP_TYPE_tt__ImagingStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20() { tt__ImagingStatus20::soap_default(NULL); }
	virtual ~tt__ImagingStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingStatus20Extension
#define SOAP_TYPE_tt__ImagingStatus20Extension (511)
/* tt:ImagingStatus20Extension */
class SOAP_CMAC tt__ImagingStatus20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 511; } /* = unique id SOAP_TYPE_tt__ImagingStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingStatus20Extension() { tt__ImagingStatus20Extension::soap_default(NULL); }
	virtual ~tt__ImagingStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20
#define SOAP_TYPE_tt__FocusStatus20 (512)
/* tt:FocusStatus20 */
class SOAP_CMAC tt__FocusStatus20
{
public:
	float Position;	/* required element of type xsd:float */
	enum tt__MoveStatus MoveStatus;	/* required element of type tt:MoveStatus */
	std::string *Error;	/* optional element of type xsd:string */
	class tt__FocusStatus20Extension *Extension;	/* optional element of type tt:FocusStatus20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 512; } /* = unique id SOAP_TYPE_tt__FocusStatus20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20() { tt__FocusStatus20::soap_default(NULL); }
	virtual ~tt__FocusStatus20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusStatus20Extension
#define SOAP_TYPE_tt__FocusStatus20Extension (513)
/* tt:FocusStatus20Extension */
class SOAP_CMAC tt__FocusStatus20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 513; } /* = unique id SOAP_TYPE_tt__FocusStatus20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusStatus20Extension() { tt__FocusStatus20Extension::soap_default(NULL); }
	virtual ~tt__FocusStatus20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettings20
#define SOAP_TYPE_tt__ImagingSettings20 (514)
/* tt:ImagingSettings20 */
class SOAP_CMAC tt__ImagingSettings20
{
public:
	class tt__BacklightCompensation20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensation20 */
	float *Brightness;	/* optional element of type xsd:float */
	float *ColorSaturation;	/* optional element of type xsd:float */
	float *Contrast;	/* optional element of type xsd:float */
	class tt__Exposure20 *Exposure;	/* optional element of type tt:Exposure20 */
	class tt__FocusConfiguration20 *Focus;	/* optional element of type tt:FocusConfiguration20 */
	enum tt__IrCutFilterMode *IrCutFilter;	/* optional element of type tt:IrCutFilterMode */
	float *Sharpness;	/* optional element of type xsd:float */
	class tt__WideDynamicRange20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRange20 */
	class tt__WhiteBalance20 *WhiteBalance;	/* optional element of type tt:WhiteBalance20 */
	class tt__ImagingSettingsExtension20 *Extension;	/* optional element of type tt:ImagingSettingsExtension20 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 514; } /* = unique id SOAP_TYPE_tt__ImagingSettings20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettings20() { tt__ImagingSettings20::soap_default(NULL); }
	virtual ~tt__ImagingSettings20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension20
#define SOAP_TYPE_tt__ImagingSettingsExtension20 (515)
/* tt:ImagingSettingsExtension20 */
class SOAP_CMAC tt__ImagingSettingsExtension20
{
public:
	class tt__ImageStabilization *ImageStabilization;	/* optional element of type tt:ImageStabilization */
	class tt__ImagingSettingsExtension202 *Extension;	/* optional element of type tt:ImagingSettingsExtension202 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 515; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension20() { tt__ImagingSettingsExtension20::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingSettingsExtension202
#define SOAP_TYPE_tt__ImagingSettingsExtension202 (516)
/* tt:ImagingSettingsExtension202 */
class SOAP_CMAC tt__ImagingSettingsExtension202
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 516; } /* = unique id SOAP_TYPE_tt__ImagingSettingsExtension202 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingSettingsExtension202() { tt__ImagingSettingsExtension202::soap_default(NULL); }
	virtual ~tt__ImagingSettingsExtension202() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilization
#define SOAP_TYPE_tt__ImageStabilization (517)
/* tt:ImageStabilization */
class SOAP_CMAC tt__ImageStabilization
{
public:
	enum tt__ImageStabilizationMode Mode;	/* required element of type tt:ImageStabilizationMode */
	float *Level;	/* optional element of type xsd:float */
	class tt__ImageStabilizationExtension *Extension;	/* optional element of type tt:ImageStabilizationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 517; } /* = unique id SOAP_TYPE_tt__ImageStabilization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilization() { tt__ImageStabilization::soap_default(NULL); }
	virtual ~tt__ImageStabilization() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationExtension
#define SOAP_TYPE_tt__ImageStabilizationExtension (518)
/* tt:ImageStabilizationExtension */
class SOAP_CMAC tt__ImageStabilizationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 518; } /* = unique id SOAP_TYPE_tt__ImageStabilizationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationExtension() { tt__ImageStabilizationExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRange20
#define SOAP_TYPE_tt__WideDynamicRange20 (519)
/* tt:WideDynamicRange20 */
class SOAP_CMAC tt__WideDynamicRange20
{
public:
	enum tt__WideDynamicMode Mode;	/* required element of type tt:WideDynamicMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 519; } /* = unique id SOAP_TYPE_tt__WideDynamicRange20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRange20() { tt__WideDynamicRange20::soap_default(NULL); }
	virtual ~tt__WideDynamicRange20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensation20
#define SOAP_TYPE_tt__BacklightCompensation20 (520)
/* tt:BacklightCompensation20 */
class SOAP_CMAC tt__BacklightCompensation20
{
public:
	enum tt__BacklightCompensationMode Mode;	/* required element of type tt:BacklightCompensationMode */
	float *Level;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 520; } /* = unique id SOAP_TYPE_tt__BacklightCompensation20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensation20() { tt__BacklightCompensation20::soap_default(NULL); }
	virtual ~tt__BacklightCompensation20() { }
};
#endif

#ifndef SOAP_TYPE_tt__Exposure20
#define SOAP_TYPE_tt__Exposure20 (521)
/* tt:Exposure20 */
class SOAP_CMAC tt__Exposure20
{
public:
	enum tt__ExposureMode Mode;	/* required element of type tt:ExposureMode */
	enum tt__ExposurePriority *Priority;	/* optional element of type tt:ExposurePriority */
	tt__Rectangle *Window;	/* optional element of type tt:Rectangle */
	float *MinExposureTime;	/* optional element of type xsd:float */
	float *MaxExposureTime;	/* optional element of type xsd:float */
	float *MinGain;	/* optional element of type xsd:float */
	float *MaxGain;	/* optional element of type xsd:float */
	float *MinIris;	/* optional element of type xsd:float */
	float *MaxIris;	/* optional element of type xsd:float */
	float *ExposureTime;	/* optional element of type xsd:float */
	float *Gain;	/* optional element of type xsd:float */
	float *Iris;	/* optional element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 521; } /* = unique id SOAP_TYPE_tt__Exposure20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Exposure20() { tt__Exposure20::soap_default(NULL); }
	virtual ~tt__Exposure20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20
#define SOAP_TYPE_tt__ImagingOptions20 (522)
/* tt:ImagingOptions20 */
class SOAP_CMAC tt__ImagingOptions20
{
public:
	class tt__BacklightCompensationOptions20 *BacklightCompensation;	/* optional element of type tt:BacklightCompensationOptions20 */
	tt__FloatRange *Brightness;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ColorSaturation;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Contrast;	/* optional element of type tt:FloatRange */
	class tt__ExposureOptions20 *Exposure;	/* optional element of type tt:ExposureOptions20 */
	class tt__FocusOptions20 *Focus;	/* optional element of type tt:FocusOptions20 */
	std::vector<enum tt__IrCutFilterMode >IrCutFilterModes;	/* optional element of type tt:IrCutFilterMode */
	tt__FloatRange *Sharpness;	/* optional element of type tt:FloatRange */
	class tt__WideDynamicRangeOptions20 *WideDynamicRange;	/* optional element of type tt:WideDynamicRangeOptions20 */
	class tt__WhiteBalanceOptions20 *WhiteBalance;	/* optional element of type tt:WhiteBalanceOptions20 */
	class tt__ImagingOptions20Extension *Extension;	/* optional element of type tt:ImagingOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 522; } /* = unique id SOAP_TYPE_tt__ImagingOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20() { tt__ImagingOptions20::soap_default(NULL); }
	virtual ~tt__ImagingOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension
#define SOAP_TYPE_tt__ImagingOptions20Extension (523)
/* tt:ImagingOptions20Extension */
class SOAP_CMAC tt__ImagingOptions20Extension
{
public:
	class tt__ImageStabilizationOptions *ImageStabilization;	/* optional element of type tt:ImageStabilizationOptions */
	class tt__ImagingOptions20Extension2 *Extension;	/* optional element of type tt:ImagingOptions20Extension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 523; } /* = unique id SOAP_TYPE_tt__ImagingOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension() { tt__ImagingOptions20Extension::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImagingOptions20Extension2
#define SOAP_TYPE_tt__ImagingOptions20Extension2 (524)
/* tt:ImagingOptions20Extension2 */
class SOAP_CMAC tt__ImagingOptions20Extension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 524; } /* = unique id SOAP_TYPE_tt__ImagingOptions20Extension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImagingOptions20Extension2() { tt__ImagingOptions20Extension2::soap_default(NULL); }
	virtual ~tt__ImagingOptions20Extension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptions
#define SOAP_TYPE_tt__ImageStabilizationOptions (525)
/* tt:ImageStabilizationOptions */
class SOAP_CMAC tt__ImageStabilizationOptions
{
public:
	std::vector<enum tt__ImageStabilizationMode >Mode;	/* required element of type tt:ImageStabilizationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	class tt__ImageStabilizationOptionsExtension *Extension;	/* optional element of type tt:ImageStabilizationOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 525; } /* = unique id SOAP_TYPE_tt__ImageStabilizationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptions() { tt__ImageStabilizationOptions::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__ImageStabilizationOptionsExtension
#define SOAP_TYPE_tt__ImageStabilizationOptionsExtension (526)
/* tt:ImageStabilizationOptionsExtension */
class SOAP_CMAC tt__ImageStabilizationOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 526; } /* = unique id SOAP_TYPE_tt__ImageStabilizationOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ImageStabilizationOptionsExtension() { tt__ImageStabilizationOptionsExtension::soap_default(NULL); }
	virtual ~tt__ImageStabilizationOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WideDynamicRangeOptions20
#define SOAP_TYPE_tt__WideDynamicRangeOptions20 (527)
/* tt:WideDynamicRangeOptions20 */
class SOAP_CMAC tt__WideDynamicRangeOptions20
{
public:
	std::vector<enum tt__WideDynamicMode >Mode;	/* required element of type tt:WideDynamicMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 527; } /* = unique id SOAP_TYPE_tt__WideDynamicRangeOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WideDynamicRangeOptions20() { tt__WideDynamicRangeOptions20::soap_default(NULL); }
	virtual ~tt__WideDynamicRangeOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__BacklightCompensationOptions20
#define SOAP_TYPE_tt__BacklightCompensationOptions20 (528)
/* tt:BacklightCompensationOptions20 */
class SOAP_CMAC tt__BacklightCompensationOptions20
{
public:
	std::vector<enum tt__BacklightCompensationMode >Mode;	/* required element of type tt:BacklightCompensationMode */
	tt__FloatRange *Level;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 528; } /* = unique id SOAP_TYPE_tt__BacklightCompensationOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BacklightCompensationOptions20() { tt__BacklightCompensationOptions20::soap_default(NULL); }
	virtual ~tt__BacklightCompensationOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__ExposureOptions20
#define SOAP_TYPE_tt__ExposureOptions20 (529)
/* tt:ExposureOptions20 */
class SOAP_CMAC tt__ExposureOptions20
{
public:
	std::vector<enum tt__ExposureMode >Mode;	/* required element of type tt:ExposureMode */
	std::vector<enum tt__ExposurePriority >Priority;	/* optional element of type tt:ExposurePriority */
	tt__FloatRange *MinExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MinIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *MaxIris;	/* optional element of type tt:FloatRange */
	tt__FloatRange *ExposureTime;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Gain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *Iris;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 529; } /* = unique id SOAP_TYPE_tt__ExposureOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ExposureOptions20() { tt__ExposureOptions20::soap_default(NULL); }
	virtual ~tt__ExposureOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__MoveOptions20
#define SOAP_TYPE_tt__MoveOptions20 (530)
/* tt:MoveOptions20 */
class SOAP_CMAC tt__MoveOptions20
{
public:
	tt__AbsoluteFocusOptions *Absolute;	/* optional element of type tt:AbsoluteFocusOptions */
	class tt__RelativeFocusOptions20 *Relative;	/* optional element of type tt:RelativeFocusOptions20 */
	tt__ContinuousFocusOptions *Continuous;	/* optional element of type tt:ContinuousFocusOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 530; } /* = unique id SOAP_TYPE_tt__MoveOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MoveOptions20() { tt__MoveOptions20::soap_default(NULL); }
	virtual ~tt__MoveOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelativeFocusOptions20
#define SOAP_TYPE_tt__RelativeFocusOptions20 (531)
/* tt:RelativeFocusOptions20 */
class SOAP_CMAC tt__RelativeFocusOptions20
{
public:
	tt__FloatRange *Distance;	/* required element of type tt:FloatRange */
	tt__FloatRange *Speed;	/* optional element of type tt:FloatRange */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 531; } /* = unique id SOAP_TYPE_tt__RelativeFocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelativeFocusOptions20() { tt__RelativeFocusOptions20::soap_default(NULL); }
	virtual ~tt__RelativeFocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20
#define SOAP_TYPE_tt__WhiteBalance20 (532)
/* tt:WhiteBalance20 */
class SOAP_CMAC tt__WhiteBalance20
{
public:
	enum tt__WhiteBalanceMode Mode;	/* required element of type tt:WhiteBalanceMode */
	float *CrGain;	/* optional element of type xsd:float */
	float *CbGain;	/* optional element of type xsd:float */
	class tt__WhiteBalance20Extension *Extension;	/* optional element of type tt:WhiteBalance20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 532; } /* = unique id SOAP_TYPE_tt__WhiteBalance20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20() { tt__WhiteBalance20::soap_default(NULL); }
	virtual ~tt__WhiteBalance20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalance20Extension
#define SOAP_TYPE_tt__WhiteBalance20Extension (533)
/* tt:WhiteBalance20Extension */
class SOAP_CMAC tt__WhiteBalance20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 533; } /* = unique id SOAP_TYPE_tt__WhiteBalance20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalance20Extension() { tt__WhiteBalance20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalance20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20
#define SOAP_TYPE_tt__FocusConfiguration20 (534)
/* tt:FocusConfiguration20 */
class SOAP_CMAC tt__FocusConfiguration20
{
public:
	enum tt__AutoFocusMode AutoFocusMode;	/* required element of type tt:AutoFocusMode */
	float *DefaultSpeed;	/* optional element of type xsd:float */
	float *NearLimit;	/* optional element of type xsd:float */
	float *FarLimit;	/* optional element of type xsd:float */
	class tt__FocusConfiguration20Extension *Extension;	/* optional element of type tt:FocusConfiguration20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 534; } /* = unique id SOAP_TYPE_tt__FocusConfiguration20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20() { tt__FocusConfiguration20::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusConfiguration20Extension
#define SOAP_TYPE_tt__FocusConfiguration20Extension (535)
/* tt:FocusConfiguration20Extension */
class SOAP_CMAC tt__FocusConfiguration20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 535; } /* = unique id SOAP_TYPE_tt__FocusConfiguration20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusConfiguration20Extension() { tt__FocusConfiguration20Extension::soap_default(NULL); }
	virtual ~tt__FocusConfiguration20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20
#define SOAP_TYPE_tt__WhiteBalanceOptions20 (536)
/* tt:WhiteBalanceOptions20 */
class SOAP_CMAC tt__WhiteBalanceOptions20
{
public:
	std::vector<enum tt__WhiteBalanceMode >Mode;	/* required element of type tt:WhiteBalanceMode */
	tt__FloatRange *YrGain;	/* optional element of type tt:FloatRange */
	tt__FloatRange *YbGain;	/* optional element of type tt:FloatRange */
	class tt__WhiteBalanceOptions20Extension *Extension;	/* optional element of type tt:WhiteBalanceOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 536; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20() { tt__WhiteBalanceOptions20::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__WhiteBalanceOptions20Extension
#define SOAP_TYPE_tt__WhiteBalanceOptions20Extension (537)
/* tt:WhiteBalanceOptions20Extension */
class SOAP_CMAC tt__WhiteBalanceOptions20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 537; } /* = unique id SOAP_TYPE_tt__WhiteBalanceOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__WhiteBalanceOptions20Extension() { tt__WhiteBalanceOptions20Extension::soap_default(NULL); }
	virtual ~tt__WhiteBalanceOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20
#define SOAP_TYPE_tt__FocusOptions20 (538)
/* tt:FocusOptions20 */
class SOAP_CMAC tt__FocusOptions20
{
public:
	std::vector<enum tt__AutoFocusMode >AutoFocusModes;	/* optional element of type tt:AutoFocusMode */
	tt__FloatRange *DefaultSpeed;	/* optional element of type tt:FloatRange */
	tt__FloatRange *NearLimit;	/* optional element of type tt:FloatRange */
	tt__FloatRange *FarLimit;	/* optional element of type tt:FloatRange */
	class tt__FocusOptions20Extension *Extension;	/* optional element of type tt:FocusOptions20Extension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 538; } /* = unique id SOAP_TYPE_tt__FocusOptions20 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20() { tt__FocusOptions20::soap_default(NULL); }
	virtual ~tt__FocusOptions20() { }
};
#endif

#ifndef SOAP_TYPE_tt__FocusOptions20Extension
#define SOAP_TYPE_tt__FocusOptions20Extension (539)
/* tt:FocusOptions20Extension */
class SOAP_CMAC tt__FocusOptions20Extension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 539; } /* = unique id SOAP_TYPE_tt__FocusOptions20Extension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FocusOptions20Extension() { tt__FocusOptions20Extension::soap_default(NULL); }
	virtual ~tt__FocusOptions20Extension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageExtension
#define SOAP_TYPE_tt__MessageExtension (540)
/* tt:MessageExtension */
class SOAP_CMAC tt__MessageExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 540; } /* = unique id SOAP_TYPE_tt__MessageExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageExtension() { tt__MessageExtension::soap_default(NULL); }
	virtual ~tt__MessageExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_SimpleItem
#define SOAP_TYPE__tt__ItemList_SimpleItem (1532)
/* tt:ItemList-SimpleItem */
class SOAP_CMAC _tt__ItemList_SimpleItem
{
public:
	std::string Name;	/* required attribute */
	std::string Value;	/* required attribute */
public:
	virtual int soap_type() const { return 1532; } /* = unique id SOAP_TYPE__tt__ItemList_SimpleItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_SimpleItem() { _tt__ItemList_SimpleItem::soap_default(NULL); }
	virtual ~_tt__ItemList_SimpleItem() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemList_ElementItem
#define SOAP_TYPE__tt__ItemList_ElementItem (1535)
/* tt:ItemList-ElementItem */
class SOAP_CMAC _tt__ItemList_ElementItem
{
public:
	std::string Name;	/* required attribute */
	class tt__CellLayout *Layout;	/* optional element of type tt:CellLayout */
public:
	virtual int soap_type() const { return 1535; } /* = unique id SOAP_TYPE__tt__ItemList_ElementItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemList_ElementItem() { _tt__ItemList_ElementItem::soap_default(NULL); }
	virtual ~_tt__ItemList_ElementItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemList
#define SOAP_TYPE_tt__ItemList (541)
/* tt:ItemList */
class SOAP_CMAC tt__ItemList
{
public:
	std::vector<_tt__ItemList_SimpleItem >*SimpleItem;	/* optional element of type tt:ItemList-SimpleItem */
	std::vector<_tt__ItemList_ElementItem >*ElementItem;	/* optional element of type tt:ItemList-ElementItem */
	class tt__ItemListExtension *Extension;	/* optional element of type tt:ItemListExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 541; } /* = unique id SOAP_TYPE_tt__ItemList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemList() { tt__ItemList::soap_default(NULL); }
	virtual ~tt__ItemList() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListExtension
#define SOAP_TYPE_tt__ItemListExtension (542)
/* tt:ItemListExtension */
class SOAP_CMAC tt__ItemListExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 542; } /* = unique id SOAP_TYPE_tt__ItemListExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListExtension() { tt__ItemListExtension::soap_default(NULL); }
	virtual ~tt__ItemListExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescription
#define SOAP_TYPE_tt__MessageDescription (543)
/* tt:MessageDescription */
class SOAP_CMAC tt__MessageDescription
{
public:
	class tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	class tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 543; } /* = unique id SOAP_TYPE_tt__MessageDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescription() { tt__MessageDescription::soap_default(NULL); }
	virtual ~tt__MessageDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__MessageDescriptionExtension
#define SOAP_TYPE_tt__MessageDescriptionExtension (544)
/* tt:MessageDescriptionExtension */
class SOAP_CMAC tt__MessageDescriptionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 544; } /* = unique id SOAP_TYPE_tt__MessageDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MessageDescriptionExtension() { tt__MessageDescriptionExtension::soap_default(NULL); }
	virtual ~tt__MessageDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription
#define SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription (1542)
/* tt:ItemListDescription-SimpleItemDescription */
class SOAP_CMAC _tt__ItemListDescription_SimpleItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1542; } /* = unique id SOAP_TYPE__tt__ItemListDescription_SimpleItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_SimpleItemDescription() { _tt__ItemListDescription_SimpleItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_SimpleItemDescription() { }
};
#endif

#ifndef SOAP_TYPE__tt__ItemListDescription_ElementItemDescription
#define SOAP_TYPE__tt__ItemListDescription_ElementItemDescription (1545)
/* tt:ItemListDescription-ElementItemDescription */
class SOAP_CMAC _tt__ItemListDescription_ElementItemDescription
{
public:
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
public:
	virtual int soap_type() const { return 1545; } /* = unique id SOAP_TYPE__tt__ItemListDescription_ElementItemDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ItemListDescription_ElementItemDescription() { _tt__ItemListDescription_ElementItemDescription::soap_default(NULL); }
	virtual ~_tt__ItemListDescription_ElementItemDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescription
#define SOAP_TYPE_tt__ItemListDescription (545)
/* tt:ItemListDescription */
class SOAP_CMAC tt__ItemListDescription
{
public:
	std::vector<_tt__ItemListDescription_SimpleItemDescription >*SimpleItemDescription;	/* optional element of type tt:ItemListDescription-SimpleItemDescription */
	std::vector<_tt__ItemListDescription_ElementItemDescription >*ElementItemDescription;	/* optional element of type tt:ItemListDescription-ElementItemDescription */
	class tt__ItemListDescriptionExtension *Extension;	/* optional element of type tt:ItemListDescriptionExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 545; } /* = unique id SOAP_TYPE_tt__ItemListDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescription() { tt__ItemListDescription::soap_default(NULL); }
	virtual ~tt__ItemListDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ItemListDescriptionExtension
#define SOAP_TYPE_tt__ItemListDescriptionExtension (546)
/* tt:ItemListDescriptionExtension */
class SOAP_CMAC tt__ItemListDescriptionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 546; } /* = unique id SOAP_TYPE_tt__ItemListDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ItemListDescriptionExtension() { tt__ItemListDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ItemListDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Vector
#define SOAP_TYPE_tt__Vector (547)
/* tt:Vector */
class SOAP_CMAC tt__Vector
{
public:
	float *x;	/* optional attribute */
	float *y;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 547; } /* = unique id SOAP_TYPE_tt__Vector */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Vector() { tt__Vector::soap_default(NULL); }
	virtual ~tt__Vector() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rectangle
#define SOAP_TYPE_tt__Rectangle (548)
/* tt:Rectangle */
class SOAP_CMAC tt__Rectangle
{
public:
	float *bottom;	/* optional attribute */
	float *top;	/* optional attribute */
	float *right;	/* optional attribute */
	float *left;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 548; } /* = unique id SOAP_TYPE_tt__Rectangle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rectangle() { tt__Rectangle::soap_default(NULL); }
	virtual ~tt__Rectangle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polygon
#define SOAP_TYPE_tt__Polygon (549)
/* tt:Polygon */
class SOAP_CMAC tt__Polygon
{
public:
	std::vector<tt__Vector * >Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 549; } /* = unique id SOAP_TYPE_tt__Polygon */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polygon() { tt__Polygon::soap_default(NULL); }
	virtual ~tt__Polygon() { }
};
#endif

#ifndef SOAP_TYPE_tt__Polyline
#define SOAP_TYPE_tt__Polyline (550)
/* tt:Polyline */
class SOAP_CMAC tt__Polyline
{
public:
	std::vector<tt__Vector * >Point;	/* required element of type tt:Vector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 550; } /* = unique id SOAP_TYPE_tt__Polyline */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Polyline() { tt__Polyline::soap_default(NULL); }
	virtual ~tt__Polyline() { }
};
#endif

#ifndef SOAP_TYPE_tt__Color
#define SOAP_TYPE_tt__Color (551)
/* tt:Color */
class SOAP_CMAC tt__Color
{
public:
	float X;	/* required attribute */
	float Y;	/* required attribute */
	float Z;	/* required attribute */
	std::string *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 551; } /* = unique id SOAP_TYPE_tt__Color */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Color() { tt__Color::soap_default(NULL); }
	virtual ~tt__Color() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorCovariance
#define SOAP_TYPE_tt__ColorCovariance (552)
/* tt:ColorCovariance */
class SOAP_CMAC tt__ColorCovariance
{
public:
	float XX;	/* required attribute */
	float YY;	/* required attribute */
	float ZZ;	/* required attribute */
	float *XY;	/* optional attribute */
	float *XZ;	/* optional attribute */
	float *YZ;	/* optional attribute */
	std::string *Colorspace;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 552; } /* = unique id SOAP_TYPE_tt__ColorCovariance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorCovariance() { tt__ColorCovariance::soap_default(NULL); }
	virtual ~tt__ColorCovariance() { }
};
#endif

#ifndef SOAP_TYPE_tt__Appearance
#define SOAP_TYPE_tt__Appearance (553)
/* tt:Appearance */
class SOAP_CMAC tt__Appearance
{
public:
	class tt__Transformation *Transformation;	/* optional element of type tt:Transformation */
	class tt__ShapeDescriptor *Shape;	/* optional element of type tt:ShapeDescriptor */
	class tt__ColorDescriptor *Color;	/* optional element of type tt:ColorDescriptor */
	class tt__ClassDescriptor *Class;	/* optional element of type tt:ClassDescriptor */
	class tt__AppearanceExtension *Extension;	/* optional element of type tt:AppearanceExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 553; } /* = unique id SOAP_TYPE_tt__Appearance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Appearance() { tt__Appearance::soap_default(NULL); }
	virtual ~tt__Appearance() { }
};
#endif

#ifndef SOAP_TYPE_tt__AppearanceExtension
#define SOAP_TYPE_tt__AppearanceExtension (554)
/* tt:AppearanceExtension */
class SOAP_CMAC tt__AppearanceExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 554; } /* = unique id SOAP_TYPE_tt__AppearanceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AppearanceExtension() { tt__AppearanceExtension::soap_default(NULL); }
	virtual ~tt__AppearanceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptor
#define SOAP_TYPE_tt__ShapeDescriptor (555)
/* tt:ShapeDescriptor */
class SOAP_CMAC tt__ShapeDescriptor
{
public:
	tt__Rectangle *BoundingBox;	/* required element of type tt:Rectangle */
	tt__Vector *CenterOfGravity;	/* required element of type tt:Vector */
	std::vector<tt__Polygon * >Polygon;	/* optional element of type tt:Polygon */
	class tt__ShapeDescriptorExtension *Extension;	/* optional element of type tt:ShapeDescriptorExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 555; } /* = unique id SOAP_TYPE_tt__ShapeDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ShapeDescriptor() { tt__ShapeDescriptor::soap_default(NULL); }
	virtual ~tt__ShapeDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ShapeDescriptorExtension
#define SOAP_TYPE_tt__ShapeDescriptorExtension (556)
/* tt:ShapeDescriptorExtension */
class SOAP_CMAC tt__ShapeDescriptorExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 556; } /* = unique id SOAP_TYPE_tt__ShapeDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ShapeDescriptorExtension() { tt__ShapeDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ShapeDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ColorDescriptor_ColorCluster
#define SOAP_TYPE__tt__ColorDescriptor_ColorCluster (1559)
/* tt:ColorDescriptor-ColorCluster */
class SOAP_CMAC _tt__ColorDescriptor_ColorCluster
{
public:
	tt__Color *Color;	/* required element of type tt:Color */
	float *Weight;	/* optional element of type xsd:float */
	tt__ColorCovariance *Covariance;	/* optional element of type tt:ColorCovariance */
public:
	virtual int soap_type() const { return 1559; } /* = unique id SOAP_TYPE__tt__ColorDescriptor_ColorCluster */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ColorDescriptor_ColorCluster() { _tt__ColorDescriptor_ColorCluster::soap_default(NULL); }
	virtual ~_tt__ColorDescriptor_ColorCluster() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptor
#define SOAP_TYPE_tt__ColorDescriptor (557)
/* tt:ColorDescriptor */
class SOAP_CMAC tt__ColorDescriptor
{
public:
	std::vector<_tt__ColorDescriptor_ColorCluster >*ColorCluster;	/* optional element of type tt:ColorDescriptor-ColorCluster */
	class tt__ColorDescriptorExtension *Extension;	/* optional element of type tt:ColorDescriptorExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 557; } /* = unique id SOAP_TYPE_tt__ColorDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorDescriptor() { tt__ColorDescriptor::soap_default(NULL); }
	virtual ~tt__ColorDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ColorDescriptorExtension
#define SOAP_TYPE_tt__ColorDescriptorExtension (558)
/* tt:ColorDescriptorExtension */
class SOAP_CMAC tt__ColorDescriptorExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 558; } /* = unique id SOAP_TYPE_tt__ColorDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ColorDescriptorExtension() { tt__ColorDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ColorDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__ClassDescriptor_ClassCandidate
#define SOAP_TYPE__tt__ClassDescriptor_ClassCandidate (1565)
/* tt:ClassDescriptor-ClassCandidate */
class SOAP_CMAC _tt__ClassDescriptor_ClassCandidate
{
public:
	enum tt__ClassType Type;	/* required element of type tt:ClassType */
	float Likelihood;	/* required element of type xsd:float */
public:
	virtual int soap_type() const { return 1565; } /* = unique id SOAP_TYPE__tt__ClassDescriptor_ClassCandidate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ClassDescriptor_ClassCandidate() { _tt__ClassDescriptor_ClassCandidate::soap_default(NULL); }
	virtual ~_tt__ClassDescriptor_ClassCandidate() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptor
#define SOAP_TYPE_tt__ClassDescriptor (559)
/* tt:ClassDescriptor */
class SOAP_CMAC tt__ClassDescriptor
{
public:
	std::vector<_tt__ClassDescriptor_ClassCandidate >*ClassCandidate;	/* optional element of type tt:ClassDescriptor-ClassCandidate */
	class tt__ClassDescriptorExtension *Extension;	/* optional element of type tt:ClassDescriptorExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 559; } /* = unique id SOAP_TYPE_tt__ClassDescriptor */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptor() { tt__ClassDescriptor::soap_default(NULL); }
	virtual ~tt__ClassDescriptor() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension
#define SOAP_TYPE_tt__ClassDescriptorExtension (560)
/* tt:ClassDescriptorExtension */
class SOAP_CMAC tt__ClassDescriptorExtension
{
public:
	std::vector<class tt__OtherType * >OtherTypes;	/* required element of type tt:OtherType */
	class tt__ClassDescriptorExtension2 *Extension;	/* optional element of type tt:ClassDescriptorExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 560; } /* = unique id SOAP_TYPE_tt__ClassDescriptorExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptorExtension() { tt__ClassDescriptorExtension::soap_default(NULL); }
	virtual ~tt__ClassDescriptorExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ClassDescriptorExtension2
#define SOAP_TYPE_tt__ClassDescriptorExtension2 (561)
/* tt:ClassDescriptorExtension2 */
class SOAP_CMAC tt__ClassDescriptorExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 561; } /* = unique id SOAP_TYPE_tt__ClassDescriptorExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ClassDescriptorExtension2() { tt__ClassDescriptorExtension2::soap_default(NULL); }
	virtual ~tt__ClassDescriptorExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__OtherType
#define SOAP_TYPE_tt__OtherType (562)
/* tt:OtherType */
class SOAP_CMAC tt__OtherType
{
public:
	std::string Type;	/* required element of type xsd:string */
	float Likelihood;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 562; } /* = unique id SOAP_TYPE_tt__OtherType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__OtherType() { tt__OtherType::soap_default(NULL); }
	virtual ~tt__OtherType() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectExtension
#define SOAP_TYPE_tt__ObjectExtension (564)
/* tt:ObjectExtension */
class SOAP_CMAC tt__ObjectExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 564; } /* = unique id SOAP_TYPE_tt__ObjectExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectExtension() { tt__ObjectExtension::soap_default(NULL); }
	virtual ~tt__ObjectExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Transformation
#define SOAP_TYPE_tt__Transformation (565)
/* tt:Transformation */
class SOAP_CMAC tt__Transformation
{
public:
	tt__Vector *Translate;	/* optional element of type tt:Vector */
	tt__Vector *Scale;	/* optional element of type tt:Vector */
	class tt__TransformationExtension *Extension;	/* optional element of type tt:TransformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 565; } /* = unique id SOAP_TYPE_tt__Transformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Transformation() { tt__Transformation::soap_default(NULL); }
	virtual ~tt__Transformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TransformationExtension
#define SOAP_TYPE_tt__TransformationExtension (566)
/* tt:TransformationExtension */
class SOAP_CMAC tt__TransformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 566; } /* = unique id SOAP_TYPE_tt__TransformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TransformationExtension() { tt__TransformationExtension::soap_default(NULL); }
	virtual ~tt__TransformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Frame
#define SOAP_TYPE_tt__Frame (567)
/* tt:Frame */
class SOAP_CMAC tt__Frame
{
public:
	tt__PTZStatus *PTZStatus;	/* optional element of type tt:PTZStatus */
	tt__Transformation *Transformation;	/* optional element of type tt:Transformation */
	std::vector<class tt__Object * >Object;	/* optional element of type tt:Object */
	class tt__ObjectTree *ObjectTree;	/* optional element of type tt:ObjectTree */
	class tt__FrameExtension *Extension;	/* optional element of type tt:FrameExtension */
	time_t UtcTime;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 567; } /* = unique id SOAP_TYPE_tt__Frame */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Frame() { tt__Frame::soap_default(NULL); }
	virtual ~tt__Frame() { }
};
#endif

#ifndef SOAP_TYPE_tt__FrameExtension
#define SOAP_TYPE_tt__FrameExtension (568)
/* tt:FrameExtension */
class SOAP_CMAC tt__FrameExtension
{
public:
	class tt__MotionInCells *MotionInCells;	/* optional element of type tt:MotionInCells */
	class tt__FrameExtension2 *Extension;	/* optional element of type tt:FrameExtension2 */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 568; } /* = unique id SOAP_TYPE_tt__FrameExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FrameExtension() { tt__FrameExtension::soap_default(NULL); }
	virtual ~tt__FrameExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__FrameExtension2
#define SOAP_TYPE_tt__FrameExtension2 (569)
/* tt:FrameExtension2 */
class SOAP_CMAC tt__FrameExtension2
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 569; } /* = unique id SOAP_TYPE_tt__FrameExtension2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FrameExtension2() { tt__FrameExtension2::soap_default(NULL); }
	virtual ~tt__FrameExtension2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Merge
#define SOAP_TYPE_tt__Merge (570)
/* tt:Merge */
class SOAP_CMAC tt__Merge
{
public:
	std::vector<class tt__ObjectId * >from;	/* required element of type tt:ObjectId */
	tt__ObjectId *to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 570; } /* = unique id SOAP_TYPE_tt__Merge */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Merge() { tt__Merge::soap_default(NULL); }
	virtual ~tt__Merge() { }
};
#endif

#ifndef SOAP_TYPE_tt__Split
#define SOAP_TYPE_tt__Split (571)
/* tt:Split */
class SOAP_CMAC tt__Split
{
public:
	tt__ObjectId *from;	/* required element of type tt:ObjectId */
	std::vector<tt__ObjectId * >to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 571; } /* = unique id SOAP_TYPE_tt__Split */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Split() { tt__Split::soap_default(NULL); }
	virtual ~tt__Split() { }
};
#endif

#ifndef SOAP_TYPE_tt__Rename
#define SOAP_TYPE_tt__Rename (572)
/* tt:Rename */
class SOAP_CMAC tt__Rename
{
public:
	tt__ObjectId *from;	/* required element of type tt:ObjectId */
	tt__ObjectId *to;	/* required element of type tt:ObjectId */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 572; } /* = unique id SOAP_TYPE_tt__Rename */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Rename() { tt__Rename::soap_default(NULL); }
	virtual ~tt__Rename() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectId
#define SOAP_TYPE_tt__ObjectId (573)
/* tt:ObjectId */
class SOAP_CMAC tt__ObjectId
{
public:
	std::string *ObjectId;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 573; } /* = unique id SOAP_TYPE_tt__ObjectId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectId() { tt__ObjectId::soap_default(NULL); }
	virtual ~tt__ObjectId() { }
};
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Removed
#define SOAP_TYPE__tt__Behaviour_Removed (1583)
/* tt:Behaviour-Removed */
class SOAP_CMAC _tt__Behaviour_Removed
{
public:
	virtual int soap_type() const { return 1583; } /* = unique id SOAP_TYPE__tt__Behaviour_Removed */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Behaviour_Removed() { _tt__Behaviour_Removed::soap_default(NULL); }
	virtual ~_tt__Behaviour_Removed() { }
};
#endif

#ifndef SOAP_TYPE__tt__Behaviour_Idle
#define SOAP_TYPE__tt__Behaviour_Idle (1585)
/* tt:Behaviour-Idle */
class SOAP_CMAC _tt__Behaviour_Idle
{
public:
	virtual int soap_type() const { return 1585; } /* = unique id SOAP_TYPE__tt__Behaviour_Idle */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Behaviour_Idle() { _tt__Behaviour_Idle::soap_default(NULL); }
	virtual ~_tt__Behaviour_Idle() { }
};
#endif

#ifndef SOAP_TYPE_tt__Behaviour
#define SOAP_TYPE_tt__Behaviour (574)
/* tt:Behaviour */
class SOAP_CMAC tt__Behaviour
{
public:
	_tt__Behaviour_Removed *Removed;	/* optional element of type tt:Behaviour-Removed */
	_tt__Behaviour_Idle *Idle;	/* optional element of type tt:Behaviour-Idle */
	class tt__BehaviourExtension *Extension;	/* optional element of type tt:BehaviourExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 574; } /* = unique id SOAP_TYPE_tt__Behaviour */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Behaviour() { tt__Behaviour::soap_default(NULL); }
	virtual ~tt__Behaviour() { }
};
#endif

#ifndef SOAP_TYPE_tt__BehaviourExtension
#define SOAP_TYPE_tt__BehaviourExtension (575)
/* tt:BehaviourExtension */
class SOAP_CMAC tt__BehaviourExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 575; } /* = unique id SOAP_TYPE_tt__BehaviourExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__BehaviourExtension() { tt__BehaviourExtension::soap_default(NULL); }
	virtual ~tt__BehaviourExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectTree
#define SOAP_TYPE_tt__ObjectTree (576)
/* tt:ObjectTree */
class SOAP_CMAC tt__ObjectTree
{
public:
	std::vector<tt__Rename * >Rename;	/* optional element of type tt:Rename */
	std::vector<tt__Split * >Split;	/* optional element of type tt:Split */
	std::vector<tt__Merge * >Merge;	/* optional element of type tt:Merge */
	std::vector<tt__ObjectId * >Delete;	/* optional element of type tt:ObjectId */
	class tt__ObjectTreeExtension *Extension;	/* optional element of type tt:ObjectTreeExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 576; } /* = unique id SOAP_TYPE_tt__ObjectTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectTree() { tt__ObjectTree::soap_default(NULL); }
	virtual ~tt__ObjectTree() { }
};
#endif

#ifndef SOAP_TYPE_tt__ObjectTreeExtension
#define SOAP_TYPE_tt__ObjectTreeExtension (577)
/* tt:ObjectTreeExtension */
class SOAP_CMAC tt__ObjectTreeExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 577; } /* = unique id SOAP_TYPE_tt__ObjectTreeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ObjectTreeExtension() { tt__ObjectTreeExtension::soap_default(NULL); }
	virtual ~tt__ObjectTreeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionInCells
#define SOAP_TYPE_tt__MotionInCells (578)
/* tt:MotionInCells */
class SOAP_CMAC tt__MotionInCells
{
public:
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	xsd__base64Binary Cells;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 578; } /* = unique id SOAP_TYPE_tt__MotionInCells */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionInCells() { tt__MotionInCells::soap_default(NULL); }
	virtual ~tt__MotionInCells() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsEngineConfiguration (579)
/* tt:AnalyticsEngineConfiguration */
class SOAP_CMAC tt__AnalyticsEngineConfiguration
{
public:
	std::vector<class tt__Config * >AnalyticsModule;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsEngineConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 579; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfiguration() { tt__AnalyticsEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension (580)
/* tt:AnalyticsEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsEngineConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 580; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineConfigurationExtension() { tt__AnalyticsEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfiguration
#define SOAP_TYPE_tt__RuleEngineConfiguration (581)
/* tt:RuleEngineConfiguration */
class SOAP_CMAC tt__RuleEngineConfiguration
{
public:
	std::vector<tt__Config * >Rule;	/* optional element of type tt:Config */
	class tt__RuleEngineConfigurationExtension *Extension;	/* optional element of type tt:RuleEngineConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 581; } /* = unique id SOAP_TYPE_tt__RuleEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfiguration() { tt__RuleEngineConfiguration::soap_default(NULL); }
	virtual ~tt__RuleEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RuleEngineConfigurationExtension
#define SOAP_TYPE_tt__RuleEngineConfigurationExtension (582)
/* tt:RuleEngineConfigurationExtension */
class SOAP_CMAC tt__RuleEngineConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 582; } /* = unique id SOAP_TYPE_tt__RuleEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RuleEngineConfigurationExtension() { tt__RuleEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RuleEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Config
#define SOAP_TYPE_tt__Config (583)
/* tt:Config */
class SOAP_CMAC tt__Config
{
public:
	tt__ItemList *Parameters;	/* required element of type tt:ItemList */
	std::string Name;	/* required attribute */
	std::string Type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 583; } /* = unique id SOAP_TYPE_tt__Config */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Config() { tt__Config::soap_default(NULL); }
	virtual ~tt__Config() { }
};
#endif

#ifndef SOAP_TYPE__tt__ConfigDescription_Messages
#define SOAP_TYPE__tt__ConfigDescription_Messages (1600)
/* tt:ConfigDescription-Messages */
class SOAP_CMAC _tt__ConfigDescription_Messages
{
public:
	tt__ItemListDescription *Source;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Key;	/* optional element of type tt:ItemListDescription */
	tt__ItemListDescription *Data;	/* optional element of type tt:ItemListDescription */
	tt__MessageDescriptionExtension *Extension;	/* optional element of type tt:MessageDescriptionExtension */
	bool *IsProperty;	/* optional attribute */
	std::string ParentTopic;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 1600; } /* = unique id SOAP_TYPE__tt__ConfigDescription_Messages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__ConfigDescription_Messages() { _tt__ConfigDescription_Messages::soap_default(NULL); }
	virtual ~_tt__ConfigDescription_Messages() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescription
#define SOAP_TYPE_tt__ConfigDescription (584)
/* tt:ConfigDescription */
class SOAP_CMAC tt__ConfigDescription
{
public:
	tt__ItemListDescription *Parameters;	/* required element of type tt:ItemListDescription */
	std::vector<_tt__ConfigDescription_Messages >*Messages;	/* optional element of type tt:ConfigDescription-Messages */
	class tt__ConfigDescriptionExtension *Extension;	/* optional element of type tt:ConfigDescriptionExtension */
	std::string Name;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 584; } /* = unique id SOAP_TYPE_tt__ConfigDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescription() { tt__ConfigDescription::soap_default(NULL); }
	virtual ~tt__ConfigDescription() { }
};
#endif

#ifndef SOAP_TYPE_tt__ConfigDescriptionExtension
#define SOAP_TYPE_tt__ConfigDescriptionExtension (585)
/* tt:ConfigDescriptionExtension */
class SOAP_CMAC tt__ConfigDescriptionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 585; } /* = unique id SOAP_TYPE_tt__ConfigDescriptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ConfigDescriptionExtension() { tt__ConfigDescriptionExtension::soap_default(NULL); }
	virtual ~tt__ConfigDescriptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRules
#define SOAP_TYPE_tt__SupportedRules (586)
/* tt:SupportedRules */
class SOAP_CMAC tt__SupportedRules
{
public:
	std::vector<std::string >RuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >RuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedRulesExtension *Extension;	/* optional element of type tt:SupportedRulesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 586; } /* = unique id SOAP_TYPE_tt__SupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRules() { tt__SupportedRules::soap_default(NULL); }
	virtual ~tt__SupportedRules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedRulesExtension
#define SOAP_TYPE_tt__SupportedRulesExtension (587)
/* tt:SupportedRulesExtension */
class SOAP_CMAC tt__SupportedRulesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 587; } /* = unique id SOAP_TYPE_tt__SupportedRulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedRulesExtension() { tt__SupportedRulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedRulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModules
#define SOAP_TYPE_tt__SupportedAnalyticsModules (588)
/* tt:SupportedAnalyticsModules */
class SOAP_CMAC tt__SupportedAnalyticsModules
{
public:
	std::vector<std::string >AnalyticsModuleContentSchemaLocation;	/* optional element of type xsd:anyURI */
	std::vector<tt__ConfigDescription * >AnalyticsModuleDescription;	/* optional element of type tt:ConfigDescription */
	class tt__SupportedAnalyticsModulesExtension *Extension;	/* optional element of type tt:SupportedAnalyticsModulesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 588; } /* = unique id SOAP_TYPE_tt__SupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModules() { tt__SupportedAnalyticsModules::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE_tt__SupportedAnalyticsModulesExtension
#define SOAP_TYPE_tt__SupportedAnalyticsModulesExtension (589)
/* tt:SupportedAnalyticsModulesExtension */
class SOAP_CMAC tt__SupportedAnalyticsModulesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 589; } /* = unique id SOAP_TYPE_tt__SupportedAnalyticsModulesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SupportedAnalyticsModulesExtension() { tt__SupportedAnalyticsModulesExtension::soap_default(NULL); }
	virtual ~tt__SupportedAnalyticsModulesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolygonConfiguration
#define SOAP_TYPE_tt__PolygonConfiguration (590)
/* tt:PolygonConfiguration */
class SOAP_CMAC tt__PolygonConfiguration
{
public:
	tt__Polygon *Polygon;	/* required element of type tt:Polygon */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 590; } /* = unique id SOAP_TYPE_tt__PolygonConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolygonConfiguration() { tt__PolygonConfiguration::soap_default(NULL); }
	virtual ~tt__PolygonConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArray
#define SOAP_TYPE_tt__PolylineArray (591)
/* tt:PolylineArray */
class SOAP_CMAC tt__PolylineArray
{
public:
	std::vector<tt__Polyline * >Segment;	/* required element of type tt:Polyline */
	class tt__PolylineArrayExtension *Extension;	/* optional element of type tt:PolylineArrayExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 591; } /* = unique id SOAP_TYPE_tt__PolylineArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArray() { tt__PolylineArray::soap_default(NULL); }
	virtual ~tt__PolylineArray() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayExtension
#define SOAP_TYPE_tt__PolylineArrayExtension (592)
/* tt:PolylineArrayExtension */
class SOAP_CMAC tt__PolylineArrayExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 592; } /* = unique id SOAP_TYPE_tt__PolylineArrayExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayExtension() { tt__PolylineArrayExtension::soap_default(NULL); }
	virtual ~tt__PolylineArrayExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PolylineArrayConfiguration
#define SOAP_TYPE_tt__PolylineArrayConfiguration (593)
/* tt:PolylineArrayConfiguration */
class SOAP_CMAC tt__PolylineArrayConfiguration
{
public:
	tt__PolylineArray *PolylineArray;	/* required element of type tt:PolylineArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 593; } /* = unique id SOAP_TYPE_tt__PolylineArrayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PolylineArrayConfiguration() { tt__PolylineArrayConfiguration::soap_default(NULL); }
	virtual ~tt__PolylineArrayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpression
#define SOAP_TYPE_tt__MotionExpression (594)
/* tt:MotionExpression */
class SOAP_CMAC tt__MotionExpression
{
public:
	std::string Expression;	/* required element of type xsd:string */
	std::string *Type;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 594; } /* = unique id SOAP_TYPE_tt__MotionExpression */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpression() { tt__MotionExpression::soap_default(NULL); }
	virtual ~tt__MotionExpression() { }
};
#endif

#ifndef SOAP_TYPE_tt__MotionExpressionConfiguration
#define SOAP_TYPE_tt__MotionExpressionConfiguration (595)
/* tt:MotionExpressionConfiguration */
class SOAP_CMAC tt__MotionExpressionConfiguration
{
public:
	tt__MotionExpression *MotionExpression;	/* required element of type tt:MotionExpression */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 595; } /* = unique id SOAP_TYPE_tt__MotionExpressionConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MotionExpressionConfiguration() { tt__MotionExpressionConfiguration::soap_default(NULL); }
	virtual ~tt__MotionExpressionConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__CellLayout
#define SOAP_TYPE_tt__CellLayout (596)
/* tt:CellLayout */
class SOAP_CMAC tt__CellLayout
{
public:
	tt__Transformation *Transformation;	/* required element of type tt:Transformation */
	std::string Columns;	/* required attribute */
	std::string Rows;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 596; } /* = unique id SOAP_TYPE_tt__CellLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CellLayout() { tt__CellLayout::soap_default(NULL); }
	virtual ~tt__CellLayout() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_MetadataStream
#define SOAP_TYPE__tt__union_MetadataStream (1618)
/* xsd:choice */
union _tt__union_MetadataStream
{
#define SOAP_UNION__tt__union_MetadataStream_VideoAnalytics	(1)
	class tt__VideoAnalyticsStream *VideoAnalytics;
#define SOAP_UNION__tt__union_MetadataStream_PTZ	(2)
	class tt__PTZStream *PTZ;
#define SOAP_UNION__tt__union_MetadataStream_Event	(3)
	class tt__EventStream *Event;
#define SOAP_UNION__tt__union_MetadataStream_Extension	(4)
	class tt__MetadataStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_MetadataStream
#define SOAP_TYPE___tt__union_MetadataStream (1613)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_MetadataStream
{
public:
	int __union_MetadataStream;	/* union discriminant (of union defined below) */
	union _tt__union_MetadataStream union_MetadataStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1613; } /* = unique id SOAP_TYPE___tt__union_MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_MetadataStream() { __tt__union_MetadataStream::soap_default(NULL); }
	virtual ~__tt__union_MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataStream
#define SOAP_TYPE_tt__MetadataStream (597)
/* tt:MetadataStream */
class SOAP_CMAC tt__MetadataStream
{
public:
	int __size_MetadataStream;	/* sequence of elements <-union-MetadataStream> */
	__tt__union_MetadataStream *__union_MetadataStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 597; } /* = unique id SOAP_TYPE_tt__MetadataStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataStream() { tt__MetadataStream::soap_default(NULL); }
	virtual ~tt__MetadataStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataStreamExtension
#define SOAP_TYPE_tt__MetadataStreamExtension (598)
/* tt:MetadataStreamExtension */
class SOAP_CMAC tt__MetadataStreamExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 598; } /* = unique id SOAP_TYPE_tt__MetadataStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataStreamExtension() { tt__MetadataStreamExtension::soap_default(NULL); }
	virtual ~tt__MetadataStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_VideoAnalyticsStream
#define SOAP_TYPE__tt__union_VideoAnalyticsStream (1623)
/* xsd:choice */
union _tt__union_VideoAnalyticsStream
{
#define SOAP_UNION__tt__union_VideoAnalyticsStream_Frame	(1)
	tt__Frame *Frame;
#define SOAP_UNION__tt__union_VideoAnalyticsStream_Extension	(2)
	class tt__VideoAnalyticsStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_VideoAnalyticsStream
#define SOAP_TYPE___tt__union_VideoAnalyticsStream (1620)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_VideoAnalyticsStream
{
public:
	int __union_VideoAnalyticsStream;	/* union discriminant (of union defined below) */
	union _tt__union_VideoAnalyticsStream union_VideoAnalyticsStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1620; } /* = unique id SOAP_TYPE___tt__union_VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_VideoAnalyticsStream() { __tt__union_VideoAnalyticsStream::soap_default(NULL); }
	virtual ~__tt__union_VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStream
#define SOAP_TYPE_tt__VideoAnalyticsStream (599)
/* tt:VideoAnalyticsStream */
class SOAP_CMAC tt__VideoAnalyticsStream
{
public:
	int __size_VideoAnalyticsStream;	/* sequence of elements <-union-VideoAnalyticsStream> */
	__tt__union_VideoAnalyticsStream *__union_VideoAnalyticsStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 599; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsStream() { tt__VideoAnalyticsStream::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsStreamExtension
#define SOAP_TYPE_tt__VideoAnalyticsStreamExtension (600)
/* tt:VideoAnalyticsStreamExtension */
class SOAP_CMAC tt__VideoAnalyticsStreamExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 600; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsStreamExtension() { tt__VideoAnalyticsStreamExtension::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_PTZStream
#define SOAP_TYPE__tt__union_PTZStream (1627)
/* xsd:choice */
union _tt__union_PTZStream
{
#define SOAP_UNION__tt__union_PTZStream_PTZStatus	(1)
	tt__PTZStatus *PTZStatus;
#define SOAP_UNION__tt__union_PTZStream_Extension	(2)
	class tt__PTZStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_PTZStream
#define SOAP_TYPE___tt__union_PTZStream (1625)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_PTZStream
{
public:
	int __union_PTZStream;	/* union discriminant (of union defined below) */
	union _tt__union_PTZStream union_PTZStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1625; } /* = unique id SOAP_TYPE___tt__union_PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_PTZStream() { __tt__union_PTZStream::soap_default(NULL); }
	virtual ~__tt__union_PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStream
#define SOAP_TYPE_tt__PTZStream (601)
/* tt:PTZStream */
class SOAP_CMAC tt__PTZStream
{
public:
	int __size_PTZStream;	/* sequence of elements <-union-PTZStream> */
	__tt__union_PTZStream *__union_PTZStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 601; } /* = unique id SOAP_TYPE_tt__PTZStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStream() { tt__PTZStream::soap_default(NULL); }
	virtual ~tt__PTZStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZStreamExtension
#define SOAP_TYPE_tt__PTZStreamExtension (602)
/* tt:PTZStreamExtension */
class SOAP_CMAC tt__PTZStreamExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 602; } /* = unique id SOAP_TYPE_tt__PTZStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZStreamExtension() { tt__PTZStreamExtension::soap_default(NULL); }
	virtual ~tt__PTZStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__union_EventStream
#define SOAP_TYPE__tt__union_EventStream (1632)
/* xsd:choice */
union _tt__union_EventStream
{
#define SOAP_UNION__tt__union_EventStream_wsnt__NotificationMessage	(1)
	class wsnt__NotificationMessageHolderType *wsnt__NotificationMessage;
#define SOAP_UNION__tt__union_EventStream_Extension	(2)
	class tt__EventStreamExtension *Extension;
};
#endif

#ifndef SOAP_TYPE___tt__union_EventStream
#define SOAP_TYPE___tt__union_EventStream (1629)
/* Operation wrapper: */
class SOAP_CMAC __tt__union_EventStream
{
public:
	int __union_EventStream;	/* union discriminant (of union defined below) */
	union _tt__union_EventStream union_EventStream;	/* required element of type xsd:choice */
public:
	virtual int soap_type() const { return 1629; } /* = unique id SOAP_TYPE___tt__union_EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         __tt__union_EventStream() { __tt__union_EventStream::soap_default(NULL); }
	virtual ~__tt__union_EventStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventStream
#define SOAP_TYPE_tt__EventStream (603)
/* tt:EventStream */
class SOAP_CMAC tt__EventStream
{
public:
	int __size_EventStream;	/* sequence of elements <-union-EventStream> */
	__tt__union_EventStream *__union_EventStream;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 603; } /* = unique id SOAP_TYPE_tt__EventStream */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventStream() { tt__EventStream::soap_default(NULL); }
	virtual ~tt__EventStream() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventStreamExtension
#define SOAP_TYPE_tt__EventStreamExtension (604)
/* tt:EventStreamExtension */
class SOAP_CMAC tt__EventStreamExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 604; } /* = unique id SOAP_TYPE_tt__EventStreamExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventStreamExtension() { tt__EventStreamExtension::soap_default(NULL); }
	virtual ~tt__EventStreamExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneConfiguration
#define SOAP_TYPE_tt__PaneConfiguration (605)
/* tt:PaneConfiguration */
class SOAP_CMAC tt__PaneConfiguration
{
public:
	std::string *PaneName;	/* optional element of type xsd:string */
	std::string *AudioOutputToken;	/* optional element of type tt:ReferenceToken */
	std::string *AudioSourceToken;	/* optional element of type tt:ReferenceToken */
	tt__AudioEncoderConfiguration *AudioEncoderConfiguration;	/* optional element of type tt:AudioEncoderConfiguration */
	std::string *ReceiverToken;	/* optional element of type tt:ReferenceToken */
	std::string Token;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 605; } /* = unique id SOAP_TYPE_tt__PaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneConfiguration() { tt__PaneConfiguration::soap_default(NULL); }
	virtual ~tt__PaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayout
#define SOAP_TYPE_tt__PaneLayout (606)
/* tt:PaneLayout */
class SOAP_CMAC tt__PaneLayout
{
public:
	std::string Pane;	/* required element of type tt:ReferenceToken */
	tt__Rectangle *Area;	/* required element of type tt:Rectangle */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 606; } /* = unique id SOAP_TYPE_tt__PaneLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayout() { tt__PaneLayout::soap_default(NULL); }
	virtual ~tt__PaneLayout() { }
};
#endif

#ifndef SOAP_TYPE_tt__Layout
#define SOAP_TYPE_tt__Layout (607)
/* tt:Layout */
class SOAP_CMAC tt__Layout
{
public:
	std::vector<tt__PaneLayout * >PaneLayout;	/* required element of type tt:PaneLayout */
	class tt__LayoutExtension *Extension;	/* optional element of type tt:LayoutExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 607; } /* = unique id SOAP_TYPE_tt__Layout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Layout() { tt__Layout::soap_default(NULL); }
	virtual ~tt__Layout() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutExtension
#define SOAP_TYPE_tt__LayoutExtension (608)
/* tt:LayoutExtension */
class SOAP_CMAC tt__LayoutExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 608; } /* = unique id SOAP_TYPE_tt__LayoutExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutExtension() { tt__LayoutExtension::soap_default(NULL); }
	virtual ~tt__LayoutExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__CodingCapabilities
#define SOAP_TYPE_tt__CodingCapabilities (609)
/* tt:CodingCapabilities */
class SOAP_CMAC tt__CodingCapabilities
{
public:
	tt__AudioEncoderConfigurationOptions *AudioEncodingCapabilities;	/* optional element of type tt:AudioEncoderConfigurationOptions */
	tt__AudioDecoderConfigurationOptions *AudioDecodingCapabilities;	/* optional element of type tt:AudioDecoderConfigurationOptions */
	tt__VideoDecoderConfigurationOptions *VideoDecodingCapabilities;	/* required element of type tt:VideoDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 609; } /* = unique id SOAP_TYPE_tt__CodingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CodingCapabilities() { tt__CodingCapabilities::soap_default(NULL); }
	virtual ~tt__CodingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptions
#define SOAP_TYPE_tt__LayoutOptions (610)
/* tt:LayoutOptions */
class SOAP_CMAC tt__LayoutOptions
{
public:
	std::vector<class tt__PaneLayoutOptions * >PaneLayoutOptions;	/* required element of type tt:PaneLayoutOptions */
	class tt__LayoutOptionsExtension *Extension;	/* optional element of type tt:LayoutOptionsExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 610; } /* = unique id SOAP_TYPE_tt__LayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptions() { tt__LayoutOptions::soap_default(NULL); }
	virtual ~tt__LayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__LayoutOptionsExtension
#define SOAP_TYPE_tt__LayoutOptionsExtension (611)
/* tt:LayoutOptionsExtension */
class SOAP_CMAC tt__LayoutOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 611; } /* = unique id SOAP_TYPE_tt__LayoutOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__LayoutOptionsExtension() { tt__LayoutOptionsExtension::soap_default(NULL); }
	virtual ~tt__LayoutOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneLayoutOptions
#define SOAP_TYPE_tt__PaneLayoutOptions (612)
/* tt:PaneLayoutOptions */
class SOAP_CMAC tt__PaneLayoutOptions
{
public:
	std::vector<tt__Rectangle * >Area;	/* required element of type tt:Rectangle */
	class tt__PaneOptionExtension *Extension;	/* optional element of type tt:PaneOptionExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 612; } /* = unique id SOAP_TYPE_tt__PaneLayoutOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneLayoutOptions() { tt__PaneLayoutOptions::soap_default(NULL); }
	virtual ~tt__PaneLayoutOptions() { }
};
#endif

#ifndef SOAP_TYPE_tt__PaneOptionExtension
#define SOAP_TYPE_tt__PaneOptionExtension (613)
/* tt:PaneOptionExtension */
class SOAP_CMAC tt__PaneOptionExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 613; } /* = unique id SOAP_TYPE_tt__PaneOptionExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PaneOptionExtension() { tt__PaneOptionExtension::soap_default(NULL); }
	virtual ~tt__PaneOptionExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__Receiver
#define SOAP_TYPE_tt__Receiver (614)
/* tt:Receiver */
class SOAP_CMAC tt__Receiver
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	class tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 614; } /* = unique id SOAP_TYPE_tt__Receiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Receiver() { tt__Receiver::soap_default(NULL); }
	virtual ~tt__Receiver() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverConfiguration
#define SOAP_TYPE_tt__ReceiverConfiguration (615)
/* tt:ReceiverConfiguration */
class SOAP_CMAC tt__ReceiverConfiguration
{
public:
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	std::string MediaUri;	/* required element of type xsd:anyURI */
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 615; } /* = unique id SOAP_TYPE_tt__ReceiverConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverConfiguration() { tt__ReceiverConfiguration::soap_default(NULL); }
	virtual ~tt__ReceiverConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReceiverStateInformation
#define SOAP_TYPE_tt__ReceiverStateInformation (616)
/* tt:ReceiverStateInformation */
class SOAP_CMAC tt__ReceiverStateInformation
{
public:
	enum tt__ReceiverState State;	/* required element of type tt:ReceiverState */
	bool AutoCreated;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 616; } /* = unique id SOAP_TYPE_tt__ReceiverStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReceiverStateInformation() { tt__ReceiverStateInformation::soap_default(NULL); }
	virtual ~tt__ReceiverStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceReference
#define SOAP_TYPE_tt__SourceReference (617)
/* tt:SourceReference */
class SOAP_CMAC tt__SourceReference
{
public:
	std::string Token;	/* required element of type tt:ReferenceToken */
	std::string Type;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 617; } /* = unique id SOAP_TYPE_tt__SourceReference */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceReference() { tt__SourceReference::soap_default(NULL); }
	virtual ~tt__SourceReference() { }
};
#endif

#ifndef SOAP_TYPE_tt__DateTimeRange
#define SOAP_TYPE_tt__DateTimeRange (618)
/* tt:DateTimeRange */
class SOAP_CMAC tt__DateTimeRange
{
public:
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 618; } /* = unique id SOAP_TYPE_tt__DateTimeRange */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DateTimeRange() { tt__DateTimeRange::soap_default(NULL); }
	virtual ~tt__DateTimeRange() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSummary
#define SOAP_TYPE_tt__RecordingSummary (619)
/* tt:RecordingSummary */
class SOAP_CMAC tt__RecordingSummary
{
public:
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataUntil;	/* required element of type xsd:dateTime */
	int NumberRecordings;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 619; } /* = unique id SOAP_TYPE_tt__RecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSummary() { tt__RecordingSummary::soap_default(NULL); }
	virtual ~tt__RecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScope
#define SOAP_TYPE_tt__SearchScope (620)
/* tt:SearchScope */
class SOAP_CMAC tt__SearchScope
{
public:
	std::vector<tt__SourceReference * >IncludedSources;	/* optional element of type tt:SourceReference */
	std::vector<std::string >IncludedRecordings;	/* optional element of type tt:RecordingReference */
	std::string *RecordingInformationFilter;	/* optional element of type tt:XPathExpression */
	class tt__SearchScopeExtension *Extension;	/* optional element of type tt:SearchScopeExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 620; } /* = unique id SOAP_TYPE_tt__SearchScope */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScope() { tt__SearchScope::soap_default(NULL); }
	virtual ~tt__SearchScope() { }
};
#endif

#ifndef SOAP_TYPE_tt__SearchScopeExtension
#define SOAP_TYPE_tt__SearchScopeExtension (621)
/* tt:SearchScopeExtension */
class SOAP_CMAC tt__SearchScopeExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 621; } /* = unique id SOAP_TYPE_tt__SearchScopeExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SearchScopeExtension() { tt__SearchScopeExtension::soap_default(NULL); }
	virtual ~tt__SearchScopeExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZPositionFilter
#define SOAP_TYPE_tt__PTZPositionFilter (623)
/* tt:PTZPositionFilter */
class SOAP_CMAC tt__PTZPositionFilter
{
public:
	tt__PTZVector *MinPosition;	/* required element of type tt:PTZVector */
	tt__PTZVector *MaxPosition;	/* required element of type tt:PTZVector */
	bool EnterOrExit;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 623; } /* = unique id SOAP_TYPE_tt__PTZPositionFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZPositionFilter() { tt__PTZPositionFilter::soap_default(NULL); }
	virtual ~tt__PTZPositionFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataFilter
#define SOAP_TYPE_tt__MetadataFilter (624)
/* tt:MetadataFilter */
class SOAP_CMAC tt__MetadataFilter
{
public:
	std::string MetadataStreamFilter;	/* required element of type tt:XPathExpression */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 624; } /* = unique id SOAP_TYPE_tt__MetadataFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataFilter() { tt__MetadataFilter::soap_default(NULL); }
	virtual ~tt__MetadataFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindRecordingResultList
#define SOAP_TYPE_tt__FindRecordingResultList (625)
/* tt:FindRecordingResultList */
class SOAP_CMAC tt__FindRecordingResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__RecordingInformation * >RecordingInformation;	/* optional element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 625; } /* = unique id SOAP_TYPE_tt__FindRecordingResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindRecordingResultList() { tt__FindRecordingResultList::soap_default(NULL); }
	virtual ~tt__FindRecordingResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResultList
#define SOAP_TYPE_tt__FindEventResultList (626)
/* tt:FindEventResultList */
class SOAP_CMAC tt__FindEventResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindEventResult * >Result;	/* optional element of type tt:FindEventResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 626; } /* = unique id SOAP_TYPE_tt__FindEventResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResultList() { tt__FindEventResultList::soap_default(NULL); }
	virtual ~tt__FindEventResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindEventResult
#define SOAP_TYPE_tt__FindEventResult (627)
/* tt:FindEventResult */
class SOAP_CMAC tt__FindEventResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	wsnt__NotificationMessageHolderType *Event;	/* required element of type wsnt:NotificationMessageHolderType */
	bool StartStateEvent;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 627; } /* = unique id SOAP_TYPE_tt__FindEventResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindEventResult() { tt__FindEventResult::soap_default(NULL); }
	virtual ~tt__FindEventResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResultList
#define SOAP_TYPE_tt__FindPTZPositionResultList (628)
/* tt:FindPTZPositionResultList */
class SOAP_CMAC tt__FindPTZPositionResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindPTZPositionResult * >Result;	/* optional element of type tt:FindPTZPositionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 628; } /* = unique id SOAP_TYPE_tt__FindPTZPositionResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResultList() { tt__FindPTZPositionResultList::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindPTZPositionResult
#define SOAP_TYPE_tt__FindPTZPositionResult (629)
/* tt:FindPTZPositionResult */
class SOAP_CMAC tt__FindPTZPositionResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	tt__PTZVector *Position;	/* required element of type tt:PTZVector */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 629; } /* = unique id SOAP_TYPE_tt__FindPTZPositionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindPTZPositionResult() { tt__FindPTZPositionResult::soap_default(NULL); }
	virtual ~tt__FindPTZPositionResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResultList
#define SOAP_TYPE_tt__FindMetadataResultList (630)
/* tt:FindMetadataResultList */
class SOAP_CMAC tt__FindMetadataResultList
{
public:
	enum tt__SearchState SearchState;	/* required element of type tt:SearchState */
	std::vector<class tt__FindMetadataResult * >Result;	/* optional element of type tt:FindMetadataResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 630; } /* = unique id SOAP_TYPE_tt__FindMetadataResultList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResultList() { tt__FindMetadataResultList::soap_default(NULL); }
	virtual ~tt__FindMetadataResultList() { }
};
#endif

#ifndef SOAP_TYPE_tt__FindMetadataResult
#define SOAP_TYPE_tt__FindMetadataResult (631)
/* tt:FindMetadataResult */
class SOAP_CMAC tt__FindMetadataResult
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	time_t Time;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 631; } /* = unique id SOAP_TYPE_tt__FindMetadataResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__FindMetadataResult() { tt__FindMetadataResult::soap_default(NULL); }
	virtual ~tt__FindMetadataResult() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingInformation
#define SOAP_TYPE_tt__RecordingInformation (632)
/* tt:RecordingInformation */
class SOAP_CMAC tt__RecordingInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	class tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	time_t *EarliestRecording;	/* optional element of type xsd:dateTime */
	time_t *LatestRecording;	/* optional element of type xsd:dateTime */
	std::string Content;	/* required element of type tt:Description */
	std::vector<class tt__TrackInformation * >Track;	/* optional element of type tt:TrackInformation */
	enum tt__RecordingStatus RecordingStatus;	/* required element of type tt:RecordingStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 632; } /* = unique id SOAP_TYPE_tt__RecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingInformation() { tt__RecordingInformation::soap_default(NULL); }
	virtual ~tt__RecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingSourceInformation
#define SOAP_TYPE_tt__RecordingSourceInformation (633)
/* tt:RecordingSourceInformation */
class SOAP_CMAC tt__RecordingSourceInformation
{
public:
	std::string SourceId;	/* required element of type xsd:anyURI */
	std::string Name;	/* required element of type tt:Name */
	std::string Location;	/* required element of type tt:Description */
	std::string Description;	/* required element of type tt:Description */
	std::string Address;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 633; } /* = unique id SOAP_TYPE_tt__RecordingSourceInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingSourceInformation() { tt__RecordingSourceInformation::soap_default(NULL); }
	virtual ~tt__RecordingSourceInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackInformation
#define SOAP_TYPE_tt__TrackInformation (634)
/* tt:TrackInformation */
class SOAP_CMAC tt__TrackInformation
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	time_t DataFrom;	/* required element of type xsd:dateTime */
	time_t DataTo;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 634; } /* = unique id SOAP_TYPE_tt__TrackInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackInformation() { tt__TrackInformation::soap_default(NULL); }
	virtual ~tt__TrackInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__MediaAttributes
#define SOAP_TYPE_tt__MediaAttributes (635)
/* tt:MediaAttributes */
class SOAP_CMAC tt__MediaAttributes
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::vector<class tt__TrackAttributes * >TrackAttributes;	/* optional element of type tt:TrackAttributes */
	time_t From;	/* required element of type xsd:dateTime */
	time_t Until;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 635; } /* = unique id SOAP_TYPE_tt__MediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MediaAttributes() { tt__MediaAttributes::soap_default(NULL); }
	virtual ~tt__MediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributes
#define SOAP_TYPE_tt__TrackAttributes (636)
/* tt:TrackAttributes */
class SOAP_CMAC tt__TrackAttributes
{
public:
	tt__TrackInformation *TrackInformation;	/* required element of type tt:TrackInformation */
	class tt__VideoAttributes *VideoAttributes;	/* optional element of type tt:VideoAttributes */
	class tt__AudioAttributes *AudioAttributes;	/* optional element of type tt:AudioAttributes */
	class tt__MetadataAttributes *MetadataAttributes;	/* optional element of type tt:MetadataAttributes */
	class tt__TrackAttributesExtension *Extension;	/* optional element of type tt:TrackAttributesExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 636; } /* = unique id SOAP_TYPE_tt__TrackAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributes() { tt__TrackAttributes::soap_default(NULL); }
	virtual ~tt__TrackAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackAttributesExtension
#define SOAP_TYPE_tt__TrackAttributesExtension (637)
/* tt:TrackAttributesExtension */
class SOAP_CMAC tt__TrackAttributesExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 637; } /* = unique id SOAP_TYPE_tt__TrackAttributesExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackAttributesExtension() { tt__TrackAttributesExtension::soap_default(NULL); }
	virtual ~tt__TrackAttributesExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAttributes
#define SOAP_TYPE_tt__VideoAttributes (638)
/* tt:VideoAttributes */
class SOAP_CMAC tt__VideoAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	int Width;	/* required element of type xsd:int */
	int Height;	/* required element of type xsd:int */
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	float Framerate;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 638; } /* = unique id SOAP_TYPE_tt__VideoAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAttributes() { tt__VideoAttributes::soap_default(NULL); }
	virtual ~tt__VideoAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioAttributes
#define SOAP_TYPE_tt__AudioAttributes (639)
/* tt:AudioAttributes */
class SOAP_CMAC tt__AudioAttributes
{
public:
	int *Bitrate;	/* optional element of type xsd:int */
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Samplerate;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 639; } /* = unique id SOAP_TYPE_tt__AudioAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioAttributes() { tt__AudioAttributes::soap_default(NULL); }
	virtual ~tt__AudioAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataAttributes
#define SOAP_TYPE_tt__MetadataAttributes (640)
/* tt:MetadataAttributes */
class SOAP_CMAC tt__MetadataAttributes
{
public:
	bool CanContainPTZ;	/* required element of type xsd:boolean */
	bool CanContainAnalytics;	/* required element of type xsd:boolean */
	bool CanContainNotifications;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 640; } /* = unique id SOAP_TYPE_tt__MetadataAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataAttributes() { tt__MetadataAttributes::soap_default(NULL); }
	virtual ~tt__MetadataAttributes() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingConfiguration
#define SOAP_TYPE_tt__RecordingConfiguration (641)
/* tt:RecordingConfiguration */
class SOAP_CMAC tt__RecordingConfiguration
{
public:
	tt__RecordingSourceInformation *Source;	/* required element of type tt:RecordingSourceInformation */
	std::string Content;	/* required element of type tt:Description */
	std::string MaximumRetentionTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 641; } /* = unique id SOAP_TYPE_tt__RecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingConfiguration() { tt__RecordingConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__TrackConfiguration
#define SOAP_TYPE_tt__TrackConfiguration (642)
/* tt:TrackConfiguration */
class SOAP_CMAC tt__TrackConfiguration
{
public:
	enum tt__TrackType TrackType;	/* required element of type tt:TrackType */
	std::string Description;	/* required element of type tt:Description */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 642; } /* = unique id SOAP_TYPE_tt__TrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__TrackConfiguration() { tt__TrackConfiguration::soap_default(NULL); }
	virtual ~tt__TrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingsResponseItem
#define SOAP_TYPE_tt__GetRecordingsResponseItem (643)
/* tt:GetRecordingsResponseItem */
class SOAP_CMAC tt__GetRecordingsResponseItem
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *Configuration;	/* required element of type tt:RecordingConfiguration */
	class tt__GetTracksResponseList *Tracks;	/* required element of type tt:GetTracksResponseList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 643; } /* = unique id SOAP_TYPE_tt__GetRecordingsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingsResponseItem() { tt__GetRecordingsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseList
#define SOAP_TYPE_tt__GetTracksResponseList (644)
/* tt:GetTracksResponseList */
class SOAP_CMAC tt__GetTracksResponseList
{
public:
	std::vector<class tt__GetTracksResponseItem * >Track;	/* optional element of type tt:GetTracksResponseItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 644; } /* = unique id SOAP_TYPE_tt__GetTracksResponseList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseList() { tt__GetTracksResponseList::soap_default(NULL); }
	virtual ~tt__GetTracksResponseList() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetTracksResponseItem
#define SOAP_TYPE_tt__GetTracksResponseItem (645)
/* tt:GetTracksResponseItem */
class SOAP_CMAC tt__GetTracksResponseItem
{
public:
	std::string TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *Configuration;	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 645; } /* = unique id SOAP_TYPE_tt__GetTracksResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetTracksResponseItem() { tt__GetTracksResponseItem::soap_default(NULL); }
	virtual ~tt__GetTracksResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfiguration
#define SOAP_TYPE_tt__RecordingJobConfiguration (646)
/* tt:RecordingJobConfiguration */
class SOAP_CMAC tt__RecordingJobConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string Mode;	/* required element of type tt:RecordingJobMode */
	int Priority;	/* required element of type xsd:int */
	std::vector<class tt__RecordingJobSource * >Source;	/* optional element of type tt:RecordingJobSource */
	class tt__RecordingJobConfigurationExtension *Extension;	/* optional element of type tt:RecordingJobConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 646; } /* = unique id SOAP_TYPE_tt__RecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfiguration() { tt__RecordingJobConfiguration::soap_default(NULL); }
	virtual ~tt__RecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobConfigurationExtension
#define SOAP_TYPE_tt__RecordingJobConfigurationExtension (647)
/* tt:RecordingJobConfigurationExtension */
class SOAP_CMAC tt__RecordingJobConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 647; } /* = unique id SOAP_TYPE_tt__RecordingJobConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobConfigurationExtension() { tt__RecordingJobConfigurationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSource
#define SOAP_TYPE_tt__RecordingJobSource (648)
/* tt:RecordingJobSource */
class SOAP_CMAC tt__RecordingJobSource
{
public:
	tt__SourceReference *SourceToken;	/* optional element of type tt:SourceReference */
	bool *AutoCreateReceiver;	/* optional element of type xsd:boolean */
	std::vector<class tt__RecordingJobTrack * >Tracks;	/* optional element of type tt:RecordingJobTrack */
	class tt__RecordingJobSourceExtension *Extension;	/* optional element of type tt:RecordingJobSourceExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 648; } /* = unique id SOAP_TYPE_tt__RecordingJobSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSource() { tt__RecordingJobSource::soap_default(NULL); }
	virtual ~tt__RecordingJobSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobSourceExtension
#define SOAP_TYPE_tt__RecordingJobSourceExtension (649)
/* tt:RecordingJobSourceExtension */
class SOAP_CMAC tt__RecordingJobSourceExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 649; } /* = unique id SOAP_TYPE_tt__RecordingJobSourceExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobSourceExtension() { tt__RecordingJobSourceExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobSourceExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobTrack
#define SOAP_TYPE_tt__RecordingJobTrack (650)
/* tt:RecordingJobTrack */
class SOAP_CMAC tt__RecordingJobTrack
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 650; } /* = unique id SOAP_TYPE_tt__RecordingJobTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobTrack() { tt__RecordingJobTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformation
#define SOAP_TYPE_tt__RecordingJobStateInformation (651)
/* tt:RecordingJobStateInformation */
class SOAP_CMAC tt__RecordingJobStateInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	std::vector<class tt__RecordingJobStateSource * >Sources;	/* optional element of type tt:RecordingJobStateSource */
	class tt__RecordingJobStateInformationExtension *Extension;	/* optional element of type tt:RecordingJobStateInformationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 651; } /* = unique id SOAP_TYPE_tt__RecordingJobStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformation() { tt__RecordingJobStateInformation::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateInformationExtension
#define SOAP_TYPE_tt__RecordingJobStateInformationExtension (652)
/* tt:RecordingJobStateInformationExtension */
class SOAP_CMAC tt__RecordingJobStateInformationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 652; } /* = unique id SOAP_TYPE_tt__RecordingJobStateInformationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateInformationExtension() { tt__RecordingJobStateInformationExtension::soap_default(NULL); }
	virtual ~tt__RecordingJobStateInformationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateSource
#define SOAP_TYPE_tt__RecordingJobStateSource (653)
/* tt:RecordingJobStateSource */
class SOAP_CMAC tt__RecordingJobStateSource
{
public:
	tt__SourceReference *SourceToken;	/* required element of type tt:SourceReference */
	std::string State;	/* required element of type tt:RecordingJobState */
	class tt__RecordingJobStateTracks *Tracks;	/* required element of type tt:RecordingJobStateTracks */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 653; } /* = unique id SOAP_TYPE_tt__RecordingJobStateSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateSource() { tt__RecordingJobStateSource::soap_default(NULL); }
	virtual ~tt__RecordingJobStateSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTracks
#define SOAP_TYPE_tt__RecordingJobStateTracks (654)
/* tt:RecordingJobStateTracks */
class SOAP_CMAC tt__RecordingJobStateTracks
{
public:
	std::vector<class tt__RecordingJobStateTrack * >Track;	/* optional element of type tt:RecordingJobStateTrack */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 654; } /* = unique id SOAP_TYPE_tt__RecordingJobStateTracks */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTracks() { tt__RecordingJobStateTracks::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTracks() { }
};
#endif

#ifndef SOAP_TYPE_tt__RecordingJobStateTrack
#define SOAP_TYPE_tt__RecordingJobStateTrack (655)
/* tt:RecordingJobStateTrack */
class SOAP_CMAC tt__RecordingJobStateTrack
{
public:
	std::string SourceTag;	/* required element of type xsd:string */
	std::string Destination;	/* required element of type tt:TrackReference */
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type tt:RecordingJobState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 655; } /* = unique id SOAP_TYPE_tt__RecordingJobStateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RecordingJobStateTrack() { tt__RecordingJobStateTrack::soap_default(NULL); }
	virtual ~tt__RecordingJobStateTrack() { }
};
#endif

#ifndef SOAP_TYPE_tt__GetRecordingJobsResponseItem
#define SOAP_TYPE_tt__GetRecordingJobsResponseItem (656)
/* tt:GetRecordingJobsResponseItem */
class SOAP_CMAC tt__GetRecordingJobsResponseItem
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 656; } /* = unique id SOAP_TYPE_tt__GetRecordingJobsResponseItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__GetRecordingJobsResponseItem() { tt__GetRecordingJobsResponseItem::soap_default(NULL); }
	virtual ~tt__GetRecordingJobsResponseItem() { }
};
#endif

#ifndef SOAP_TYPE_tt__ReplayConfiguration
#define SOAP_TYPE_tt__ReplayConfiguration (657)
/* tt:ReplayConfiguration */
class SOAP_CMAC tt__ReplayConfiguration
{
public:
	std::string SessionTimeout;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 657; } /* = unique id SOAP_TYPE_tt__ReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ReplayConfiguration() { tt__ReplayConfiguration::soap_default(NULL); }
	virtual ~tt__ReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration (659)
/* tt:AnalyticsDeviceEngineConfiguration */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfiguration
{
public:
	std::vector<class tt__EngineConfiguration * >EngineConfiguration;	/* required element of type tt:EngineConfiguration */
	class tt__AnalyticsDeviceEngineConfigurationExtension *Extension;	/* optional element of type tt:AnalyticsDeviceEngineConfigurationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 659; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceEngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfiguration() { tt__AnalyticsDeviceEngineConfiguration::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension
#define SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension (660)
/* tt:AnalyticsDeviceEngineConfigurationExtension */
class SOAP_CMAC tt__AnalyticsDeviceEngineConfigurationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 660; } /* = unique id SOAP_TYPE_tt__AnalyticsDeviceEngineConfigurationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsDeviceEngineConfigurationExtension() { tt__AnalyticsDeviceEngineConfigurationExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsDeviceEngineConfigurationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__EngineConfiguration
#define SOAP_TYPE_tt__EngineConfiguration (661)
/* tt:EngineConfiguration */
class SOAP_CMAC tt__EngineConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *VideoAnalyticsConfiguration;	/* required element of type tt:VideoAnalyticsConfiguration */
	class tt__AnalyticsEngineInputInfo *AnalyticsEngineInputInfo;	/* required element of type tt:AnalyticsEngineInputInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 661; } /* = unique id SOAP_TYPE_tt__EngineConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EngineConfiguration() { tt__EngineConfiguration::soap_default(NULL); }
	virtual ~tt__EngineConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfo
#define SOAP_TYPE_tt__AnalyticsEngineInputInfo (662)
/* tt:AnalyticsEngineInputInfo */
class SOAP_CMAC tt__AnalyticsEngineInputInfo
{
public:
	tt__Config *InputInfo;	/* optional element of type tt:Config */
	class tt__AnalyticsEngineInputInfoExtension *Extension;	/* optional element of type tt:AnalyticsEngineInputInfoExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 662; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInputInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfo() { tt__AnalyticsEngineInputInfo::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfo() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension
#define SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension (663)
/* tt:AnalyticsEngineInputInfoExtension */
class SOAP_CMAC tt__AnalyticsEngineInputInfoExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 663; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInputInfoExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInputInfoExtension() { tt__AnalyticsEngineInputInfoExtension::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInputInfoExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentification
#define SOAP_TYPE_tt__SourceIdentification (665)
/* tt:SourceIdentification */
class SOAP_CMAC tt__SourceIdentification
{
public:
	std::string Name;	/* required element of type xsd:string */
	std::vector<std::string >Token;	/* required element of type tt:ReferenceToken */
	class tt__SourceIdentificationExtension *Extension;	/* optional element of type tt:SourceIdentificationExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 665; } /* = unique id SOAP_TYPE_tt__SourceIdentification */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentification() { tt__SourceIdentification::soap_default(NULL); }
	virtual ~tt__SourceIdentification() { }
};
#endif

#ifndef SOAP_TYPE_tt__SourceIdentificationExtension
#define SOAP_TYPE_tt__SourceIdentificationExtension (666)
/* tt:SourceIdentificationExtension */
class SOAP_CMAC tt__SourceIdentificationExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 666; } /* = unique id SOAP_TYPE_tt__SourceIdentificationExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__SourceIdentificationExtension() { tt__SourceIdentificationExtension::soap_default(NULL); }
	virtual ~tt__SourceIdentificationExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInput
#define SOAP_TYPE_tt__MetadataInput (667)
/* tt:MetadataInput */
class SOAP_CMAC tt__MetadataInput
{
public:
	std::vector<tt__Config * >MetadataConfig;	/* optional element of type tt:Config */
	class tt__MetadataInputExtension *Extension;	/* optional element of type tt:MetadataInputExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 667; } /* = unique id SOAP_TYPE_tt__MetadataInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInput() { tt__MetadataInput::soap_default(NULL); }
	virtual ~tt__MetadataInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataInputExtension
#define SOAP_TYPE_tt__MetadataInputExtension (668)
/* tt:MetadataInputExtension */
class SOAP_CMAC tt__MetadataInputExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 668; } /* = unique id SOAP_TYPE_tt__MetadataInputExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataInputExtension() { tt__MetadataInputExtension::soap_default(NULL); }
	virtual ~tt__MetadataInputExtension() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsStateInformation
#define SOAP_TYPE_tt__AnalyticsStateInformation (670)
/* tt:AnalyticsStateInformation */
class SOAP_CMAC tt__AnalyticsStateInformation
{
public:
	std::string AnalyticsEngineControlToken;	/* required element of type tt:ReferenceToken */
	class tt__AnalyticsState *State;	/* required element of type tt:AnalyticsState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 670; } /* = unique id SOAP_TYPE_tt__AnalyticsStateInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsStateInformation() { tt__AnalyticsStateInformation::soap_default(NULL); }
	virtual ~tt__AnalyticsStateInformation() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsState
#define SOAP_TYPE_tt__AnalyticsState (671)
/* tt:AnalyticsState */
class SOAP_CMAC tt__AnalyticsState
{
public:
	std::string *Error;	/* optional element of type xsd:string */
	std::string State;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 671; } /* = unique id SOAP_TYPE_tt__AnalyticsState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsState() { tt__AnalyticsState::soap_default(NULL); }
	virtual ~tt__AnalyticsState() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayload
#define SOAP_TYPE_tt__ActionEngineEventPayload (672)
/* tt:ActionEngineEventPayload */
class SOAP_CMAC tt__ActionEngineEventPayload
{
public:
	std::string *RequestInfo;	/* optional element of type SOAP-ENV:Envelope */
	std::string *ResponseInfo;	/* optional element of type SOAP-ENV:Envelope */
	struct SOAP_ENV__Fault *Fault;	/* optional element of type SOAP-ENV:Fault */
	class tt__ActionEngineEventPayloadExtension *Extension;	/* optional element of type tt:ActionEngineEventPayloadExtension */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 672; } /* = unique id SOAP_TYPE_tt__ActionEngineEventPayload */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayload() { tt__ActionEngineEventPayload::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayload() { }
};
#endif

#ifndef SOAP_TYPE_tt__ActionEngineEventPayloadExtension
#define SOAP_TYPE_tt__ActionEngineEventPayloadExtension (673)
/* tt:ActionEngineEventPayloadExtension */
class SOAP_CMAC tt__ActionEngineEventPayloadExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 673; } /* = unique id SOAP_TYPE_tt__ActionEngineEventPayloadExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__ActionEngineEventPayloadExtension() { tt__ActionEngineEventPayloadExtension::soap_default(NULL); }
	virtual ~tt__ActionEngineEventPayloadExtension() { }
};
#endif

#ifndef SOAP_TYPE__tt__Message
#define SOAP_TYPE__tt__Message (674)
/* tt:Message */
class SOAP_CMAC _tt__Message
{
public:
	tt__ItemList *Source;	/* optional element of type tt:ItemList */
	tt__ItemList *Key;	/* optional element of type tt:ItemList */
	tt__ItemList *Data;	/* optional element of type tt:ItemList */
	tt__MessageExtension *Extension;	/* optional element of type tt:MessageExtension */
	time_t UtcTime;	/* required attribute */
	enum tt__PropertyOperation *PropertyOperation;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 674; } /* = unique id SOAP_TYPE__tt__Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tt__Message() { _tt__Message::soap_default(NULL); }
	virtual ~_tt__Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__QueryExpressionType
#define SOAP_TYPE_wsnt__QueryExpressionType (675)
/* wsnt:QueryExpressionType */
class SOAP_CMAC wsnt__QueryExpressionType
{
public:
	std::string Dialect;	/* required attribute */
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 675; } /* = unique id SOAP_TYPE_wsnt__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__QueryExpressionType() { wsnt__QueryExpressionType::soap_default(NULL); }
	virtual ~wsnt__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionType
#define SOAP_TYPE_wsnt__TopicExpressionType (676)
/* wsnt:TopicExpressionType */
class SOAP_CMAC wsnt__TopicExpressionType
{
public:
	std::string Dialect;	/* required attribute */
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 676; } /* = unique id SOAP_TYPE_wsnt__TopicExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionType() { wsnt__TopicExpressionType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__FilterType
#define SOAP_TYPE_wsnt__FilterType (677)
/* wsnt:FilterType */
class SOAP_CMAC wsnt__FilterType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 677; } /* = unique id SOAP_TYPE_wsnt__FilterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__FilterType() { wsnt__FilterType::soap_default(NULL); }
	virtual ~wsnt__FilterType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscriptionPolicyType
#define SOAP_TYPE_wsnt__SubscriptionPolicyType (678)
/* wsnt:SubscriptionPolicyType */
class SOAP_CMAC wsnt__SubscriptionPolicyType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 678; } /* = unique id SOAP_TYPE_wsnt__SubscriptionPolicyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscriptionPolicyType() { wsnt__SubscriptionPolicyType::soap_default(NULL); }
	virtual ~wsnt__SubscriptionPolicyType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessageHolderType_Message
#define SOAP_TYPE__wsnt__NotificationMessageHolderType_Message (1702)
/* wsnt:NotificationMessageHolderType-Message */
class SOAP_CMAC _wsnt__NotificationMessageHolderType_Message
{
public:
	virtual int soap_type() const { return 1702; } /* = unique id SOAP_TYPE__wsnt__NotificationMessageHolderType_Message */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationMessageHolderType_Message() { _wsnt__NotificationMessageHolderType_Message::soap_default(NULL); }
	virtual ~_wsnt__NotificationMessageHolderType_Message() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotificationMessageHolderType
#define SOAP_TYPE_wsnt__NotificationMessageHolderType (679)
/* wsnt:NotificationMessageHolderType */
class SOAP_CMAC wsnt__NotificationMessageHolderType
{
public:
	struct wsa5__EndpointReferenceType *SubscriptionReference;	/* optional element of type wsa5:EndpointReferenceType */
	wsnt__TopicExpressionType *Topic;	/* optional element of type wsnt:TopicExpressionType */
	struct wsa5__EndpointReferenceType *ProducerReference;	/* optional element of type wsa5:EndpointReferenceType */
	_wsnt__NotificationMessageHolderType_Message Message;	/* required element of type wsnt:NotificationMessageHolderType-Message */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 679; } /* = unique id SOAP_TYPE_wsnt__NotificationMessageHolderType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotificationMessageHolderType() { wsnt__NotificationMessageHolderType::soap_default(NULL); }
	virtual ~wsnt__NotificationMessageHolderType() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__NotificationProducerRP
#define SOAP_TYPE__wsnt__NotificationProducerRP (700)
/* wsnt:NotificationProducerRP */
class SOAP_CMAC _wsnt__NotificationProducerRP
{
public:
	std::vector<wsnt__TopicExpressionType * >TopicExpression;	/* optional element of type wsnt:TopicExpressionType */
	bool *FixedTopicSet;	/* optional element of type xsd:boolean */
	std::vector<std::string >TopicExpressionDialect;	/* optional element of type xsd:anyURI */
	class wstop__TopicSetType *wstop__TopicSet;	/* optional element of type wstop:TopicSetType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 700; } /* = unique id SOAP_TYPE__wsnt__NotificationProducerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__NotificationProducerRP() { _wsnt__NotificationProducerRP::soap_default(NULL); }
	virtual ~_wsnt__NotificationProducerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionManagerRP
#define SOAP_TYPE__wsnt__SubscriptionManagerRP (701)
/* wsnt:SubscriptionManagerRP */
class SOAP_CMAC _wsnt__SubscriptionManagerRP
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	wsnt__SubscriptionPolicyType *SubscriptionPolicy;	/* optional element of type wsnt:SubscriptionPolicyType */
	time_t *CreationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 701; } /* = unique id SOAP_TYPE__wsnt__SubscriptionManagerRP */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscriptionManagerRP() { _wsnt__SubscriptionManagerRP::soap_default(NULL); }
	virtual ~_wsnt__SubscriptionManagerRP() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Notify
#define SOAP_TYPE__wsnt__Notify (702)
/* wsnt:Notify */
class SOAP_CMAC _wsnt__Notify
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* required element of type wsnt:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 702; } /* = unique id SOAP_TYPE__wsnt__Notify */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Notify() { _wsnt__Notify::soap_default(NULL); }
	virtual ~_wsnt__Notify() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UseRaw
#define SOAP_TYPE__wsnt__UseRaw (703)
/* wsnt:UseRaw */
class SOAP_CMAC _wsnt__UseRaw
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 703; } /* = unique id SOAP_TYPE__wsnt__UseRaw */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UseRaw() { _wsnt__UseRaw::soap_default(NULL); }
	virtual ~_wsnt__UseRaw() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy
#define SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy (1708)
/* wsnt:Subscribe-SubscriptionPolicy */
class SOAP_CMAC _wsnt__Subscribe_SubscriptionPolicy
{
public:
	virtual int soap_type() const { return 1708; } /* = unique id SOAP_TYPE__wsnt__Subscribe_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe_SubscriptionPolicy() { _wsnt__Subscribe_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_wsnt__Subscribe_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Subscribe
#define SOAP_TYPE__wsnt__Subscribe (704)
/* wsnt:Subscribe */
class SOAP_CMAC _wsnt__Subscribe
{
public:
	struct wsa5__EndpointReferenceType ConsumerReference;	/* required element of type wsa5:EndpointReferenceType */
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_wsnt__Subscribe_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type wsnt:Subscribe-SubscriptionPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 704; } /* = unique id SOAP_TYPE__wsnt__Subscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Subscribe() { _wsnt__Subscribe::soap_default(NULL); }
	virtual ~_wsnt__Subscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeResponse
#define SOAP_TYPE__wsnt__SubscribeResponse (705)
/* wsnt:SubscribeResponse */
class SOAP_CMAC _wsnt__SubscribeResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	time_t *TerminationTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 705; } /* = unique id SOAP_TYPE__wsnt__SubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__SubscribeResponse() { _wsnt__SubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__SubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessage
#define SOAP_TYPE__wsnt__GetCurrentMessage (706)
/* wsnt:GetCurrentMessage */
class SOAP_CMAC _wsnt__GetCurrentMessage
{
public:
	wsnt__TopicExpressionType *Topic;	/* required element of type wsnt:TopicExpressionType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 706; } /* = unique id SOAP_TYPE__wsnt__GetCurrentMessage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessage() { _wsnt__GetCurrentMessage::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessage() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetCurrentMessageResponse
#define SOAP_TYPE__wsnt__GetCurrentMessageResponse (707)
/* wsnt:GetCurrentMessageResponse */
class SOAP_CMAC _wsnt__GetCurrentMessageResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 707; } /* = unique id SOAP_TYPE__wsnt__GetCurrentMessageResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetCurrentMessageResponse() { _wsnt__GetCurrentMessageResponse::soap_default(NULL); }
	virtual ~_wsnt__GetCurrentMessageResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessages
#define SOAP_TYPE__wsnt__GetMessages (708)
/* wsnt:GetMessages */
class SOAP_CMAC _wsnt__GetMessages
{
public:
	std::string *MaximumNumber;	/* optional element of type xsd:nonNegativeInteger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 708; } /* = unique id SOAP_TYPE__wsnt__GetMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessages() { _wsnt__GetMessages::soap_default(NULL); }
	virtual ~_wsnt__GetMessages() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__GetMessagesResponse
#define SOAP_TYPE__wsnt__GetMessagesResponse (709)
/* wsnt:GetMessagesResponse */
class SOAP_CMAC _wsnt__GetMessagesResponse
{
public:
	std::vector<wsnt__NotificationMessageHolderType * >NotificationMessage;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type wsnt:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 709; } /* = unique id SOAP_TYPE__wsnt__GetMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__GetMessagesResponse() { _wsnt__GetMessagesResponse::soap_default(NULL); }
	virtual ~_wsnt__GetMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPoint
#define SOAP_TYPE__wsnt__DestroyPullPoint (710)
/* wsnt:DestroyPullPoint */
class SOAP_CMAC _wsnt__DestroyPullPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 710; } /* = unique id SOAP_TYPE__wsnt__DestroyPullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPoint() { _wsnt__DestroyPullPoint::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__DestroyPullPointResponse
#define SOAP_TYPE__wsnt__DestroyPullPointResponse (711)
/* wsnt:DestroyPullPointResponse */
class SOAP_CMAC _wsnt__DestroyPullPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 711; } /* = unique id SOAP_TYPE__wsnt__DestroyPullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__DestroyPullPointResponse() { _wsnt__DestroyPullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__DestroyPullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPoint
#define SOAP_TYPE__wsnt__CreatePullPoint (712)
/* wsnt:CreatePullPoint */
class SOAP_CMAC _wsnt__CreatePullPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 712; } /* = unique id SOAP_TYPE__wsnt__CreatePullPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPoint() { _wsnt__CreatePullPoint::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPoint() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__CreatePullPointResponse
#define SOAP_TYPE__wsnt__CreatePullPointResponse (713)
/* wsnt:CreatePullPointResponse */
class SOAP_CMAC _wsnt__CreatePullPointResponse
{
public:
	struct wsa5__EndpointReferenceType PullPoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 713; } /* = unique id SOAP_TYPE__wsnt__CreatePullPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__CreatePullPointResponse() { _wsnt__CreatePullPointResponse::soap_default(NULL); }
	virtual ~_wsnt__CreatePullPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Renew
#define SOAP_TYPE__wsnt__Renew (714)
/* wsnt:Renew */
class SOAP_CMAC _wsnt__Renew
{
public:
	std::string *TerminationTime;	/* required element of type wsnt:AbsoluteOrRelativeTimeType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 714; } /* = unique id SOAP_TYPE__wsnt__Renew */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Renew() { _wsnt__Renew::soap_default(NULL); }
	virtual ~_wsnt__Renew() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__RenewResponse
#define SOAP_TYPE__wsnt__RenewResponse (715)
/* wsnt:RenewResponse */
class SOAP_CMAC _wsnt__RenewResponse
{
public:
	time_t TerminationTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t *CurrentTime;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 715; } /* = unique id SOAP_TYPE__wsnt__RenewResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__RenewResponse() { _wsnt__RenewResponse::soap_default(NULL); }
	virtual ~_wsnt__RenewResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__Unsubscribe
#define SOAP_TYPE__wsnt__Unsubscribe (716)
/* wsnt:Unsubscribe */
class SOAP_CMAC _wsnt__Unsubscribe
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 716; } /* = unique id SOAP_TYPE__wsnt__Unsubscribe */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__Unsubscribe() { _wsnt__Unsubscribe::soap_default(NULL); }
	virtual ~_wsnt__Unsubscribe() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__UnsubscribeResponse
#define SOAP_TYPE__wsnt__UnsubscribeResponse (717)
/* wsnt:UnsubscribeResponse */
class SOAP_CMAC _wsnt__UnsubscribeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 717; } /* = unique id SOAP_TYPE__wsnt__UnsubscribeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__UnsubscribeResponse() { _wsnt__UnsubscribeResponse::soap_default(NULL); }
	virtual ~_wsnt__UnsubscribeResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscription
#define SOAP_TYPE__wsnt__PauseSubscription (718)
/* wsnt:PauseSubscription */
class SOAP_CMAC _wsnt__PauseSubscription
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 718; } /* = unique id SOAP_TYPE__wsnt__PauseSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscription() { _wsnt__PauseSubscription::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__PauseSubscriptionResponse
#define SOAP_TYPE__wsnt__PauseSubscriptionResponse (719)
/* wsnt:PauseSubscriptionResponse */
class SOAP_CMAC _wsnt__PauseSubscriptionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 719; } /* = unique id SOAP_TYPE__wsnt__PauseSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__PauseSubscriptionResponse() { _wsnt__PauseSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__PauseSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscription
#define SOAP_TYPE__wsnt__ResumeSubscription (720)
/* wsnt:ResumeSubscription */
class SOAP_CMAC _wsnt__ResumeSubscription
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 720; } /* = unique id SOAP_TYPE__wsnt__ResumeSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscription() { _wsnt__ResumeSubscription::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscription() { }
};
#endif

#ifndef SOAP_TYPE__wsnt__ResumeSubscriptionResponse
#define SOAP_TYPE__wsnt__ResumeSubscriptionResponse (721)
/* wsnt:ResumeSubscriptionResponse */
class SOAP_CMAC _wsnt__ResumeSubscriptionResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 721; } /* = unique id SOAP_TYPE__wsnt__ResumeSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsnt__ResumeSubscriptionResponse() { _wsnt__ResumeSubscriptionResponse::soap_default(NULL); }
	virtual ~_wsnt__ResumeSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode
#define SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode (1711)
/* wsrfbf:BaseFaultType-ErrorCode */
class SOAP_CMAC _wsrfbf__BaseFaultType_ErrorCode
{
public:
	std::string dialect;	/* required attribute */
public:
	virtual int soap_type() const { return 1711; } /* = unique id SOAP_TYPE__wsrfbf__BaseFaultType_ErrorCode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_ErrorCode() { _wsrfbf__BaseFaultType_ErrorCode::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_ErrorCode() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_Description
#define SOAP_TYPE__wsrfbf__BaseFaultType_Description (1713)
/* Primitive wsrfbf:BaseFaultType-Description schema type: */
class SOAP_CMAC _wsrfbf__BaseFaultType_Description
{
public:
	std::string __item;
	std::string *xml__lang;	/* optional attribute */
public:
	virtual int soap_type() const { return 1713; } /* = unique id SOAP_TYPE__wsrfbf__BaseFaultType_Description */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_Description() { _wsrfbf__BaseFaultType_Description::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_Description() { }
};
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause
#define SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause (1717)
/* wsrfbf:BaseFaultType-FaultCause */
class SOAP_CMAC _wsrfbf__BaseFaultType_FaultCause
{
public:
	virtual int soap_type() const { return 1717; } /* = unique id SOAP_TYPE__wsrfbf__BaseFaultType_FaultCause */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wsrfbf__BaseFaultType_FaultCause() { _wsrfbf__BaseFaultType_FaultCause::soap_default(NULL); }
	virtual ~_wsrfbf__BaseFaultType_FaultCause() { }
};
#endif

#ifndef SOAP_TYPE_wsrfbf__BaseFaultType
#define SOAP_TYPE_wsrfbf__BaseFaultType (722)
/* wsrfbf:BaseFaultType */
class SOAP_CMAC wsrfbf__BaseFaultType
{
public:
	time_t Timestamp;	/* required element of type xsd:dateTime */
	struct wsa5__EndpointReferenceType *Originator;	/* optional element of type wsa5:EndpointReferenceType */
	_wsrfbf__BaseFaultType_ErrorCode *ErrorCode;	/* optional element of type wsrfbf:BaseFaultType-ErrorCode */
	std::vector<_wsrfbf__BaseFaultType_Description >*Description;	/* optional element of type wsrfbf:BaseFaultType-Description */
	_wsrfbf__BaseFaultType_FaultCause *FaultCause;	/* optional element of type wsrfbf:BaseFaultType-FaultCause */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 722; } /* = unique id SOAP_TYPE_wsrfbf__BaseFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfbf__BaseFaultType() { wsrfbf__BaseFaultType::soap_default(NULL); }
	virtual ~wsrfbf__BaseFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__Documentation
#define SOAP_TYPE_wstop__Documentation (723)
/* wstop:Documentation */
class SOAP_CMAC wstop__Documentation
{
public:
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 723; } /* = unique id SOAP_TYPE_wstop__Documentation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__Documentation() { wstop__Documentation::soap_default(NULL); }
	virtual ~wstop__Documentation() { }
};
#endif

#ifndef SOAP_TYPE_wstop__ExtensibleDocumented
#define SOAP_TYPE_wstop__ExtensibleDocumented (724)
/* wstop:ExtensibleDocumented */
class SOAP_CMAC wstop__ExtensibleDocumented
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 724; } /* = unique id SOAP_TYPE_wstop__ExtensibleDocumented */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__ExtensibleDocumented() { wstop__ExtensibleDocumented::soap_default(NULL); }
	virtual ~wstop__ExtensibleDocumented() { }
};
#endif

#ifndef SOAP_TYPE_wstop__QueryExpressionType
#define SOAP_TYPE_wstop__QueryExpressionType (725)
/* wstop:QueryExpressionType */
class SOAP_CMAC wstop__QueryExpressionType
{
public:
	std::string Dialect;	/* required attribute */
	char *__mixed;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 725; } /* = unique id SOAP_TYPE_wstop__QueryExpressionType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__QueryExpressionType() { wstop__QueryExpressionType::soap_default(NULL); }
	virtual ~wstop__QueryExpressionType() { }
};
#endif

#ifndef SOAP_TYPE_tmd__Capabilities
#define SOAP_TYPE_tmd__Capabilities (729)
/* tmd:Capabilities */
class SOAP_CMAC tmd__Capabilities
{
public:
	int VideoSources;	/* optional attribute */
	int VideoOutputs;	/* optional attribute */
	int AudioSources;	/* optional attribute */
	int AudioOutputs;	/* optional attribute */
	int RelayOutputs;	/* optional attribute */
	int SerialPorts;	/* optional attribute */
	int DigitalInputs;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 729; } /* = unique id SOAP_TYPE_tmd__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__Capabilities() { tmd__Capabilities::soap_default(NULL); }
	virtual ~tmd__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptions
#define SOAP_TYPE_tmd__RelayOutputOptions (730)
/* tmd:RelayOutputOptions */
class SOAP_CMAC tmd__RelayOutputOptions
{
public:
	std::vector<enum tt__RelayMode >Mode;	/* required element of type tt:RelayMode */
	std::string *DelayTimes;	/* optional element of type tmd:DelayTimes */
	bool *Discrete;	/* optional element of type xsd:boolean */
	class tmd__RelayOutputOptionsExtension *Extension;	/* optional element of type tmd:RelayOutputOptionsExtension */
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 730; } /* = unique id SOAP_TYPE_tmd__RelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptions() { tmd__RelayOutputOptions::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__RelayOutputOptionsExtension
#define SOAP_TYPE_tmd__RelayOutputOptionsExtension (731)
/* tmd:RelayOutputOptionsExtension */
class SOAP_CMAC tmd__RelayOutputOptionsExtension
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 731; } /* = unique id SOAP_TYPE_tmd__RelayOutputOptionsExtension */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__RelayOutputOptionsExtension() { tmd__RelayOutputOptionsExtension::soap_default(NULL); }
	virtual ~tmd__RelayOutputOptionsExtension() { }
};
#endif

#ifndef SOAP_TYPE__tmd__union_SerialData
#define SOAP_TYPE__tmd__union_SerialData (1724)
/* xsd:choice */
union _tmd__union_SerialData
{
#define SOAP_UNION__tmd__union_SerialData_Binary	(1)
	xsd__base64Binary *Binary;
#define SOAP_UNION__tmd__union_SerialData_String	(2)
	std::string *String;
};
#endif

#ifndef SOAP_TYPE_tmd__SerialData
#define SOAP_TYPE_tmd__SerialData (732)
/* Choice: */
class SOAP_CMAC tmd__SerialData
{
public:
	int __union_SerialData;	/* union discriminant (of union defined below) */
	union _tmd__union_SerialData union_SerialData;	/* required element of type xsd:choice */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 732; } /* = unique id SOAP_TYPE_tmd__SerialData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialData() { tmd__SerialData::soap_default(NULL); }
	virtual ~tmd__SerialData() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfiguration
#define SOAP_TYPE_tmd__SerialPortConfiguration (734)
/* tmd:SerialPortConfiguration */
class SOAP_CMAC tmd__SerialPortConfiguration
{
public:
	int BaudRate;	/* required element of type xsd:int */
	enum tmd__ParityBit ParityBit;	/* required element of type tmd:ParityBit */
	int CharacterLength;	/* required element of type xsd:int */
	float StopBit;	/* required element of type xsd:float */
	std::string token;	/* required attribute */
	enum tmd__SerialPortType type;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 734; } /* = unique id SOAP_TYPE_tmd__SerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfiguration() { tmd__SerialPortConfiguration::soap_default(NULL); }
	virtual ~tmd__SerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPortConfigurationOptions
#define SOAP_TYPE_tmd__SerialPortConfigurationOptions (735)
/* tmd:SerialPortConfigurationOptions */
class SOAP_CMAC tmd__SerialPortConfigurationOptions
{
public:
	tt__IntList *BaudRateList;	/* required element of type tt:IntList */
	class tmd__ParityBitList *ParityBitList;	/* required element of type tmd:ParityBitList */
	tt__IntList *CharacterLengthList;	/* required element of type tt:IntList */
	tt__FloatList *StopBitList;	/* required element of type tt:FloatList */
	std::string token;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 735; } /* = unique id SOAP_TYPE_tmd__SerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPortConfigurationOptions() { tmd__SerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~tmd__SerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE_tmd__ParityBitList
#define SOAP_TYPE_tmd__ParityBitList (736)
/* tmd:ParityBitList */
class SOAP_CMAC tmd__ParityBitList
{
public:
	std::vector<enum tmd__ParityBit >Items;	/* optional element of type tmd:ParityBit */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 736; } /* = unique id SOAP_TYPE_tmd__ParityBitList */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__ParityBitList() { tmd__ParityBitList::soap_default(NULL); }
	virtual ~tmd__ParityBitList() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilities
#define SOAP_TYPE__tmd__GetServiceCapabilities (737)
/* tmd:GetServiceCapabilities */
class SOAP_CMAC _tmd__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 737; } /* = unique id SOAP_TYPE__tmd__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilities() { _tmd__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tmd__GetServiceCapabilitiesResponse (738)
/* tmd:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tmd__GetServiceCapabilitiesResponse
{
public:
	tmd__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 738; } /* = unique id SOAP_TYPE__tmd__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetServiceCapabilitiesResponse() { _tmd__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tmd__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptions
#define SOAP_TYPE__tmd__GetRelayOutputOptions (739)
/* tmd:GetRelayOutputOptions */
class SOAP_CMAC _tmd__GetRelayOutputOptions
{
public:
	std::string *RelayOutputToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 739; } /* = unique id SOAP_TYPE__tmd__GetRelayOutputOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptions() { _tmd__GetRelayOutputOptions::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetRelayOutputOptionsResponse
#define SOAP_TYPE__tmd__GetRelayOutputOptionsResponse (740)
/* tmd:GetRelayOutputOptionsResponse */
class SOAP_CMAC _tmd__GetRelayOutputOptionsResponse
{
public:
	std::vector<tmd__RelayOutputOptions * >RelayOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:RelayOutputOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 740; } /* = unique id SOAP_TYPE__tmd__GetRelayOutputOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetRelayOutputOptionsResponse() { _tmd__GetRelayOutputOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetRelayOutputOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputs
#define SOAP_TYPE__tmd__GetVideoOutputs (741)
/* tmd:GetVideoOutputs */
class SOAP_CMAC _tmd__GetVideoOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 741; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputs() { _tmd__GetVideoOutputs::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputsResponse
#define SOAP_TYPE__tmd__GetVideoOutputsResponse (742)
/* tmd:GetVideoOutputsResponse */
class SOAP_CMAC _tmd__GetVideoOutputsResponse
{
public:
	std::vector<class tt__VideoOutput * >VideoOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 742; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputsResponse() { _tmd__GetVideoOutputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfiguration
#define SOAP_TYPE__tmd__GetAudioSourceConfiguration (743)
/* tmd:GetAudioSourceConfiguration */
class SOAP_CMAC _tmd__GetAudioSourceConfiguration
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 743; } /* = unique id SOAP_TYPE__tmd__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfiguration() { _tmd__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse (744)
/* tmd:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *AudioSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 744; } /* = unique id SOAP_TYPE__tmd__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationResponse() { _tmd__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfiguration
#define SOAP_TYPE__tmd__GetAudioOutputConfiguration (745)
/* tmd:GetAudioOutputConfiguration */
class SOAP_CMAC _tmd__GetAudioOutputConfiguration
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 745; } /* = unique id SOAP_TYPE__tmd__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfiguration() { _tmd__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse (746)
/* tmd:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *AudioOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 746; } /* = unique id SOAP_TYPE__tmd__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationResponse() { _tmd__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfiguration
#define SOAP_TYPE__tmd__GetVideoSourceConfiguration (747)
/* tmd:GetVideoSourceConfiguration */
class SOAP_CMAC _tmd__GetVideoSourceConfiguration
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 747; } /* = unique id SOAP_TYPE__tmd__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfiguration() { _tmd__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse (748)
/* tmd:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *VideoSourceConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 748; } /* = unique id SOAP_TYPE__tmd__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationResponse() { _tmd__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfiguration
#define SOAP_TYPE__tmd__GetVideoOutputConfiguration (749)
/* tmd:GetVideoOutputConfiguration */
class SOAP_CMAC _tmd__GetVideoOutputConfiguration
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 749; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfiguration() { _tmd__GetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse (750)
/* tmd:GetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationResponse
{
public:
	class tt__VideoOutputConfiguration *VideoOutputConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 750; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationResponse() { _tmd__GetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfiguration
#define SOAP_TYPE__tmd__SetAudioSourceConfiguration (751)
/* tmd:SetAudioSourceConfiguration */
class SOAP_CMAC _tmd__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 751; } /* = unique id SOAP_TYPE__tmd__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfiguration() { _tmd__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse (752)
/* tmd:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 752; } /* = unique id SOAP_TYPE__tmd__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioSourceConfigurationResponse() { _tmd__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfiguration
#define SOAP_TYPE__tmd__SetAudioOutputConfiguration (753)
/* tmd:SetAudioOutputConfiguration */
class SOAP_CMAC _tmd__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 753; } /* = unique id SOAP_TYPE__tmd__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfiguration() { _tmd__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse (754)
/* tmd:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 754; } /* = unique id SOAP_TYPE__tmd__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetAudioOutputConfigurationResponse() { _tmd__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfiguration
#define SOAP_TYPE__tmd__SetVideoSourceConfiguration (755)
/* tmd:SetVideoSourceConfiguration */
class SOAP_CMAC _tmd__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 755; } /* = unique id SOAP_TYPE__tmd__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfiguration() { _tmd__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse (756)
/* tmd:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 756; } /* = unique id SOAP_TYPE__tmd__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoSourceConfigurationResponse() { _tmd__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfiguration
#define SOAP_TYPE__tmd__SetVideoOutputConfiguration (757)
/* tmd:SetVideoOutputConfiguration */
class SOAP_CMAC _tmd__SetVideoOutputConfiguration
{
public:
	tt__VideoOutputConfiguration *Configuration;	/* required element of type tt:VideoOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 757; } /* = unique id SOAP_TYPE__tmd__SetVideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfiguration() { _tmd__SetVideoOutputConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse
#define SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse (758)
/* tmd:SetVideoOutputConfigurationResponse */
class SOAP_CMAC _tmd__SetVideoOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 758; } /* = unique id SOAP_TYPE__tmd__SetVideoOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetVideoOutputConfigurationResponse() { _tmd__SetVideoOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetVideoOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions (759)
/* tmd:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptions
{
public:
	std::string VideoSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 759; } /* = unique id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptions() { _tmd__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse (760)
/* tmd:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *VideoSourceConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 760; } /* = unique id SOAP_TYPE__tmd__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoSourceConfigurationOptionsResponse() { _tmd__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions (761)
/* tmd:GetVideoOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptions
{
public:
	std::string VideoOutputToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 761; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptions() { _tmd__GetVideoOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse (762)
/* tmd:GetVideoOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetVideoOutputConfigurationOptionsResponse
{
public:
	tt__VideoOutputConfigurationOptions *VideoOutputConfigurationOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 762; } /* = unique id SOAP_TYPE__tmd__GetVideoOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetVideoOutputConfigurationOptionsResponse() { _tmd__GetVideoOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetVideoOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions (763)
/* tmd:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptions
{
public:
	std::string AudioSourceToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 763; } /* = unique id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptions() { _tmd__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse (764)
/* tmd:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *AudioSourceOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 764; } /* = unique id SOAP_TYPE__tmd__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioSourceConfigurationOptionsResponse() { _tmd__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions (765)
/* tmd:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptions
{
public:
	std::string AudioOutputToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 765; } /* = unique id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptions() { _tmd__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse (766)
/* tmd:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *AudioOutputOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 766; } /* = unique id SOAP_TYPE__tmd__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetAudioOutputConfigurationOptionsResponse() { _tmd__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettings
#define SOAP_TYPE__tmd__SetRelayOutputSettings (767)
/* tmd:SetRelayOutputSettings */
class SOAP_CMAC _tmd__SetRelayOutputSettings
{
public:
	tt__RelayOutput *RelayOutput;	/* required element of type tt:RelayOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 767; } /* = unique id SOAP_TYPE__tmd__SetRelayOutputSettings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettings() { _tmd__SetRelayOutputSettings::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettings() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetRelayOutputSettingsResponse
#define SOAP_TYPE__tmd__SetRelayOutputSettingsResponse (768)
/* tmd:SetRelayOutputSettingsResponse */
class SOAP_CMAC _tmd__SetRelayOutputSettingsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 768; } /* = unique id SOAP_TYPE__tmd__SetRelayOutputSettingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetRelayOutputSettingsResponse() { _tmd__SetRelayOutputSettingsResponse::soap_default(NULL); }
	virtual ~_tmd__SetRelayOutputSettingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputs
#define SOAP_TYPE__tmd__GetDigitalInputs (769)
/* tmd:GetDigitalInputs */
class SOAP_CMAC _tmd__GetDigitalInputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 769; } /* = unique id SOAP_TYPE__tmd__GetDigitalInputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputs() { _tmd__GetDigitalInputs::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputs() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetDigitalInputsResponse
#define SOAP_TYPE__tmd__GetDigitalInputsResponse (770)
/* tmd:GetDigitalInputsResponse */
class SOAP_CMAC _tmd__GetDigitalInputsResponse
{
public:
	std::vector<class tt__DigitalInput * >DigitalInputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:DigitalInput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 770; } /* = unique id SOAP_TYPE__tmd__GetDigitalInputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetDigitalInputsResponse() { _tmd__GetDigitalInputsResponse::soap_default(NULL); }
	virtual ~_tmd__GetDigitalInputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPorts
#define SOAP_TYPE__tmd__GetSerialPorts (771)
/* tmd:GetSerialPorts */
class SOAP_CMAC _tmd__GetSerialPorts
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 771; } /* = unique id SOAP_TYPE__tmd__GetSerialPorts */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPorts() { _tmd__GetSerialPorts::soap_default(NULL); }
	virtual ~_tmd__GetSerialPorts() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortsResponse
#define SOAP_TYPE__tmd__GetSerialPortsResponse (772)
/* tmd:GetSerialPortsResponse */
class SOAP_CMAC _tmd__GetSerialPortsResponse
{
public:
	std::vector<class tmd__SerialPort * >SerialPort;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialPort */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 772; } /* = unique id SOAP_TYPE__tmd__GetSerialPortsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortsResponse() { _tmd__GetSerialPortsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfiguration
#define SOAP_TYPE__tmd__GetSerialPortConfiguration (773)
/* tmd:GetSerialPortConfiguration */
class SOAP_CMAC _tmd__GetSerialPortConfiguration
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 773; } /* = unique id SOAP_TYPE__tmd__GetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfiguration() { _tmd__GetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationResponse (774)
/* tmd:GetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationResponse
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 774; } /* = unique id SOAP_TYPE__tmd__GetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationResponse() { _tmd__GetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfiguration
#define SOAP_TYPE__tmd__SetSerialPortConfiguration (775)
/* tmd:SetSerialPortConfiguration */
class SOAP_CMAC _tmd__SetSerialPortConfiguration
{
public:
	tmd__SerialPortConfiguration *SerialPortConfiguration;	/* required element of type tmd:SerialPortConfiguration */
	bool ForcePersistance;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 775; } /* = unique id SOAP_TYPE__tmd__SetSerialPortConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfiguration() { _tmd__SetSerialPortConfiguration::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SetSerialPortConfigurationResponse
#define SOAP_TYPE__tmd__SetSerialPortConfigurationResponse (776)
/* tmd:SetSerialPortConfigurationResponse */
class SOAP_CMAC _tmd__SetSerialPortConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 776; } /* = unique id SOAP_TYPE__tmd__SetSerialPortConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SetSerialPortConfigurationResponse() { _tmd__SetSerialPortConfigurationResponse::soap_default(NULL); }
	virtual ~_tmd__SetSerialPortConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptions (777)
/* tmd:GetSerialPortConfigurationOptions */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptions
{
public:
	std::string SerialPortToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 777; } /* = unique id SOAP_TYPE__tmd__GetSerialPortConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptions() { _tmd__GetSerialPortConfigurationOptions::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse
#define SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse (778)
/* tmd:GetSerialPortConfigurationOptionsResponse */
class SOAP_CMAC _tmd__GetSerialPortConfigurationOptionsResponse
{
public:
	tmd__SerialPortConfigurationOptions *SerialPortOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tmd:SerialPortConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 778; } /* = unique id SOAP_TYPE__tmd__GetSerialPortConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__GetSerialPortConfigurationOptionsResponse() { _tmd__GetSerialPortConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_tmd__GetSerialPortConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommand
#define SOAP_TYPE__tmd__SendReceiveSerialCommand (779)
/* tmd:SendReceiveSerialCommand */
class SOAP_CMAC _tmd__SendReceiveSerialCommand
{
public:
	tmd__SerialData *SerialData;	/* optional element of type tmd:SerialData */
	std::string *TimeOut;	/* optional element of type xsd:duration */
	std::string *DataLength;	/* optional element of type xsd:integer */
	std::string *Delimiter;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 779; } /* = unique id SOAP_TYPE__tmd__SendReceiveSerialCommand */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommand() { _tmd__SendReceiveSerialCommand::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommand() { }
};
#endif

#ifndef SOAP_TYPE__tmd__SendReceiveSerialCommandResponse
#define SOAP_TYPE__tmd__SendReceiveSerialCommandResponse (780)
/* tmd:SendReceiveSerialCommandResponse */
class SOAP_CMAC _tmd__SendReceiveSerialCommandResponse
{
public:
	tmd__SerialData *SerialData;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tmd:SerialData */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 780; } /* = unique id SOAP_TYPE__tmd__SendReceiveSerialCommandResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tmd__SendReceiveSerialCommandResponse() { _tmd__SendReceiveSerialCommandResponse::soap_default(NULL); }
	virtual ~_tmd__SendReceiveSerialCommandResponse() { }
};
#endif

#ifndef SOAP_TYPE_trt__Capabilities
#define SOAP_TYPE_trt__Capabilities (781)
/* trt:Capabilities */
class SOAP_CMAC trt__Capabilities
{
public:
	class trt__ProfileCapabilities *ProfileCapabilities;	/* required element of type trt:ProfileCapabilities */
	class trt__StreamingCapabilities *StreamingCapabilities;	/* required element of type trt:StreamingCapabilities */
	bool *SnapshotUri;	/* optional attribute */
	bool *Rotation;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 781; } /* = unique id SOAP_TYPE_trt__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__Capabilities() { trt__Capabilities::soap_default(NULL); }
	virtual ~trt__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__ProfileCapabilities
#define SOAP_TYPE_trt__ProfileCapabilities (782)
/* trt:ProfileCapabilities */
class SOAP_CMAC trt__ProfileCapabilities
{
public:
	int *MaximumNumberOfProfiles;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 782; } /* = unique id SOAP_TYPE_trt__ProfileCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__ProfileCapabilities() { trt__ProfileCapabilities::soap_default(NULL); }
	virtual ~trt__ProfileCapabilities() { }
};
#endif

#ifndef SOAP_TYPE_trt__StreamingCapabilities
#define SOAP_TYPE_trt__StreamingCapabilities (783)
/* trt:StreamingCapabilities */
class SOAP_CMAC trt__StreamingCapabilities
{
public:
	bool *RTPMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	bool *NonAggregateControl;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 783; } /* = unique id SOAP_TYPE_trt__StreamingCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trt__StreamingCapabilities() { trt__StreamingCapabilities::soap_default(NULL); }
	virtual ~trt__StreamingCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilities
#define SOAP_TYPE__trt__GetServiceCapabilities (784)
/* trt:GetServiceCapabilities */
class SOAP_CMAC _trt__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 784; } /* = unique id SOAP_TYPE__trt__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilities() { _trt__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trt__GetServiceCapabilitiesResponse (785)
/* trt:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trt__GetServiceCapabilitiesResponse
{
public:
	trt__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trt:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 785; } /* = unique id SOAP_TYPE__trt__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetServiceCapabilitiesResponse() { _trt__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trt__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSources
#define SOAP_TYPE__trt__GetVideoSources (786)
/* trt:GetVideoSources */
class SOAP_CMAC _trt__GetVideoSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 786; } /* = unique id SOAP_TYPE__trt__GetVideoSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSources() { _trt__GetVideoSources::soap_default(NULL); }
	virtual ~_trt__GetVideoSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourcesResponse
#define SOAP_TYPE__trt__GetVideoSourcesResponse (787)
/* trt:GetVideoSourcesResponse */
class SOAP_CMAC _trt__GetVideoSourcesResponse
{
public:
	std::vector<class tt__VideoSource * >VideoSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 787; } /* = unique id SOAP_TYPE__trt__GetVideoSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourcesResponse() { _trt__GetVideoSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSources
#define SOAP_TYPE__trt__GetAudioSources (788)
/* trt:GetAudioSources */
class SOAP_CMAC _trt__GetAudioSources
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 788; } /* = unique id SOAP_TYPE__trt__GetAudioSources */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSources() { _trt__GetAudioSources::soap_default(NULL); }
	virtual ~_trt__GetAudioSources() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourcesResponse
#define SOAP_TYPE__trt__GetAudioSourcesResponse (789)
/* trt:GetAudioSourcesResponse */
class SOAP_CMAC _trt__GetAudioSourcesResponse
{
public:
	std::vector<class tt__AudioSource * >AudioSources;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSource */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 789; } /* = unique id SOAP_TYPE__trt__GetAudioSourcesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourcesResponse() { _trt__GetAudioSourcesResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourcesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputs
#define SOAP_TYPE__trt__GetAudioOutputs (790)
/* trt:GetAudioOutputs */
class SOAP_CMAC _trt__GetAudioOutputs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 790; } /* = unique id SOAP_TYPE__trt__GetAudioOutputs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputs() { _trt__GetAudioOutputs::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputs() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputsResponse
#define SOAP_TYPE__trt__GetAudioOutputsResponse (791)
/* trt:GetAudioOutputsResponse */
class SOAP_CMAC _trt__GetAudioOutputsResponse
{
public:
	std::vector<class tt__AudioOutput * >AudioOutputs;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutput */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 791; } /* = unique id SOAP_TYPE__trt__GetAudioOutputsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputsResponse() { _trt__GetAudioOutputsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfile
#define SOAP_TYPE__trt__CreateProfile (792)
/* trt:CreateProfile */
class SOAP_CMAC _trt__CreateProfile
{
public:
	std::string Name;	/* required element of type tt:Name */
	std::string *Token;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 792; } /* = unique id SOAP_TYPE__trt__CreateProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfile() { _trt__CreateProfile::soap_default(NULL); }
	virtual ~_trt__CreateProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__CreateProfileResponse
#define SOAP_TYPE__trt__CreateProfileResponse (793)
/* trt:CreateProfileResponse */
class SOAP_CMAC _trt__CreateProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 793; } /* = unique id SOAP_TYPE__trt__CreateProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__CreateProfileResponse() { _trt__CreateProfileResponse::soap_default(NULL); }
	virtual ~_trt__CreateProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfile
#define SOAP_TYPE__trt__GetProfile (794)
/* trt:GetProfile */
class SOAP_CMAC _trt__GetProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 794; } /* = unique id SOAP_TYPE__trt__GetProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfile() { _trt__GetProfile::soap_default(NULL); }
	virtual ~_trt__GetProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfileResponse
#define SOAP_TYPE__trt__GetProfileResponse (795)
/* trt:GetProfileResponse */
class SOAP_CMAC _trt__GetProfileResponse
{
public:
	tt__Profile *Profile;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 795; } /* = unique id SOAP_TYPE__trt__GetProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfileResponse() { _trt__GetProfileResponse::soap_default(NULL); }
	virtual ~_trt__GetProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfiles
#define SOAP_TYPE__trt__GetProfiles (796)
/* trt:GetProfiles */
class SOAP_CMAC _trt__GetProfiles
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 796; } /* = unique id SOAP_TYPE__trt__GetProfiles */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfiles() { _trt__GetProfiles::soap_default(NULL); }
	virtual ~_trt__GetProfiles() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetProfilesResponse
#define SOAP_TYPE__trt__GetProfilesResponse (797)
/* trt:GetProfilesResponse */
class SOAP_CMAC _trt__GetProfilesResponse
{
public:
	std::vector<tt__Profile * >Profiles;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Profile */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 797; } /* = unique id SOAP_TYPE__trt__GetProfilesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetProfilesResponse() { _trt__GetProfilesResponse::soap_default(NULL); }
	virtual ~_trt__GetProfilesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfiguration
#define SOAP_TYPE__trt__AddVideoEncoderConfiguration (798)
/* trt:AddVideoEncoderConfiguration */
class SOAP_CMAC _trt__AddVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 798; } /* = unique id SOAP_TYPE__trt__AddVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfiguration() { _trt__AddVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse (799)
/* trt:AddVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 799; } /* = unique id SOAP_TYPE__trt__AddVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoEncoderConfigurationResponse() { _trt__AddVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE__trt__RemoveVideoEncoderConfiguration (800)
/* trt:RemoveVideoEncoderConfiguration */
class SOAP_CMAC _trt__RemoveVideoEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 800; } /* = unique id SOAP_TYPE__trt__RemoveVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfiguration() { _trt__RemoveVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse (801)
/* trt:RemoveVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 801; } /* = unique id SOAP_TYPE__trt__RemoveVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoEncoderConfigurationResponse() { _trt__RemoveVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfiguration
#define SOAP_TYPE__trt__AddVideoSourceConfiguration (802)
/* trt:AddVideoSourceConfiguration */
class SOAP_CMAC _trt__AddVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 802; } /* = unique id SOAP_TYPE__trt__AddVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfiguration() { _trt__AddVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__AddVideoSourceConfigurationResponse (803)
/* trt:AddVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__AddVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 803; } /* = unique id SOAP_TYPE__trt__AddVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoSourceConfigurationResponse() { _trt__AddVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE__trt__RemoveVideoSourceConfiguration (804)
/* trt:RemoveVideoSourceConfiguration */
class SOAP_CMAC _trt__RemoveVideoSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 804; } /* = unique id SOAP_TYPE__trt__RemoveVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfiguration() { _trt__RemoveVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse (805)
/* trt:RemoveVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 805; } /* = unique id SOAP_TYPE__trt__RemoveVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoSourceConfigurationResponse() { _trt__RemoveVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfiguration
#define SOAP_TYPE__trt__AddAudioEncoderConfiguration (806)
/* trt:AddAudioEncoderConfiguration */
class SOAP_CMAC _trt__AddAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 806; } /* = unique id SOAP_TYPE__trt__AddAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfiguration() { _trt__AddAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse (807)
/* trt:AddAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 807; } /* = unique id SOAP_TYPE__trt__AddAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioEncoderConfigurationResponse() { _trt__AddAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioEncoderConfiguration (808)
/* trt:RemoveAudioEncoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioEncoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 808; } /* = unique id SOAP_TYPE__trt__RemoveAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfiguration() { _trt__RemoveAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse (809)
/* trt:RemoveAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 809; } /* = unique id SOAP_TYPE__trt__RemoveAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioEncoderConfigurationResponse() { _trt__RemoveAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfiguration
#define SOAP_TYPE__trt__AddAudioSourceConfiguration (810)
/* trt:AddAudioSourceConfiguration */
class SOAP_CMAC _trt__AddAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 810; } /* = unique id SOAP_TYPE__trt__AddAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfiguration() { _trt__AddAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__AddAudioSourceConfigurationResponse (811)
/* trt:AddAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__AddAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 811; } /* = unique id SOAP_TYPE__trt__AddAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioSourceConfigurationResponse() { _trt__AddAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE__trt__RemoveAudioSourceConfiguration (812)
/* trt:RemoveAudioSourceConfiguration */
class SOAP_CMAC _trt__RemoveAudioSourceConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 812; } /* = unique id SOAP_TYPE__trt__RemoveAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfiguration() { _trt__RemoveAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse (813)
/* trt:RemoveAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 813; } /* = unique id SOAP_TYPE__trt__RemoveAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioSourceConfigurationResponse() { _trt__RemoveAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfiguration
#define SOAP_TYPE__trt__AddPTZConfiguration (814)
/* trt:AddPTZConfiguration */
class SOAP_CMAC _trt__AddPTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 814; } /* = unique id SOAP_TYPE__trt__AddPTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfiguration() { _trt__AddPTZConfiguration::soap_default(NULL); }
	virtual ~_trt__AddPTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddPTZConfigurationResponse
#define SOAP_TYPE__trt__AddPTZConfigurationResponse (815)
/* trt:AddPTZConfigurationResponse */
class SOAP_CMAC _trt__AddPTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 815; } /* = unique id SOAP_TYPE__trt__AddPTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddPTZConfigurationResponse() { _trt__AddPTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddPTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfiguration
#define SOAP_TYPE__trt__RemovePTZConfiguration (816)
/* trt:RemovePTZConfiguration */
class SOAP_CMAC _trt__RemovePTZConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 816; } /* = unique id SOAP_TYPE__trt__RemovePTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfiguration() { _trt__RemovePTZConfiguration::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemovePTZConfigurationResponse
#define SOAP_TYPE__trt__RemovePTZConfigurationResponse (817)
/* trt:RemovePTZConfigurationResponse */
class SOAP_CMAC _trt__RemovePTZConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 817; } /* = unique id SOAP_TYPE__trt__RemovePTZConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemovePTZConfigurationResponse() { _trt__RemovePTZConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemovePTZConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__AddVideoAnalyticsConfiguration (818)
/* trt:AddVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__AddVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 818; } /* = unique id SOAP_TYPE__trt__AddVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfiguration() { _trt__AddVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse (819)
/* trt:AddVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__AddVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 819; } /* = unique id SOAP_TYPE__trt__AddVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddVideoAnalyticsConfigurationResponse() { _trt__AddVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration (820)
/* trt:RemoveVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 820; } /* = unique id SOAP_TYPE__trt__RemoveVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfiguration() { _trt__RemoveVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse (821)
/* trt:RemoveVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__RemoveVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 821; } /* = unique id SOAP_TYPE__trt__RemoveVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveVideoAnalyticsConfigurationResponse() { _trt__RemoveVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfiguration
#define SOAP_TYPE__trt__AddMetadataConfiguration (822)
/* trt:AddMetadataConfiguration */
class SOAP_CMAC _trt__AddMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 822; } /* = unique id SOAP_TYPE__trt__AddMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfiguration() { _trt__AddMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddMetadataConfigurationResponse
#define SOAP_TYPE__trt__AddMetadataConfigurationResponse (823)
/* trt:AddMetadataConfigurationResponse */
class SOAP_CMAC _trt__AddMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 823; } /* = unique id SOAP_TYPE__trt__AddMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddMetadataConfigurationResponse() { _trt__AddMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfiguration
#define SOAP_TYPE__trt__RemoveMetadataConfiguration (824)
/* trt:RemoveMetadataConfiguration */
class SOAP_CMAC _trt__RemoveMetadataConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 824; } /* = unique id SOAP_TYPE__trt__RemoveMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfiguration() { _trt__RemoveMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveMetadataConfigurationResponse
#define SOAP_TYPE__trt__RemoveMetadataConfigurationResponse (825)
/* trt:RemoveMetadataConfigurationResponse */
class SOAP_CMAC _trt__RemoveMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 825; } /* = unique id SOAP_TYPE__trt__RemoveMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveMetadataConfigurationResponse() { _trt__RemoveMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfiguration
#define SOAP_TYPE__trt__AddAudioOutputConfiguration (826)
/* trt:AddAudioOutputConfiguration */
class SOAP_CMAC _trt__AddAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 826; } /* = unique id SOAP_TYPE__trt__AddAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfiguration() { _trt__AddAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__AddAudioOutputConfigurationResponse (827)
/* trt:AddAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__AddAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 827; } /* = unique id SOAP_TYPE__trt__AddAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioOutputConfigurationResponse() { _trt__AddAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE__trt__RemoveAudioOutputConfiguration (828)
/* trt:RemoveAudioOutputConfiguration */
class SOAP_CMAC _trt__RemoveAudioOutputConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 828; } /* = unique id SOAP_TYPE__trt__RemoveAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfiguration() { _trt__RemoveAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse (829)
/* trt:RemoveAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 829; } /* = unique id SOAP_TYPE__trt__RemoveAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioOutputConfigurationResponse() { _trt__RemoveAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfiguration
#define SOAP_TYPE__trt__AddAudioDecoderConfiguration (830)
/* trt:AddAudioDecoderConfiguration */
class SOAP_CMAC _trt__AddAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 830; } /* = unique id SOAP_TYPE__trt__AddAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfiguration() { _trt__AddAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse (831)
/* trt:AddAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__AddAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 831; } /* = unique id SOAP_TYPE__trt__AddAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__AddAudioDecoderConfigurationResponse() { _trt__AddAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__AddAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE__trt__RemoveAudioDecoderConfiguration (832)
/* trt:RemoveAudioDecoderConfiguration */
class SOAP_CMAC _trt__RemoveAudioDecoderConfiguration
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 832; } /* = unique id SOAP_TYPE__trt__RemoveAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfiguration() { _trt__RemoveAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse (833)
/* trt:RemoveAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__RemoveAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 833; } /* = unique id SOAP_TYPE__trt__RemoveAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__RemoveAudioDecoderConfigurationResponse() { _trt__RemoveAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__RemoveAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfile
#define SOAP_TYPE__trt__DeleteProfile (834)
/* trt:DeleteProfile */
class SOAP_CMAC _trt__DeleteProfile
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 834; } /* = unique id SOAP_TYPE__trt__DeleteProfile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfile() { _trt__DeleteProfile::soap_default(NULL); }
	virtual ~_trt__DeleteProfile() { }
};
#endif

#ifndef SOAP_TYPE__trt__DeleteProfileResponse
#define SOAP_TYPE__trt__DeleteProfileResponse (835)
/* trt:DeleteProfileResponse */
class SOAP_CMAC _trt__DeleteProfileResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 835; } /* = unique id SOAP_TYPE__trt__DeleteProfileResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__DeleteProfileResponse() { _trt__DeleteProfileResponse::soap_default(NULL); }
	virtual ~_trt__DeleteProfileResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetVideoEncoderConfigurations (836)
/* trt:GetVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetVideoEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 836; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurations() { _trt__GetVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse (837)
/* trt:GetVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 837; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationsResponse() { _trt__GetVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurations
#define SOAP_TYPE__trt__GetVideoSourceConfigurations (838)
/* trt:GetVideoSourceConfigurations */
class SOAP_CMAC _trt__GetVideoSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 838; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurations() { _trt__GetVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse (839)
/* trt:GetVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 839; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationsResponse() { _trt__GetVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetAudioEncoderConfigurations (840)
/* trt:GetAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetAudioEncoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 840; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurations() { _trt__GetAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse (841)
/* trt:GetAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 841; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationsResponse() { _trt__GetAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurations
#define SOAP_TYPE__trt__GetAudioSourceConfigurations (842)
/* trt:GetAudioSourceConfigurations */
class SOAP_CMAC _trt__GetAudioSourceConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 842; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurations() { _trt__GetAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse (843)
/* trt:GetAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 843; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationsResponse() { _trt__GetAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurations (844)
/* trt:GetVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 844; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurations() { _trt__GetVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse (845)
/* trt:GetVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 845; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationsResponse() { _trt__GetVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurations
#define SOAP_TYPE__trt__GetMetadataConfigurations (846)
/* trt:GetMetadataConfigurations */
class SOAP_CMAC _trt__GetMetadataConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 846; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurations() { _trt__GetMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationsResponse (847)
/* trt:GetMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 847; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationsResponse() { _trt__GetMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurations
#define SOAP_TYPE__trt__GetAudioOutputConfigurations (848)
/* trt:GetAudioOutputConfigurations */
class SOAP_CMAC _trt__GetAudioOutputConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 848; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurations() { _trt__GetAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse (849)
/* trt:GetAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 849; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationsResponse() { _trt__GetAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetAudioDecoderConfigurations (850)
/* trt:GetAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetAudioDecoderConfigurations
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 850; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurations() { _trt__GetAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse (851)
/* trt:GetAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 851; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationsResponse() { _trt__GetAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfiguration
#define SOAP_TYPE__trt__GetVideoSourceConfiguration (852)
/* trt:GetVideoSourceConfiguration */
class SOAP_CMAC _trt__GetVideoSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 852; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfiguration() { _trt__GetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationResponse (853)
/* trt:GetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationResponse
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 853; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationResponse() { _trt__GetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfiguration
#define SOAP_TYPE__trt__GetVideoEncoderConfiguration (854)
/* trt:GetVideoEncoderConfiguration */
class SOAP_CMAC _trt__GetVideoEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 854; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfiguration() { _trt__GetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse (855)
/* trt:GetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationResponse
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 855; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationResponse() { _trt__GetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfiguration
#define SOAP_TYPE__trt__GetAudioSourceConfiguration (856)
/* trt:GetAudioSourceConfiguration */
class SOAP_CMAC _trt__GetAudioSourceConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 856; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfiguration() { _trt__GetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationResponse (857)
/* trt:GetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationResponse
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 857; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationResponse() { _trt__GetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfiguration
#define SOAP_TYPE__trt__GetAudioEncoderConfiguration (858)
/* trt:GetAudioEncoderConfiguration */
class SOAP_CMAC _trt__GetAudioEncoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 858; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfiguration() { _trt__GetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse (859)
/* trt:GetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationResponse
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 859; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationResponse() { _trt__GetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__GetVideoAnalyticsConfiguration (860)
/* trt:GetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__GetVideoAnalyticsConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 860; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfiguration() { _trt__GetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse (861)
/* trt:GetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__GetVideoAnalyticsConfigurationResponse
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 861; } /* = unique id SOAP_TYPE__trt__GetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoAnalyticsConfigurationResponse() { _trt__GetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfiguration
#define SOAP_TYPE__trt__GetMetadataConfiguration (862)
/* trt:GetMetadataConfiguration */
class SOAP_CMAC _trt__GetMetadataConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 862; } /* = unique id SOAP_TYPE__trt__GetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfiguration() { _trt__GetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationResponse (863)
/* trt:GetMetadataConfigurationResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationResponse
{
public:
	tt__MetadataConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 863; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationResponse() { _trt__GetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfiguration
#define SOAP_TYPE__trt__GetAudioOutputConfiguration (864)
/* trt:GetAudioOutputConfiguration */
class SOAP_CMAC _trt__GetAudioOutputConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 864; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfiguration() { _trt__GetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationResponse (865)
/* trt:GetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationResponse
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 865; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationResponse() { _trt__GetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfiguration
#define SOAP_TYPE__trt__GetAudioDecoderConfiguration (866)
/* trt:GetAudioDecoderConfiguration */
class SOAP_CMAC _trt__GetAudioDecoderConfiguration
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 866; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfiguration() { _trt__GetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse (867)
/* trt:GetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationResponse
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 867; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationResponse() { _trt__GetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations (868)
/* trt:GetCompatibleVideoEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 868; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurations() { _trt__GetCompatibleVideoEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse (869)
/* trt:GetCompatibleVideoEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoEncoderConfigurationsResponse
{
public:
	std::vector<tt__VideoEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 869; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoEncoderConfigurationsResponse() { _trt__GetCompatibleVideoEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations (870)
/* trt:GetCompatibleVideoSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 870; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurations() { _trt__GetCompatibleVideoSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse (871)
/* trt:GetCompatibleVideoSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoSourceConfigurationsResponse
{
public:
	std::vector<tt__VideoSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 871; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoSourceConfigurationsResponse() { _trt__GetCompatibleVideoSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations (872)
/* trt:GetCompatibleAudioEncoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 872; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurations() { _trt__GetCompatibleAudioEncoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse (873)
/* trt:GetCompatibleAudioEncoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioEncoderConfigurationsResponse
{
public:
	std::vector<tt__AudioEncoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioEncoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 873; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioEncoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioEncoderConfigurationsResponse() { _trt__GetCompatibleAudioEncoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioEncoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations (874)
/* trt:GetCompatibleAudioSourceConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 874; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurations() { _trt__GetCompatibleAudioSourceConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse (875)
/* trt:GetCompatibleAudioSourceConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioSourceConfigurationsResponse
{
public:
	std::vector<tt__AudioSourceConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioSourceConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 875; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioSourceConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioSourceConfigurationsResponse() { _trt__GetCompatibleAudioSourceConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioSourceConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations (876)
/* trt:GetCompatibleVideoAnalyticsConfigurations */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 876; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurations() { _trt__GetCompatibleVideoAnalyticsConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse (877)
/* trt:GetCompatibleVideoAnalyticsConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleVideoAnalyticsConfigurationsResponse
{
public:
	std::vector<tt__VideoAnalyticsConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:VideoAnalyticsConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 877; } /* = unique id SOAP_TYPE__trt__GetCompatibleVideoAnalyticsConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { _trt__GetCompatibleVideoAnalyticsConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleVideoAnalyticsConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurations (878)
/* trt:GetCompatibleMetadataConfigurations */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 878; } /* = unique id SOAP_TYPE__trt__GetCompatibleMetadataConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurations() { _trt__GetCompatibleMetadataConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse (879)
/* trt:GetCompatibleMetadataConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleMetadataConfigurationsResponse
{
public:
	std::vector<tt__MetadataConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MetadataConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 879; } /* = unique id SOAP_TYPE__trt__GetCompatibleMetadataConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleMetadataConfigurationsResponse() { _trt__GetCompatibleMetadataConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleMetadataConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations (880)
/* trt:GetCompatibleAudioOutputConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 880; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurations() { _trt__GetCompatibleAudioOutputConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse (881)
/* trt:GetCompatibleAudioOutputConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioOutputConfigurationsResponse
{
public:
	std::vector<tt__AudioOutputConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioOutputConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 881; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioOutputConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioOutputConfigurationsResponse() { _trt__GetCompatibleAudioOutputConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioOutputConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations (882)
/* trt:GetCompatibleAudioDecoderConfigurations */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurations
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 882; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurations() { _trt__GetCompatibleAudioDecoderConfigurations::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse
#define SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse (883)
/* trt:GetCompatibleAudioDecoderConfigurationsResponse */
class SOAP_CMAC _trt__GetCompatibleAudioDecoderConfigurationsResponse
{
public:
	std::vector<tt__AudioDecoderConfiguration * >Configurations;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:AudioDecoderConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 883; } /* = unique id SOAP_TYPE__trt__GetCompatibleAudioDecoderConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetCompatibleAudioDecoderConfigurationsResponse() { _trt__GetCompatibleAudioDecoderConfigurationsResponse::soap_default(NULL); }
	virtual ~_trt__GetCompatibleAudioDecoderConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfiguration
#define SOAP_TYPE__trt__SetVideoEncoderConfiguration (884)
/* trt:SetVideoEncoderConfiguration */
class SOAP_CMAC _trt__SetVideoEncoderConfiguration
{
public:
	tt__VideoEncoderConfiguration *Configuration;	/* required element of type tt:VideoEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 884; } /* = unique id SOAP_TYPE__trt__SetVideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfiguration() { _trt__SetVideoEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse (885)
/* trt:SetVideoEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetVideoEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 885; } /* = unique id SOAP_TYPE__trt__SetVideoEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoEncoderConfigurationResponse() { _trt__SetVideoEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfiguration
#define SOAP_TYPE__trt__SetVideoSourceConfiguration (886)
/* trt:SetVideoSourceConfiguration */
class SOAP_CMAC _trt__SetVideoSourceConfiguration
{
public:
	tt__VideoSourceConfiguration *Configuration;	/* required element of type tt:VideoSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 886; } /* = unique id SOAP_TYPE__trt__SetVideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfiguration() { _trt__SetVideoSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoSourceConfigurationResponse
#define SOAP_TYPE__trt__SetVideoSourceConfigurationResponse (887)
/* trt:SetVideoSourceConfigurationResponse */
class SOAP_CMAC _trt__SetVideoSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 887; } /* = unique id SOAP_TYPE__trt__SetVideoSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoSourceConfigurationResponse() { _trt__SetVideoSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfiguration
#define SOAP_TYPE__trt__SetAudioEncoderConfiguration (888)
/* trt:SetAudioEncoderConfiguration */
class SOAP_CMAC _trt__SetAudioEncoderConfiguration
{
public:
	tt__AudioEncoderConfiguration *Configuration;	/* required element of type tt:AudioEncoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 888; } /* = unique id SOAP_TYPE__trt__SetAudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfiguration() { _trt__SetAudioEncoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse (889)
/* trt:SetAudioEncoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioEncoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 889; } /* = unique id SOAP_TYPE__trt__SetAudioEncoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioEncoderConfigurationResponse() { _trt__SetAudioEncoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioEncoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfiguration
#define SOAP_TYPE__trt__SetAudioSourceConfiguration (890)
/* trt:SetAudioSourceConfiguration */
class SOAP_CMAC _trt__SetAudioSourceConfiguration
{
public:
	tt__AudioSourceConfiguration *Configuration;	/* required element of type tt:AudioSourceConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 890; } /* = unique id SOAP_TYPE__trt__SetAudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfiguration() { _trt__SetAudioSourceConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioSourceConfigurationResponse
#define SOAP_TYPE__trt__SetAudioSourceConfigurationResponse (891)
/* trt:SetAudioSourceConfigurationResponse */
class SOAP_CMAC _trt__SetAudioSourceConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 891; } /* = unique id SOAP_TYPE__trt__SetAudioSourceConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioSourceConfigurationResponse() { _trt__SetAudioSourceConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioSourceConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE__trt__SetVideoAnalyticsConfiguration (892)
/* trt:SetVideoAnalyticsConfiguration */
class SOAP_CMAC _trt__SetVideoAnalyticsConfiguration
{
public:
	tt__VideoAnalyticsConfiguration *Configuration;	/* required element of type tt:VideoAnalyticsConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 892; } /* = unique id SOAP_TYPE__trt__SetVideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfiguration() { _trt__SetVideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse
#define SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse (893)
/* trt:SetVideoAnalyticsConfigurationResponse */
class SOAP_CMAC _trt__SetVideoAnalyticsConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 893; } /* = unique id SOAP_TYPE__trt__SetVideoAnalyticsConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetVideoAnalyticsConfigurationResponse() { _trt__SetVideoAnalyticsConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetVideoAnalyticsConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfiguration
#define SOAP_TYPE__trt__SetMetadataConfiguration (894)
/* trt:SetMetadataConfiguration */
class SOAP_CMAC _trt__SetMetadataConfiguration
{
public:
	tt__MetadataConfiguration *Configuration;	/* required element of type tt:MetadataConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 894; } /* = unique id SOAP_TYPE__trt__SetMetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfiguration() { _trt__SetMetadataConfiguration::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetMetadataConfigurationResponse
#define SOAP_TYPE__trt__SetMetadataConfigurationResponse (895)
/* trt:SetMetadataConfigurationResponse */
class SOAP_CMAC _trt__SetMetadataConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 895; } /* = unique id SOAP_TYPE__trt__SetMetadataConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetMetadataConfigurationResponse() { _trt__SetMetadataConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetMetadataConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfiguration
#define SOAP_TYPE__trt__SetAudioOutputConfiguration (896)
/* trt:SetAudioOutputConfiguration */
class SOAP_CMAC _trt__SetAudioOutputConfiguration
{
public:
	tt__AudioOutputConfiguration *Configuration;	/* required element of type tt:AudioOutputConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 896; } /* = unique id SOAP_TYPE__trt__SetAudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfiguration() { _trt__SetAudioOutputConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioOutputConfigurationResponse
#define SOAP_TYPE__trt__SetAudioOutputConfigurationResponse (897)
/* trt:SetAudioOutputConfigurationResponse */
class SOAP_CMAC _trt__SetAudioOutputConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 897; } /* = unique id SOAP_TYPE__trt__SetAudioOutputConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioOutputConfigurationResponse() { _trt__SetAudioOutputConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioOutputConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfiguration
#define SOAP_TYPE__trt__SetAudioDecoderConfiguration (898)
/* trt:SetAudioDecoderConfiguration */
class SOAP_CMAC _trt__SetAudioDecoderConfiguration
{
public:
	tt__AudioDecoderConfiguration *Configuration;	/* required element of type tt:AudioDecoderConfiguration */
	bool ForcePersistence;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 898; } /* = unique id SOAP_TYPE__trt__SetAudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfiguration() { _trt__SetAudioDecoderConfiguration::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse
#define SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse (899)
/* trt:SetAudioDecoderConfigurationResponse */
class SOAP_CMAC _trt__SetAudioDecoderConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 899; } /* = unique id SOAP_TYPE__trt__SetAudioDecoderConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetAudioDecoderConfigurationResponse() { _trt__SetAudioDecoderConfigurationResponse::soap_default(NULL); }
	virtual ~_trt__SetAudioDecoderConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptions (900)
/* trt:GetVideoSourceConfigurationOptions */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 900; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptions() { _trt__GetVideoSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse (901)
/* trt:GetVideoSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoSourceConfigurationOptionsResponse
{
public:
	tt__VideoSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 901; } /* = unique id SOAP_TYPE__trt__GetVideoSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoSourceConfigurationOptionsResponse() { _trt__GetVideoSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions (902)
/* trt:GetVideoEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 902; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptions() { _trt__GetVideoEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse (903)
/* trt:GetVideoEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetVideoEncoderConfigurationOptionsResponse
{
public:
	tt__VideoEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:VideoEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 903; } /* = unique id SOAP_TYPE__trt__GetVideoEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetVideoEncoderConfigurationOptionsResponse() { _trt__GetVideoEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetVideoEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptions (904)
/* trt:GetAudioSourceConfigurationOptions */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 904; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptions() { _trt__GetAudioSourceConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse (905)
/* trt:GetAudioSourceConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioSourceConfigurationOptionsResponse
{
public:
	tt__AudioSourceConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioSourceConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 905; } /* = unique id SOAP_TYPE__trt__GetAudioSourceConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioSourceConfigurationOptionsResponse() { _trt__GetAudioSourceConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioSourceConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions (906)
/* trt:GetAudioEncoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 906; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptions() { _trt__GetAudioEncoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse (907)
/* trt:GetAudioEncoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioEncoderConfigurationOptionsResponse
{
public:
	tt__AudioEncoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioEncoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 907; } /* = unique id SOAP_TYPE__trt__GetAudioEncoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioEncoderConfigurationOptionsResponse() { _trt__GetAudioEncoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioEncoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptions
#define SOAP_TYPE__trt__GetMetadataConfigurationOptions (908)
/* trt:GetMetadataConfigurationOptions */
class SOAP_CMAC _trt__GetMetadataConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 908; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptions() { _trt__GetMetadataConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse (909)
/* trt:GetMetadataConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetMetadataConfigurationOptionsResponse
{
public:
	tt__MetadataConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MetadataConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 909; } /* = unique id SOAP_TYPE__trt__GetMetadataConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetMetadataConfigurationOptionsResponse() { _trt__GetMetadataConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetMetadataConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptions (910)
/* trt:GetAudioOutputConfigurationOptions */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 910; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptions() { _trt__GetAudioOutputConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse (911)
/* trt:GetAudioOutputConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioOutputConfigurationOptionsResponse
{
public:
	tt__AudioOutputConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioOutputConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 911; } /* = unique id SOAP_TYPE__trt__GetAudioOutputConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioOutputConfigurationOptionsResponse() { _trt__GetAudioOutputConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioOutputConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions (912)
/* trt:GetAudioDecoderConfigurationOptions */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptions
{
public:
	std::string *ConfigurationToken;	/* optional element of type tt:ReferenceToken */
	std::string *ProfileToken;	/* optional element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 912; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptions() { _trt__GetAudioDecoderConfigurationOptions::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptions() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse
#define SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse (913)
/* trt:GetAudioDecoderConfigurationOptionsResponse */
class SOAP_CMAC _trt__GetAudioDecoderConfigurationOptionsResponse
{
public:
	tt__AudioDecoderConfigurationOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:AudioDecoderConfigurationOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 913; } /* = unique id SOAP_TYPE__trt__GetAudioDecoderConfigurationOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetAudioDecoderConfigurationOptionsResponse() { _trt__GetAudioDecoderConfigurationOptionsResponse::soap_default(NULL); }
	virtual ~_trt__GetAudioDecoderConfigurationOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances (914)
/* trt:GetGuaranteedNumberOfVideoEncoderInstances */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 914; } /* = unique id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstances() { _trt__GetGuaranteedNumberOfVideoEncoderInstances::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstances() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
#define SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse (915)
/* trt:GetGuaranteedNumberOfVideoEncoderInstancesResponse */
class SOAP_CMAC _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse
{
public:
	int TotalNumber;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	int *JPEG;	/* optional element of type xsd:int */
	int *H264;	/* optional element of type xsd:int */
	int *MPEG4;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 915; } /* = unique id SOAP_TYPE__trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { _trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse::soap_default(NULL); }
	virtual ~_trt__GetGuaranteedNumberOfVideoEncoderInstancesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUri
#define SOAP_TYPE__trt__GetStreamUri (916)
/* trt:GetStreamUri */
class SOAP_CMAC _trt__GetStreamUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 916; } /* = unique id SOAP_TYPE__trt__GetStreamUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUri() { _trt__GetStreamUri::soap_default(NULL); }
	virtual ~_trt__GetStreamUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetStreamUriResponse
#define SOAP_TYPE__trt__GetStreamUriResponse (917)
/* trt:GetStreamUriResponse */
class SOAP_CMAC _trt__GetStreamUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 917; } /* = unique id SOAP_TYPE__trt__GetStreamUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetStreamUriResponse() { _trt__GetStreamUriResponse::soap_default(NULL); }
	virtual ~_trt__GetStreamUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreaming
#define SOAP_TYPE__trt__StartMulticastStreaming (918)
/* trt:StartMulticastStreaming */
class SOAP_CMAC _trt__StartMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 918; } /* = unique id SOAP_TYPE__trt__StartMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreaming() { _trt__StartMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StartMulticastStreamingResponse
#define SOAP_TYPE__trt__StartMulticastStreamingResponse (919)
/* trt:StartMulticastStreamingResponse */
class SOAP_CMAC _trt__StartMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 919; } /* = unique id SOAP_TYPE__trt__StartMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StartMulticastStreamingResponse() { _trt__StartMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StartMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreaming
#define SOAP_TYPE__trt__StopMulticastStreaming (920)
/* trt:StopMulticastStreaming */
class SOAP_CMAC _trt__StopMulticastStreaming
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 920; } /* = unique id SOAP_TYPE__trt__StopMulticastStreaming */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreaming() { _trt__StopMulticastStreaming::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreaming() { }
};
#endif

#ifndef SOAP_TYPE__trt__StopMulticastStreamingResponse
#define SOAP_TYPE__trt__StopMulticastStreamingResponse (921)
/* trt:StopMulticastStreamingResponse */
class SOAP_CMAC _trt__StopMulticastStreamingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 921; } /* = unique id SOAP_TYPE__trt__StopMulticastStreamingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__StopMulticastStreamingResponse() { _trt__StopMulticastStreamingResponse::soap_default(NULL); }
	virtual ~_trt__StopMulticastStreamingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPoint
#define SOAP_TYPE__trt__SetSynchronizationPoint (922)
/* trt:SetSynchronizationPoint */
class SOAP_CMAC _trt__SetSynchronizationPoint
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 922; } /* = unique id SOAP_TYPE__trt__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPoint() { _trt__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__trt__SetSynchronizationPointResponse
#define SOAP_TYPE__trt__SetSynchronizationPointResponse (923)
/* trt:SetSynchronizationPointResponse */
class SOAP_CMAC _trt__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 923; } /* = unique id SOAP_TYPE__trt__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__SetSynchronizationPointResponse() { _trt__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_trt__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUri
#define SOAP_TYPE__trt__GetSnapshotUri (924)
/* trt:GetSnapshotUri */
class SOAP_CMAC _trt__GetSnapshotUri
{
public:
	std::string ProfileToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 924; } /* = unique id SOAP_TYPE__trt__GetSnapshotUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUri() { _trt__GetSnapshotUri::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUri() { }
};
#endif

#ifndef SOAP_TYPE__trt__GetSnapshotUriResponse
#define SOAP_TYPE__trt__GetSnapshotUriResponse (925)
/* trt:GetSnapshotUriResponse */
class SOAP_CMAC _trt__GetSnapshotUriResponse
{
public:
	tt__MediaUri *MediaUri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:MediaUri */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 925; } /* = unique id SOAP_TYPE__trt__GetSnapshotUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trt__GetSnapshotUriResponse() { _trt__GetSnapshotUriResponse::soap_default(NULL); }
	virtual ~_trt__GetSnapshotUriResponse() { }
};
#endif

#ifndef SOAP_TYPE_tls__Capabilities
#define SOAP_TYPE_tls__Capabilities (926)
/* tls:Capabilities */
class SOAP_CMAC tls__Capabilities
{
public:
	bool *FixedLayout;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 926; } /* = unique id SOAP_TYPE_tls__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tls__Capabilities() { tls__Capabilities::soap_default(NULL); }
	virtual ~tls__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetServiceCapabilities
#define SOAP_TYPE__tls__GetServiceCapabilities (927)
/* tls:GetServiceCapabilities */
class SOAP_CMAC _tls__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 927; } /* = unique id SOAP_TYPE__tls__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetServiceCapabilities() { _tls__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tls__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tls__GetServiceCapabilitiesResponse (928)
/* tls:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tls__GetServiceCapabilitiesResponse
{
public:
	tls__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tls:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 928; } /* = unique id SOAP_TYPE__tls__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetServiceCapabilitiesResponse() { _tls__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tls__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetLayout
#define SOAP_TYPE__tls__GetLayout (929)
/* tls:GetLayout */
class SOAP_CMAC _tls__GetLayout
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 929; } /* = unique id SOAP_TYPE__tls__GetLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetLayout() { _tls__GetLayout::soap_default(NULL); }
	virtual ~_tls__GetLayout() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetLayoutResponse
#define SOAP_TYPE__tls__GetLayoutResponse (930)
/* tls:GetLayoutResponse */
class SOAP_CMAC _tls__GetLayoutResponse
{
public:
	tt__Layout *Layout;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Layout */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 930; } /* = unique id SOAP_TYPE__tls__GetLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetLayoutResponse() { _tls__GetLayoutResponse::soap_default(NULL); }
	virtual ~_tls__GetLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetLayout
#define SOAP_TYPE__tls__SetLayout (931)
/* tls:SetLayout */
class SOAP_CMAC _tls__SetLayout
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__Layout *Layout;	/* required element of type tt:Layout */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 931; } /* = unique id SOAP_TYPE__tls__SetLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetLayout() { _tls__SetLayout::soap_default(NULL); }
	virtual ~_tls__SetLayout() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetLayoutResponse
#define SOAP_TYPE__tls__SetLayoutResponse (932)
/* tls:SetLayoutResponse */
class SOAP_CMAC _tls__SetLayoutResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 932; } /* = unique id SOAP_TYPE__tls__SetLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetLayoutResponse() { _tls__SetLayoutResponse::soap_default(NULL); }
	virtual ~_tls__SetLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetDisplayOptions
#define SOAP_TYPE__tls__GetDisplayOptions (933)
/* tls:GetDisplayOptions */
class SOAP_CMAC _tls__GetDisplayOptions
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 933; } /* = unique id SOAP_TYPE__tls__GetDisplayOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetDisplayOptions() { _tls__GetDisplayOptions::soap_default(NULL); }
	virtual ~_tls__GetDisplayOptions() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetDisplayOptionsResponse
#define SOAP_TYPE__tls__GetDisplayOptionsResponse (934)
/* tls:GetDisplayOptionsResponse */
class SOAP_CMAC _tls__GetDisplayOptionsResponse
{
public:
	tt__LayoutOptions *LayoutOptions;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:LayoutOptions */
	tt__CodingCapabilities *CodingCapabilities;	/* required element of type tt:CodingCapabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 934; } /* = unique id SOAP_TYPE__tls__GetDisplayOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetDisplayOptionsResponse() { _tls__GetDisplayOptionsResponse::soap_default(NULL); }
	virtual ~_tls__GetDisplayOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurations
#define SOAP_TYPE__tls__GetPaneConfigurations (935)
/* tls:GetPaneConfigurations */
class SOAP_CMAC _tls__GetPaneConfigurations
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 935; } /* = unique id SOAP_TYPE__tls__GetPaneConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurations() { _tls__GetPaneConfigurations::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurationsResponse
#define SOAP_TYPE__tls__GetPaneConfigurationsResponse (936)
/* tls:GetPaneConfigurationsResponse */
class SOAP_CMAC _tls__GetPaneConfigurationsResponse
{
public:
	std::vector<tt__PaneConfiguration * >PaneConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 936; } /* = unique id SOAP_TYPE__tls__GetPaneConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurationsResponse() { _tls__GetPaneConfigurationsResponse::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfiguration
#define SOAP_TYPE__tls__GetPaneConfiguration (937)
/* tls:GetPaneConfiguration */
class SOAP_CMAC _tls__GetPaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::string Pane;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 937; } /* = unique id SOAP_TYPE__tls__GetPaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfiguration() { _tls__GetPaneConfiguration::soap_default(NULL); }
	virtual ~_tls__GetPaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__GetPaneConfigurationResponse
#define SOAP_TYPE__tls__GetPaneConfigurationResponse (938)
/* tls:GetPaneConfigurationResponse */
class SOAP_CMAC _tls__GetPaneConfigurationResponse
{
public:
	tt__PaneConfiguration *PaneConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 938; } /* = unique id SOAP_TYPE__tls__GetPaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__GetPaneConfigurationResponse() { _tls__GetPaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__GetPaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurations
#define SOAP_TYPE__tls__SetPaneConfigurations (939)
/* tls:SetPaneConfigurations */
class SOAP_CMAC _tls__SetPaneConfigurations
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::vector<tt__PaneConfiguration * >PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 939; } /* = unique id SOAP_TYPE__tls__SetPaneConfigurations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurations() { _tls__SetPaneConfigurations::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurations() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurationsResponse
#define SOAP_TYPE__tls__SetPaneConfigurationsResponse (940)
/* tls:SetPaneConfigurationsResponse */
class SOAP_CMAC _tls__SetPaneConfigurationsResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 940; } /* = unique id SOAP_TYPE__tls__SetPaneConfigurationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurationsResponse() { _tls__SetPaneConfigurationsResponse::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfiguration
#define SOAP_TYPE__tls__SetPaneConfiguration (941)
/* tls:SetPaneConfiguration */
class SOAP_CMAC _tls__SetPaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__PaneConfiguration *PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 941; } /* = unique id SOAP_TYPE__tls__SetPaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfiguration() { _tls__SetPaneConfiguration::soap_default(NULL); }
	virtual ~_tls__SetPaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__SetPaneConfigurationResponse
#define SOAP_TYPE__tls__SetPaneConfigurationResponse (942)
/* tls:SetPaneConfigurationResponse */
class SOAP_CMAC _tls__SetPaneConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 942; } /* = unique id SOAP_TYPE__tls__SetPaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__SetPaneConfigurationResponse() { _tls__SetPaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__SetPaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__CreatePaneConfiguration
#define SOAP_TYPE__tls__CreatePaneConfiguration (943)
/* tls:CreatePaneConfiguration */
class SOAP_CMAC _tls__CreatePaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	tt__PaneConfiguration *PaneConfiguration;	/* required element of type tt:PaneConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 943; } /* = unique id SOAP_TYPE__tls__CreatePaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__CreatePaneConfiguration() { _tls__CreatePaneConfiguration::soap_default(NULL); }
	virtual ~_tls__CreatePaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__CreatePaneConfigurationResponse
#define SOAP_TYPE__tls__CreatePaneConfigurationResponse (944)
/* tls:CreatePaneConfigurationResponse */
class SOAP_CMAC _tls__CreatePaneConfigurationResponse
{
public:
	std::string PaneToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 944; } /* = unique id SOAP_TYPE__tls__CreatePaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__CreatePaneConfigurationResponse() { _tls__CreatePaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__CreatePaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tls__DeletePaneConfiguration
#define SOAP_TYPE__tls__DeletePaneConfiguration (945)
/* tls:DeletePaneConfiguration */
class SOAP_CMAC _tls__DeletePaneConfiguration
{
public:
	std::string VideoOutput;	/* required element of type tt:ReferenceToken */
	std::string PaneToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 945; } /* = unique id SOAP_TYPE__tls__DeletePaneConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__DeletePaneConfiguration() { _tls__DeletePaneConfiguration::soap_default(NULL); }
	virtual ~_tls__DeletePaneConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__tls__DeletePaneConfigurationResponse
#define SOAP_TYPE__tls__DeletePaneConfigurationResponse (946)
/* tls:DeletePaneConfigurationResponse */
class SOAP_CMAC _tls__DeletePaneConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 946; } /* = unique id SOAP_TYPE__tls__DeletePaneConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tls__DeletePaneConfigurationResponse() { _tls__DeletePaneConfigurationResponse::soap_default(NULL); }
	virtual ~_tls__DeletePaneConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_trp__Capabilities
#define SOAP_TYPE_trp__Capabilities (947)
/* trp:Capabilities */
class SOAP_CMAC trp__Capabilities
{
public:
	bool ReversePlayback;	/* optional attribute */
	std::string *SessionTimeoutRange;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 947; } /* = unique id SOAP_TYPE_trp__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trp__Capabilities() { trp__Capabilities::soap_default(NULL); }
	virtual ~trp__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetServiceCapabilities
#define SOAP_TYPE__trp__GetServiceCapabilities (948)
/* trp:GetServiceCapabilities */
class SOAP_CMAC _trp__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 948; } /* = unique id SOAP_TYPE__trp__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetServiceCapabilities() { _trp__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trp__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trp__GetServiceCapabilitiesResponse (949)
/* trp:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trp__GetServiceCapabilitiesResponse
{
public:
	trp__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trp:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 949; } /* = unique id SOAP_TYPE__trp__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetServiceCapabilitiesResponse() { _trp__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trp__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayUri
#define SOAP_TYPE__trp__GetReplayUri (950)
/* trp:GetReplayUri */
class SOAP_CMAC _trp__GetReplayUri
{
public:
	tt__StreamSetup *StreamSetup;	/* required element of type tt:StreamSetup */
	std::string RecordingToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 950; } /* = unique id SOAP_TYPE__trp__GetReplayUri */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayUri() { _trp__GetReplayUri::soap_default(NULL); }
	virtual ~_trp__GetReplayUri() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayUriResponse
#define SOAP_TYPE__trp__GetReplayUriResponse (951)
/* trp:GetReplayUriResponse */
class SOAP_CMAC _trp__GetReplayUriResponse
{
public:
	std::string Uri;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 951; } /* = unique id SOAP_TYPE__trp__GetReplayUriResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayUriResponse() { _trp__GetReplayUriResponse::soap_default(NULL); }
	virtual ~_trp__GetReplayUriResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__SetReplayConfiguration
#define SOAP_TYPE__trp__SetReplayConfiguration (952)
/* trp:SetReplayConfiguration */
class SOAP_CMAC _trp__SetReplayConfiguration
{
public:
	tt__ReplayConfiguration *Configuration;	/* required element of type tt:ReplayConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 952; } /* = unique id SOAP_TYPE__trp__SetReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__SetReplayConfiguration() { _trp__SetReplayConfiguration::soap_default(NULL); }
	virtual ~_trp__SetReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trp__SetReplayConfigurationResponse
#define SOAP_TYPE__trp__SetReplayConfigurationResponse (953)
/* trp:SetReplayConfigurationResponse */
class SOAP_CMAC _trp__SetReplayConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 953; } /* = unique id SOAP_TYPE__trp__SetReplayConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__SetReplayConfigurationResponse() { _trp__SetReplayConfigurationResponse::soap_default(NULL); }
	virtual ~_trp__SetReplayConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayConfiguration
#define SOAP_TYPE__trp__GetReplayConfiguration (954)
/* trp:GetReplayConfiguration */
class SOAP_CMAC _trp__GetReplayConfiguration
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 954; } /* = unique id SOAP_TYPE__trp__GetReplayConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayConfiguration() { _trp__GetReplayConfiguration::soap_default(NULL); }
	virtual ~_trp__GetReplayConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trp__GetReplayConfigurationResponse
#define SOAP_TYPE__trp__GetReplayConfigurationResponse (955)
/* trp:GetReplayConfigurationResponse */
class SOAP_CMAC _trp__GetReplayConfigurationResponse
{
public:
	tt__ReplayConfiguration *Configuration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReplayConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 955; } /* = unique id SOAP_TYPE__trp__GetReplayConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trp__GetReplayConfigurationResponse() { _trp__GetReplayConfigurationResponse::soap_default(NULL); }
	virtual ~_trp__GetReplayConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE_tse__Capabilities
#define SOAP_TYPE_tse__Capabilities (956)
/* tse:Capabilities */
class SOAP_CMAC tse__Capabilities
{
public:
	bool *MetadataSearch;	/* optional attribute */
	bool *GeneralStartEvents;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 956; } /* = unique id SOAP_TYPE_tse__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tse__Capabilities() { tse__Capabilities::soap_default(NULL); }
	virtual ~tse__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilities
#define SOAP_TYPE__tse__GetServiceCapabilities (957)
/* tse:GetServiceCapabilities */
class SOAP_CMAC _tse__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 957; } /* = unique id SOAP_TYPE__tse__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilities() { _tse__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tse__GetServiceCapabilitiesResponse (958)
/* tse:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tse__GetServiceCapabilitiesResponse
{
public:
	tse__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tse:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 958; } /* = unique id SOAP_TYPE__tse__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetServiceCapabilitiesResponse() { _tse__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tse__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummary
#define SOAP_TYPE__tse__GetRecordingSummary (959)
/* tse:GetRecordingSummary */
class SOAP_CMAC _tse__GetRecordingSummary
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 959; } /* = unique id SOAP_TYPE__tse__GetRecordingSummary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummary() { _tse__GetRecordingSummary::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummary() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSummaryResponse
#define SOAP_TYPE__tse__GetRecordingSummaryResponse (960)
/* tse:GetRecordingSummaryResponse */
class SOAP_CMAC _tse__GetRecordingSummaryResponse
{
public:
	tt__RecordingSummary *Summary;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingSummary */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 960; } /* = unique id SOAP_TYPE__tse__GetRecordingSummaryResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSummaryResponse() { _tse__GetRecordingSummaryResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSummaryResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformation
#define SOAP_TYPE__tse__GetRecordingInformation (961)
/* tse:GetRecordingInformation */
class SOAP_CMAC _tse__GetRecordingInformation
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 961; } /* = unique id SOAP_TYPE__tse__GetRecordingInformation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformation() { _tse__GetRecordingInformation::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformation() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingInformationResponse
#define SOAP_TYPE__tse__GetRecordingInformationResponse (962)
/* tse:GetRecordingInformationResponse */
class SOAP_CMAC _tse__GetRecordingInformationResponse
{
public:
	tt__RecordingInformation *RecordingInformation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 962; } /* = unique id SOAP_TYPE__tse__GetRecordingInformationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingInformationResponse() { _tse__GetRecordingInformationResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingInformationResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributes
#define SOAP_TYPE__tse__GetMediaAttributes (963)
/* tse:GetMediaAttributes */
class SOAP_CMAC _tse__GetMediaAttributes
{
public:
	std::vector<std::string >RecordingTokens;	/* optional element of type tt:RecordingReference */
	time_t Time;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 963; } /* = unique id SOAP_TYPE__tse__GetMediaAttributes */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributes() { _tse__GetMediaAttributes::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributes() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMediaAttributesResponse
#define SOAP_TYPE__tse__GetMediaAttributesResponse (964)
/* tse:GetMediaAttributesResponse */
class SOAP_CMAC _tse__GetMediaAttributesResponse
{
public:
	std::vector<tt__MediaAttributes * >MediaAttributes;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:MediaAttributes */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 964; } /* = unique id SOAP_TYPE__tse__GetMediaAttributesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMediaAttributesResponse() { _tse__GetMediaAttributesResponse::soap_default(NULL); }
	virtual ~_tse__GetMediaAttributesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordings
#define SOAP_TYPE__tse__FindRecordings (965)
/* tse:FindRecordings */
class SOAP_CMAC _tse__FindRecordings
{
public:
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	int *MaxMatches;	/* optional element of type xsd:int */
	std::string KeepAliveTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 965; } /* = unique id SOAP_TYPE__tse__FindRecordings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordings() { _tse__FindRecordings::soap_default(NULL); }
	virtual ~_tse__FindRecordings() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindRecordingsResponse
#define SOAP_TYPE__tse__FindRecordingsResponse (966)
/* tse:FindRecordingsResponse */
class SOAP_CMAC _tse__FindRecordingsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 966; } /* = unique id SOAP_TYPE__tse__FindRecordingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindRecordingsResponse() { _tse__FindRecordingsResponse::soap_default(NULL); }
	virtual ~_tse__FindRecordingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResults
#define SOAP_TYPE__tse__GetRecordingSearchResults (967)
/* tse:GetRecordingSearchResults */
class SOAP_CMAC _tse__GetRecordingSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	std::string *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 967; } /* = unique id SOAP_TYPE__tse__GetRecordingSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResults() { _tse__GetRecordingSearchResults::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetRecordingSearchResultsResponse
#define SOAP_TYPE__tse__GetRecordingSearchResultsResponse (968)
/* tse:GetRecordingSearchResultsResponse */
class SOAP_CMAC _tse__GetRecordingSearchResultsResponse
{
public:
	tt__FindRecordingResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindRecordingResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 968; } /* = unique id SOAP_TYPE__tse__GetRecordingSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetRecordingSearchResultsResponse() { _tse__GetRecordingSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetRecordingSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEvents
#define SOAP_TYPE__tse__FindEvents (969)
/* tse:FindEvents */
class SOAP_CMAC _tse__FindEvents
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	class tt__EventFilter *SearchFilter;	/* required element of type tt:EventFilter */
	bool IncludeStartState;	/* required element of type xsd:boolean */
	int *MaxMatches;	/* optional element of type xsd:int */
	std::string KeepAliveTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 969; } /* = unique id SOAP_TYPE__tse__FindEvents */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEvents() { _tse__FindEvents::soap_default(NULL); }
	virtual ~_tse__FindEvents() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindEventsResponse
#define SOAP_TYPE__tse__FindEventsResponse (970)
/* tse:FindEventsResponse */
class SOAP_CMAC _tse__FindEventsResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 970; } /* = unique id SOAP_TYPE__tse__FindEventsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindEventsResponse() { _tse__FindEventsResponse::soap_default(NULL); }
	virtual ~_tse__FindEventsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResults
#define SOAP_TYPE__tse__GetEventSearchResults (971)
/* tse:GetEventSearchResults */
class SOAP_CMAC _tse__GetEventSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	std::string *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 971; } /* = unique id SOAP_TYPE__tse__GetEventSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResults() { _tse__GetEventSearchResults::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetEventSearchResultsResponse
#define SOAP_TYPE__tse__GetEventSearchResultsResponse (972)
/* tse:GetEventSearchResultsResponse */
class SOAP_CMAC _tse__GetEventSearchResultsResponse
{
public:
	tt__FindEventResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindEventResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 972; } /* = unique id SOAP_TYPE__tse__GetEventSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetEventSearchResultsResponse() { _tse__GetEventSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetEventSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPosition
#define SOAP_TYPE__tse__FindPTZPosition (973)
/* tse:FindPTZPosition */
class SOAP_CMAC _tse__FindPTZPosition
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__PTZPositionFilter *SearchFilter;	/* required element of type tt:PTZPositionFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	std::string KeepAliveTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 973; } /* = unique id SOAP_TYPE__tse__FindPTZPosition */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPosition() { _tse__FindPTZPosition::soap_default(NULL); }
	virtual ~_tse__FindPTZPosition() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindPTZPositionResponse
#define SOAP_TYPE__tse__FindPTZPositionResponse (974)
/* tse:FindPTZPositionResponse */
class SOAP_CMAC _tse__FindPTZPositionResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 974; } /* = unique id SOAP_TYPE__tse__FindPTZPositionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindPTZPositionResponse() { _tse__FindPTZPositionResponse::soap_default(NULL); }
	virtual ~_tse__FindPTZPositionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResults
#define SOAP_TYPE__tse__GetPTZPositionSearchResults (975)
/* tse:GetPTZPositionSearchResults */
class SOAP_CMAC _tse__GetPTZPositionSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	std::string *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 975; } /* = unique id SOAP_TYPE__tse__GetPTZPositionSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResults() { _tse__GetPTZPositionSearchResults::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse
#define SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse (976)
/* tse:GetPTZPositionSearchResultsResponse */
class SOAP_CMAC _tse__GetPTZPositionSearchResultsResponse
{
public:
	tt__FindPTZPositionResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindPTZPositionResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 976; } /* = unique id SOAP_TYPE__tse__GetPTZPositionSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetPTZPositionSearchResultsResponse() { _tse__GetPTZPositionSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetPTZPositionSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadata
#define SOAP_TYPE__tse__FindMetadata (977)
/* tse:FindMetadata */
class SOAP_CMAC _tse__FindMetadata
{
public:
	time_t StartPoint;	/* required element of type xsd:dateTime */
	time_t *EndPoint;	/* optional element of type xsd:dateTime */
	tt__SearchScope *Scope;	/* required element of type tt:SearchScope */
	tt__MetadataFilter *MetadataFilter;	/* required element of type tt:MetadataFilter */
	int *MaxMatches;	/* optional element of type xsd:int */
	std::string KeepAliveTime;	/* required element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 977; } /* = unique id SOAP_TYPE__tse__FindMetadata */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadata() { _tse__FindMetadata::soap_default(NULL); }
	virtual ~_tse__FindMetadata() { }
};
#endif

#ifndef SOAP_TYPE__tse__FindMetadataResponse
#define SOAP_TYPE__tse__FindMetadataResponse (978)
/* tse:FindMetadataResponse */
class SOAP_CMAC _tse__FindMetadataResponse
{
public:
	std::string SearchToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 978; } /* = unique id SOAP_TYPE__tse__FindMetadataResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__FindMetadataResponse() { _tse__FindMetadataResponse::soap_default(NULL); }
	virtual ~_tse__FindMetadataResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResults
#define SOAP_TYPE__tse__GetMetadataSearchResults (979)
/* tse:GetMetadataSearchResults */
class SOAP_CMAC _tse__GetMetadataSearchResults
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	int *MinResults;	/* optional element of type xsd:int */
	int *MaxResults;	/* optional element of type xsd:int */
	std::string *WaitTime;	/* optional element of type xsd:duration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 979; } /* = unique id SOAP_TYPE__tse__GetMetadataSearchResults */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResults() { _tse__GetMetadataSearchResults::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResults() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetMetadataSearchResultsResponse
#define SOAP_TYPE__tse__GetMetadataSearchResultsResponse (980)
/* tse:GetMetadataSearchResultsResponse */
class SOAP_CMAC _tse__GetMetadataSearchResultsResponse
{
public:
	tt__FindMetadataResultList *ResultList;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:FindMetadataResultList */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 980; } /* = unique id SOAP_TYPE__tse__GetMetadataSearchResultsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetMetadataSearchResultsResponse() { _tse__GetMetadataSearchResultsResponse::soap_default(NULL); }
	virtual ~_tse__GetMetadataSearchResultsResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchState
#define SOAP_TYPE__tse__GetSearchState (981)
/* tse:GetSearchState */
class SOAP_CMAC _tse__GetSearchState
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 981; } /* = unique id SOAP_TYPE__tse__GetSearchState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchState() { _tse__GetSearchState::soap_default(NULL); }
	virtual ~_tse__GetSearchState() { }
};
#endif

#ifndef SOAP_TYPE__tse__GetSearchStateResponse
#define SOAP_TYPE__tse__GetSearchStateResponse (982)
/* tse:GetSearchStateResponse */
class SOAP_CMAC _tse__GetSearchStateResponse
{
public:
	enum tt__SearchState State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SearchState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 982; } /* = unique id SOAP_TYPE__tse__GetSearchStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__GetSearchStateResponse() { _tse__GetSearchStateResponse::soap_default(NULL); }
	virtual ~_tse__GetSearchStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearch
#define SOAP_TYPE__tse__EndSearch (983)
/* tse:EndSearch */
class SOAP_CMAC _tse__EndSearch
{
public:
	std::string SearchToken;	/* required element of type tt:JobToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 983; } /* = unique id SOAP_TYPE__tse__EndSearch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearch() { _tse__EndSearch::soap_default(NULL); }
	virtual ~_tse__EndSearch() { }
};
#endif

#ifndef SOAP_TYPE__tse__EndSearchResponse
#define SOAP_TYPE__tse__EndSearchResponse (984)
/* tse:EndSearchResponse */
class SOAP_CMAC _tse__EndSearchResponse
{
public:
	time_t Endpoint;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 984; } /* = unique id SOAP_TYPE__tse__EndSearchResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tse__EndSearchResponse() { _tse__EndSearchResponse::soap_default(NULL); }
	virtual ~_tse__EndSearchResponse() { }
};
#endif

#ifndef SOAP_TYPE_trv__Capabilities
#define SOAP_TYPE_trv__Capabilities (985)
/* trv:Capabilities */
class SOAP_CMAC trv__Capabilities
{
public:
	bool *RTP_USCOREMulticast;	/* optional attribute */
	bool *RTP_USCORETCP;	/* optional attribute */
	bool *RTP_USCORERTSP_USCORETCP;	/* optional attribute */
	int SupportedReceivers;	/* required attribute */
	int *MaximumRTSPURILength;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 985; } /* = unique id SOAP_TYPE_trv__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trv__Capabilities() { trv__Capabilities::soap_default(NULL); }
	virtual ~trv__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilities
#define SOAP_TYPE__trv__GetServiceCapabilities (986)
/* trv:GetServiceCapabilities */
class SOAP_CMAC _trv__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 986; } /* = unique id SOAP_TYPE__trv__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilities() { _trv__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trv__GetServiceCapabilitiesResponse (987)
/* trv:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trv__GetServiceCapabilitiesResponse
{
public:
	trv__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trv:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 987; } /* = unique id SOAP_TYPE__trv__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetServiceCapabilitiesResponse() { _trv__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trv__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceivers
#define SOAP_TYPE__trv__GetReceivers (988)
/* trv:GetReceivers */
class SOAP_CMAC _trv__GetReceivers
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 988; } /* = unique id SOAP_TYPE__trv__GetReceivers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceivers() { _trv__GetReceivers::soap_default(NULL); }
	virtual ~_trv__GetReceivers() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiversResponse
#define SOAP_TYPE__trv__GetReceiversResponse (989)
/* trv:GetReceiversResponse */
class SOAP_CMAC _trv__GetReceiversResponse
{
public:
	std::vector<tt__Receiver * >Receivers;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 989; } /* = unique id SOAP_TYPE__trv__GetReceiversResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiversResponse() { _trv__GetReceiversResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiversResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiver
#define SOAP_TYPE__trv__GetReceiver (990)
/* trv:GetReceiver */
class SOAP_CMAC _trv__GetReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 990; } /* = unique id SOAP_TYPE__trv__GetReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiver() { _trv__GetReceiver::soap_default(NULL); }
	virtual ~_trv__GetReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverResponse
#define SOAP_TYPE__trv__GetReceiverResponse (991)
/* trv:GetReceiverResponse */
class SOAP_CMAC _trv__GetReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 991; } /* = unique id SOAP_TYPE__trv__GetReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverResponse() { _trv__GetReceiverResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiver
#define SOAP_TYPE__trv__CreateReceiver (992)
/* trv:CreateReceiver */
class SOAP_CMAC _trv__CreateReceiver
{
public:
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 992; } /* = unique id SOAP_TYPE__trv__CreateReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiver() { _trv__CreateReceiver::soap_default(NULL); }
	virtual ~_trv__CreateReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__CreateReceiverResponse
#define SOAP_TYPE__trv__CreateReceiverResponse (993)
/* trv:CreateReceiverResponse */
class SOAP_CMAC _trv__CreateReceiverResponse
{
public:
	tt__Receiver *Receiver;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:Receiver */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 993; } /* = unique id SOAP_TYPE__trv__CreateReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__CreateReceiverResponse() { _trv__CreateReceiverResponse::soap_default(NULL); }
	virtual ~_trv__CreateReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiver
#define SOAP_TYPE__trv__DeleteReceiver (994)
/* trv:DeleteReceiver */
class SOAP_CMAC _trv__DeleteReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 994; } /* = unique id SOAP_TYPE__trv__DeleteReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiver() { _trv__DeleteReceiver::soap_default(NULL); }
	virtual ~_trv__DeleteReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__DeleteReceiverResponse
#define SOAP_TYPE__trv__DeleteReceiverResponse (995)
/* trv:DeleteReceiverResponse */
class SOAP_CMAC _trv__DeleteReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 995; } /* = unique id SOAP_TYPE__trv__DeleteReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__DeleteReceiverResponse() { _trv__DeleteReceiverResponse::soap_default(NULL); }
	virtual ~_trv__DeleteReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiver
#define SOAP_TYPE__trv__ConfigureReceiver (996)
/* trv:ConfigureReceiver */
class SOAP_CMAC _trv__ConfigureReceiver
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__ReceiverConfiguration *Configuration;	/* required element of type tt:ReceiverConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 996; } /* = unique id SOAP_TYPE__trv__ConfigureReceiver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiver() { _trv__ConfigureReceiver::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiver() { }
};
#endif

#ifndef SOAP_TYPE__trv__ConfigureReceiverResponse
#define SOAP_TYPE__trv__ConfigureReceiverResponse (997)
/* trv:ConfigureReceiverResponse */
class SOAP_CMAC _trv__ConfigureReceiverResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 997; } /* = unique id SOAP_TYPE__trv__ConfigureReceiverResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__ConfigureReceiverResponse() { _trv__ConfigureReceiverResponse::soap_default(NULL); }
	virtual ~_trv__ConfigureReceiverResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverMode
#define SOAP_TYPE__trv__SetReceiverMode (998)
/* trv:SetReceiverMode */
class SOAP_CMAC _trv__SetReceiverMode
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	enum tt__ReceiverMode Mode;	/* required element of type tt:ReceiverMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 998; } /* = unique id SOAP_TYPE__trv__SetReceiverMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverMode() { _trv__SetReceiverMode::soap_default(NULL); }
	virtual ~_trv__SetReceiverMode() { }
};
#endif

#ifndef SOAP_TYPE__trv__SetReceiverModeResponse
#define SOAP_TYPE__trv__SetReceiverModeResponse (999)
/* trv:SetReceiverModeResponse */
class SOAP_CMAC _trv__SetReceiverModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 999; } /* = unique id SOAP_TYPE__trv__SetReceiverModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__SetReceiverModeResponse() { _trv__SetReceiverModeResponse::soap_default(NULL); }
	virtual ~_trv__SetReceiverModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverState
#define SOAP_TYPE__trv__GetReceiverState (1000)
/* trv:GetReceiverState */
class SOAP_CMAC _trv__GetReceiverState
{
public:
	std::string ReceiverToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1000; } /* = unique id SOAP_TYPE__trv__GetReceiverState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverState() { _trv__GetReceiverState::soap_default(NULL); }
	virtual ~_trv__GetReceiverState() { }
};
#endif

#ifndef SOAP_TYPE__trv__GetReceiverStateResponse
#define SOAP_TYPE__trv__GetReceiverStateResponse (1001)
/* trv:GetReceiverStateResponse */
class SOAP_CMAC _trv__GetReceiverStateResponse
{
public:
	tt__ReceiverStateInformation *ReceiverState;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:ReceiverStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1001; } /* = unique id SOAP_TYPE__trv__GetReceiverStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trv__GetReceiverStateResponse() { _trv__GetReceiverStateResponse::soap_default(NULL); }
	virtual ~_trv__GetReceiverStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_tev__Capabilities
#define SOAP_TYPE_tev__Capabilities (1002)
/* tev:Capabilities */
class SOAP_CMAC tev__Capabilities
{
public:
	bool *WSSubscriptionPolicySupport;	/* optional attribute */
	bool *WSPullPointSupport;	/* optional attribute */
	bool *WSPausableSubscriptionManagerInterfaceSupport;	/* optional attribute */
	int *MaxNotificationProducers;	/* optional attribute */
	int *MaxPullPoints;	/* optional attribute */
	bool *PersistentNotificationStorage;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1002; } /* = unique id SOAP_TYPE_tev__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tev__Capabilities() { tev__Capabilities::soap_default(NULL); }
	virtual ~tev__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilities
#define SOAP_TYPE__tev__GetServiceCapabilities (1003)
/* tev:GetServiceCapabilities */
class SOAP_CMAC _tev__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1003; } /* = unique id SOAP_TYPE__tev__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilities() { _tev__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tev__GetServiceCapabilitiesResponse (1004)
/* tev:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tev__GetServiceCapabilitiesResponse
{
public:
	tev__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tev:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1004; } /* = unique id SOAP_TYPE__tev__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetServiceCapabilitiesResponse() { _tev__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tev__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy
#define SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy (1793)
/* tev:CreatePullPointSubscription-SubscriptionPolicy */
class SOAP_CMAC _tev__CreatePullPointSubscription_SubscriptionPolicy
{
public:
	virtual int soap_type() const { return 1793; } /* = unique id SOAP_TYPE__tev__CreatePullPointSubscription_SubscriptionPolicy */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription_SubscriptionPolicy() { _tev__CreatePullPointSubscription_SubscriptionPolicy::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription_SubscriptionPolicy() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscription
#define SOAP_TYPE__tev__CreatePullPointSubscription (1005)
/* tev:CreatePullPointSubscription */
class SOAP_CMAC _tev__CreatePullPointSubscription
{
public:
	wsnt__FilterType *Filter;	/* optional element of type wsnt:FilterType */
	std::string *InitialTerminationTime;	/* optional element of type wsnt:AbsoluteOrRelativeTimeType */
	_tev__CreatePullPointSubscription_SubscriptionPolicy *SubscriptionPolicy;	/* optional element of type tev:CreatePullPointSubscription-SubscriptionPolicy */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1005; } /* = unique id SOAP_TYPE__tev__CreatePullPointSubscription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscription() { _tev__CreatePullPointSubscription::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscription() { }
};
#endif

#ifndef SOAP_TYPE__tev__CreatePullPointSubscriptionResponse
#define SOAP_TYPE__tev__CreatePullPointSubscriptionResponse (1006)
/* tev:CreatePullPointSubscriptionResponse */
class SOAP_CMAC _tev__CreatePullPointSubscriptionResponse
{
public:
	struct wsa5__EndpointReferenceType SubscriptionReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa5:EndpointReferenceType */
	time_t wsnt__CurrentTime;	/* required element of type xsd:dateTime */
	time_t wsnt__TerminationTime;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1006; } /* = unique id SOAP_TYPE__tev__CreatePullPointSubscriptionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__CreatePullPointSubscriptionResponse() { _tev__CreatePullPointSubscriptionResponse::soap_default(NULL); }
	virtual ~_tev__CreatePullPointSubscriptionResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessages
#define SOAP_TYPE__tev__PullMessages (1007)
/* tev:PullMessages */
class SOAP_CMAC _tev__PullMessages
{
public:
	std::string Timeout;	/* required element of type xsd:duration */
	int MessageLimit;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1007; } /* = unique id SOAP_TYPE__tev__PullMessages */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessages() { _tev__PullMessages::soap_default(NULL); }
	virtual ~_tev__PullMessages() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesResponse
#define SOAP_TYPE__tev__PullMessagesResponse (1008)
/* tev:PullMessagesResponse */
class SOAP_CMAC _tev__PullMessagesResponse
{
public:
	time_t CurrentTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:dateTime */
	time_t TerminationTime;	/* required element of type xsd:dateTime */
	std::vector<wsnt__NotificationMessageHolderType * >wsnt__NotificationMessage;	/* optional element of type wsnt:NotificationMessageHolderType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1008; } /* = unique id SOAP_TYPE__tev__PullMessagesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesResponse() { _tev__PullMessagesResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__PullMessagesFaultResponse
#define SOAP_TYPE__tev__PullMessagesFaultResponse (1009)
/* tev:PullMessagesFaultResponse */
class SOAP_CMAC _tev__PullMessagesFaultResponse
{
public:
	std::string MaxTimeout;	/* required element of type xsd:duration */
	int MaxMessageLimit;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1009; } /* = unique id SOAP_TYPE__tev__PullMessagesFaultResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__PullMessagesFaultResponse() { _tev__PullMessagesFaultResponse::soap_default(NULL); }
	virtual ~_tev__PullMessagesFaultResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__Seek
#define SOAP_TYPE__tev__Seek (1010)
/* tev:Seek */
class SOAP_CMAC _tev__Seek
{
public:
	time_t UtcTime;	/* required element of type xsd:dateTime */
	bool *Reverse;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1010; } /* = unique id SOAP_TYPE__tev__Seek */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__Seek() { _tev__Seek::soap_default(NULL); }
	virtual ~_tev__Seek() { }
};
#endif

#ifndef SOAP_TYPE__tev__SeekResponse
#define SOAP_TYPE__tev__SeekResponse (1011)
/* tev:SeekResponse */
class SOAP_CMAC _tev__SeekResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1011; } /* = unique id SOAP_TYPE__tev__SeekResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SeekResponse() { _tev__SeekResponse::soap_default(NULL); }
	virtual ~_tev__SeekResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPoint
#define SOAP_TYPE__tev__SetSynchronizationPoint (1012)
/* tev:SetSynchronizationPoint */
class SOAP_CMAC _tev__SetSynchronizationPoint
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1012; } /* = unique id SOAP_TYPE__tev__SetSynchronizationPoint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPoint() { _tev__SetSynchronizationPoint::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPoint() { }
};
#endif

#ifndef SOAP_TYPE__tev__SetSynchronizationPointResponse
#define SOAP_TYPE__tev__SetSynchronizationPointResponse (1013)
/* tev:SetSynchronizationPointResponse */
class SOAP_CMAC _tev__SetSynchronizationPointResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1013; } /* = unique id SOAP_TYPE__tev__SetSynchronizationPointResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__SetSynchronizationPointResponse() { _tev__SetSynchronizationPointResponse::soap_default(NULL); }
	virtual ~_tev__SetSynchronizationPointResponse() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventProperties
#define SOAP_TYPE__tev__GetEventProperties (1014)
/* tev:GetEventProperties */
class SOAP_CMAC _tev__GetEventProperties
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1014; } /* = unique id SOAP_TYPE__tev__GetEventProperties */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventProperties() { _tev__GetEventProperties::soap_default(NULL); }
	virtual ~_tev__GetEventProperties() { }
};
#endif

#ifndef SOAP_TYPE__tev__GetEventPropertiesResponse
#define SOAP_TYPE__tev__GetEventPropertiesResponse (1015)
/* tev:GetEventPropertiesResponse */
class SOAP_CMAC _tev__GetEventPropertiesResponse
{
public:
	std::vector<std::string >TopicNamespaceLocation;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:anyURI */
	bool wsnt__FixedTopicSet;	/* required element of type xsd:boolean */
	wstop__TopicSetType *wstop__TopicSet;	/* required element of type wstop:TopicSetType */
	std::vector<std::string >wsnt__TopicExpressionDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >MessageContentFilterDialect;	/* required element of type xsd:anyURI */
	std::vector<std::string >ProducerPropertiesFilterDialect;	/* optional element of type xsd:anyURI */
	std::vector<std::string >MessageContentSchemaLocation;	/* required element of type xsd:anyURI */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1015; } /* = unique id SOAP_TYPE__tev__GetEventPropertiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tev__GetEventPropertiesResponse() { _tev__GetEventPropertiesResponse::soap_default(NULL); }
	virtual ~_tev__GetEventPropertiesResponse() { }
};
#endif

#ifndef SOAP_TYPE_wsd__HelloType
#define SOAP_TYPE_wsd__HelloType (1018)
/* wsd:HelloType */
class SOAP_CMAC wsd__HelloType
{
public:
	class wsa__EndpointReferenceType *wsa__EndpointReference;	/* required element of type wsa:EndpointReferenceType */
	std::string *Types;	/* optional element of type wsd:QNameListType */
	class wsd__ScopesType *Scopes;	/* optional element of type wsd:ScopesType */
	std::string *XAddrs;	/* optional element of type wsd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1018; } /* = unique id SOAP_TYPE_wsd__HelloType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__HelloType() { wsd__HelloType::soap_default(NULL); }
	virtual ~wsd__HelloType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ByeType
#define SOAP_TYPE_wsd__ByeType (1019)
/* wsd:ByeType */
class SOAP_CMAC wsd__ByeType
{
public:
	wsa__EndpointReferenceType *wsa__EndpointReference;	/* required element of type wsa:EndpointReferenceType */
	std::string *Types;	/* optional element of type wsd:QNameListType */
	wsd__ScopesType *Scopes;	/* optional element of type wsd:ScopesType */
	std::string *XAddrs;	/* optional element of type wsd:UriListType */
	unsigned int *MetadataVersion;	/* optional element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1019; } /* = unique id SOAP_TYPE_wsd__ByeType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ByeType() { wsd__ByeType::soap_default(NULL); }
	virtual ~wsd__ByeType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ProbeType
#define SOAP_TYPE_wsd__ProbeType (1020)
/* wsd:ProbeType */
class SOAP_CMAC wsd__ProbeType
{
public:
	std::string *Types;	/* optional element of type wsd:QNameListType */
	wsd__ScopesType *Scopes;	/* optional element of type wsd:ScopesType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1020; } /* = unique id SOAP_TYPE_wsd__ProbeType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ProbeType() { wsd__ProbeType::soap_default(NULL); }
	virtual ~wsd__ProbeType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ProbeMatchesType
#define SOAP_TYPE_wsd__ProbeMatchesType (1021)
/* wsd:ProbeMatchesType */
class SOAP_CMAC wsd__ProbeMatchesType
{
public:
	std::vector<class wsd__ProbeMatchType * >ProbeMatch;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type wsd:ProbeMatchType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1021; } /* = unique id SOAP_TYPE_wsd__ProbeMatchesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ProbeMatchesType() { wsd__ProbeMatchesType::soap_default(NULL); }
	virtual ~wsd__ProbeMatchesType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ProbeMatchType
#define SOAP_TYPE_wsd__ProbeMatchType (1022)
/* wsd:ProbeMatchType */
class SOAP_CMAC wsd__ProbeMatchType
{
public:
	wsa__EndpointReferenceType *wsa__EndpointReference;	/* required element of type wsa:EndpointReferenceType */
	std::string *Types;	/* optional element of type wsd:QNameListType */
	wsd__ScopesType *Scopes;	/* optional element of type wsd:ScopesType */
	std::string *XAddrs;	/* optional element of type wsd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1022; } /* = unique id SOAP_TYPE_wsd__ProbeMatchType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ProbeMatchType() { wsd__ProbeMatchType::soap_default(NULL); }
	virtual ~wsd__ProbeMatchType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ResolveType
#define SOAP_TYPE_wsd__ResolveType (1023)
/* wsd:ResolveType */
class SOAP_CMAC wsd__ResolveType
{
public:
	wsa__EndpointReferenceType *wsa__EndpointReference;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type wsa:EndpointReferenceType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1023; } /* = unique id SOAP_TYPE_wsd__ResolveType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ResolveType() { wsd__ResolveType::soap_default(NULL); }
	virtual ~wsd__ResolveType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ResolveMatchesType
#define SOAP_TYPE_wsd__ResolveMatchesType (1024)
/* wsd:ResolveMatchesType */
class SOAP_CMAC wsd__ResolveMatchesType
{
public:
	class wsd__ResolveMatchType *ResolveMatch;	/* optional element of type wsd:ResolveMatchType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1024; } /* = unique id SOAP_TYPE_wsd__ResolveMatchesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ResolveMatchesType() { wsd__ResolveMatchesType::soap_default(NULL); }
	virtual ~wsd__ResolveMatchesType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ResolveMatchType
#define SOAP_TYPE_wsd__ResolveMatchType (1025)
/* wsd:ResolveMatchType */
class SOAP_CMAC wsd__ResolveMatchType
{
public:
	wsa__EndpointReferenceType *wsa__EndpointReference;	/* required element of type wsa:EndpointReferenceType */
	std::string *Types;	/* optional element of type wsd:QNameListType */
	wsd__ScopesType *Scopes;	/* optional element of type wsd:ScopesType */
	std::string XAddrs;	/* required element of type wsd:UriListType */
	unsigned int MetadataVersion;	/* required element of type xsd:unsignedInt */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1025; } /* = unique id SOAP_TYPE_wsd__ResolveMatchType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ResolveMatchType() { wsd__ResolveMatchType::soap_default(NULL); }
	virtual ~wsd__ResolveMatchType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__SecurityType
#define SOAP_TYPE_wsd__SecurityType (1027)
/* wsd:SecurityType */
class SOAP_CMAC wsd__SecurityType
{
public:
	class wsd__SigType *Sig;	/* optional element of type wsd:SigType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1027; } /* = unique id SOAP_TYPE_wsd__SecurityType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__SecurityType() { wsd__SecurityType::soap_default(NULL); }
	virtual ~wsd__SecurityType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__SigType
#define SOAP_TYPE_wsd__SigType (1028)
/* wsd:SigType */
class SOAP_CMAC wsd__SigType
{
public:
	std::string Scheme;	/* required attribute */
	xsd__base64Binary *KeyId;	/* optional attribute */
	std::string Refs;	/* required attribute */
	xsd__base64Binary Sig;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1028; } /* = unique id SOAP_TYPE_wsd__SigType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__SigType() { wsd__SigType::soap_default(NULL); }
	virtual ~wsd__SigType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__EndpointReferenceType
#define SOAP_TYPE_wsa__EndpointReferenceType (1030)
/* wsa:EndpointReferenceType */
class SOAP_CMAC wsa__EndpointReferenceType
{
public:
	class wsa__AttributedURI *Address;	/* required element of type wsa:AttributedURI */
	class wsa__ReferencePropertiesType *ReferenceProperties;	/* optional element of type wsa:ReferencePropertiesType */
	class wsa__ReferenceParametersType *ReferenceParameters;	/* optional element of type wsa:ReferenceParametersType */
	class wsa__AttributedQName *PortType;	/* optional element of type wsa:AttributedQName */
	class wsa__ServiceNameType *ServiceName;	/* optional element of type wsa:ServiceNameType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1030; } /* = unique id SOAP_TYPE_wsa__EndpointReferenceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__EndpointReferenceType() { wsa__EndpointReferenceType::soap_default(NULL); }
	virtual ~wsa__EndpointReferenceType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__ReferencePropertiesType
#define SOAP_TYPE_wsa__ReferencePropertiesType (1031)
/* wsa:ReferencePropertiesType */
class SOAP_CMAC wsa__ReferencePropertiesType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1031; } /* = unique id SOAP_TYPE_wsa__ReferencePropertiesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__ReferencePropertiesType() { wsa__ReferencePropertiesType::soap_default(NULL); }
	virtual ~wsa__ReferencePropertiesType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__ReferenceParametersType
#define SOAP_TYPE_wsa__ReferenceParametersType (1032)
/* wsa:ReferenceParametersType */
class SOAP_CMAC wsa__ReferenceParametersType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1032; } /* = unique id SOAP_TYPE_wsa__ReferenceParametersType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__ReferenceParametersType() { wsa__ReferenceParametersType::soap_default(NULL); }
	virtual ~wsa__ReferenceParametersType() { }
};
#endif

#ifndef SOAP_TYPE_tan__Capabilities
#define SOAP_TYPE_tan__Capabilities (1039)
/* tan:Capabilities */
class SOAP_CMAC tan__Capabilities
{
public:
	bool *RuleSupport;	/* optional attribute */
	bool *AnalyticsModuleSupport;	/* optional attribute */
	bool *CellBasedSceneDescriptionSupported;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1039; } /* = unique id SOAP_TYPE_tan__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tan__Capabilities() { tan__Capabilities::soap_default(NULL); }
	virtual ~tan__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetServiceCapabilities
#define SOAP_TYPE__tan__GetServiceCapabilities (1040)
/* tan:GetServiceCapabilities */
class SOAP_CMAC _tan__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1040; } /* = unique id SOAP_TYPE__tan__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetServiceCapabilities() { _tan__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_tan__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetServiceCapabilitiesResponse
#define SOAP_TYPE__tan__GetServiceCapabilitiesResponse (1041)
/* tan:GetServiceCapabilitiesResponse */
class SOAP_CMAC _tan__GetServiceCapabilitiesResponse
{
public:
	tan__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tan:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1041; } /* = unique id SOAP_TYPE__tan__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetServiceCapabilitiesResponse() { _tan__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_tan__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedRules
#define SOAP_TYPE__tan__GetSupportedRules (1042)
/* tan:GetSupportedRules */
class SOAP_CMAC _tan__GetSupportedRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1042; } /* = unique id SOAP_TYPE__tan__GetSupportedRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedRules() { _tan__GetSupportedRules::soap_default(NULL); }
	virtual ~_tan__GetSupportedRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedRulesResponse
#define SOAP_TYPE__tan__GetSupportedRulesResponse (1043)
/* tan:GetSupportedRulesResponse */
class SOAP_CMAC _tan__GetSupportedRulesResponse
{
public:
	tt__SupportedRules *SupportedRules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportedRules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1043; } /* = unique id SOAP_TYPE__tan__GetSupportedRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedRulesResponse() { _tan__GetSupportedRulesResponse::soap_default(NULL); }
	virtual ~_tan__GetSupportedRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateRules
#define SOAP_TYPE__tan__CreateRules (1044)
/* tan:CreateRules */
class SOAP_CMAC _tan__CreateRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >Rule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1044; } /* = unique id SOAP_TYPE__tan__CreateRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateRules() { _tan__CreateRules::soap_default(NULL); }
	virtual ~_tan__CreateRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateRulesResponse
#define SOAP_TYPE__tan__CreateRulesResponse (1045)
/* tan:CreateRulesResponse */
class SOAP_CMAC _tan__CreateRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1045; } /* = unique id SOAP_TYPE__tan__CreateRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateRulesResponse() { _tan__CreateRulesResponse::soap_default(NULL); }
	virtual ~_tan__CreateRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteRules
#define SOAP_TYPE__tan__DeleteRules (1046)
/* tan:DeleteRules */
class SOAP_CMAC _tan__DeleteRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >RuleName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1046; } /* = unique id SOAP_TYPE__tan__DeleteRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteRules() { _tan__DeleteRules::soap_default(NULL); }
	virtual ~_tan__DeleteRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteRulesResponse
#define SOAP_TYPE__tan__DeleteRulesResponse (1047)
/* tan:DeleteRulesResponse */
class SOAP_CMAC _tan__DeleteRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1047; } /* = unique id SOAP_TYPE__tan__DeleteRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteRulesResponse() { _tan__DeleteRulesResponse::soap_default(NULL); }
	virtual ~_tan__DeleteRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyRules
#define SOAP_TYPE__tan__ModifyRules (1048)
/* tan:ModifyRules */
class SOAP_CMAC _tan__ModifyRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >Rule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1048; } /* = unique id SOAP_TYPE__tan__ModifyRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyRules() { _tan__ModifyRules::soap_default(NULL); }
	virtual ~_tan__ModifyRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyRulesResponse
#define SOAP_TYPE__tan__ModifyRulesResponse (1049)
/* tan:ModifyRulesResponse */
class SOAP_CMAC _tan__ModifyRulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1049; } /* = unique id SOAP_TYPE__tan__ModifyRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyRulesResponse() { _tan__ModifyRulesResponse::soap_default(NULL); }
	virtual ~_tan__ModifyRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRules
#define SOAP_TYPE__tan__GetRules (1050)
/* tan:GetRules */
class SOAP_CMAC _tan__GetRules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1050; } /* = unique id SOAP_TYPE__tan__GetRules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRules() { _tan__GetRules::soap_default(NULL); }
	virtual ~_tan__GetRules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetRulesResponse
#define SOAP_TYPE__tan__GetRulesResponse (1051)
/* tan:GetRulesResponse */
class SOAP_CMAC _tan__GetRulesResponse
{
public:
	std::vector<tt__Config * >Rule;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1051; } /* = unique id SOAP_TYPE__tan__GetRulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetRulesResponse() { _tan__GetRulesResponse::soap_default(NULL); }
	virtual ~_tan__GetRulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedAnalyticsModules
#define SOAP_TYPE__tan__GetSupportedAnalyticsModules (1052)
/* tan:GetSupportedAnalyticsModules */
class SOAP_CMAC _tan__GetSupportedAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1052; } /* = unique id SOAP_TYPE__tan__GetSupportedAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedAnalyticsModules() { _tan__GetSupportedAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__GetSupportedAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse
#define SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse (1053)
/* tan:GetSupportedAnalyticsModulesResponse */
class SOAP_CMAC _tan__GetSupportedAnalyticsModulesResponse
{
public:
	tt__SupportedAnalyticsModules *SupportedAnalyticsModules;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:SupportedAnalyticsModules */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1053; } /* = unique id SOAP_TYPE__tan__GetSupportedAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetSupportedAnalyticsModulesResponse() { _tan__GetSupportedAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__GetSupportedAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateAnalyticsModules
#define SOAP_TYPE__tan__CreateAnalyticsModules (1054)
/* tan:CreateAnalyticsModules */
class SOAP_CMAC _tan__CreateAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >AnalyticsModule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1054; } /* = unique id SOAP_TYPE__tan__CreateAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateAnalyticsModules() { _tan__CreateAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__CreateAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__CreateAnalyticsModulesResponse
#define SOAP_TYPE__tan__CreateAnalyticsModulesResponse (1055)
/* tan:CreateAnalyticsModulesResponse */
class SOAP_CMAC _tan__CreateAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1055; } /* = unique id SOAP_TYPE__tan__CreateAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__CreateAnalyticsModulesResponse() { _tan__CreateAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__CreateAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteAnalyticsModules
#define SOAP_TYPE__tan__DeleteAnalyticsModules (1056)
/* tan:DeleteAnalyticsModules */
class SOAP_CMAC _tan__DeleteAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >AnalyticsModuleName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1056; } /* = unique id SOAP_TYPE__tan__DeleteAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteAnalyticsModules() { _tan__DeleteAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__DeleteAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__DeleteAnalyticsModulesResponse
#define SOAP_TYPE__tan__DeleteAnalyticsModulesResponse (1057)
/* tan:DeleteAnalyticsModulesResponse */
class SOAP_CMAC _tan__DeleteAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1057; } /* = unique id SOAP_TYPE__tan__DeleteAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__DeleteAnalyticsModulesResponse() { _tan__DeleteAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__DeleteAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyAnalyticsModules
#define SOAP_TYPE__tan__ModifyAnalyticsModules (1058)
/* tan:ModifyAnalyticsModules */
class SOAP_CMAC _tan__ModifyAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	std::vector<tt__Config * >AnalyticsModule;	/* required element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1058; } /* = unique id SOAP_TYPE__tan__ModifyAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyAnalyticsModules() { _tan__ModifyAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__ModifyAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__ModifyAnalyticsModulesResponse
#define SOAP_TYPE__tan__ModifyAnalyticsModulesResponse (1059)
/* tan:ModifyAnalyticsModulesResponse */
class SOAP_CMAC _tan__ModifyAnalyticsModulesResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1059; } /* = unique id SOAP_TYPE__tan__ModifyAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__ModifyAnalyticsModulesResponse() { _tan__ModifyAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__ModifyAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModules
#define SOAP_TYPE__tan__GetAnalyticsModules (1060)
/* tan:GetAnalyticsModules */
class SOAP_CMAC _tan__GetAnalyticsModules
{
public:
	std::string ConfigurationToken;	/* required element of type tt:ReferenceToken */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1060; } /* = unique id SOAP_TYPE__tan__GetAnalyticsModules */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModules() { _tan__GetAnalyticsModules::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModules() { }
};
#endif

#ifndef SOAP_TYPE__tan__GetAnalyticsModulesResponse
#define SOAP_TYPE__tan__GetAnalyticsModulesResponse (1061)
/* tan:GetAnalyticsModulesResponse */
class SOAP_CMAC _tan__GetAnalyticsModulesResponse
{
public:
	std::vector<tt__Config * >AnalyticsModule;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:Config */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1061; } /* = unique id SOAP_TYPE__tan__GetAnalyticsModulesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _tan__GetAnalyticsModulesResponse() { _tan__GetAnalyticsModulesResponse::soap_default(NULL); }
	virtual ~_tan__GetAnalyticsModulesResponse() { }
};
#endif

#ifndef SOAP_TYPE_trc__Capabilities
#define SOAP_TYPE_trc__Capabilities (1062)
/* trc:Capabilities */
class SOAP_CMAC trc__Capabilities
{
public:
	bool *DynamicRecordings;	/* optional attribute */
	bool *DynamicTracks;	/* optional attribute */
	std::string *Encoding;	/* optional attribute */
	float *MaxRate;	/* optional attribute */
	float *MaxTotalRate;	/* optional attribute */
	float *MaxRecordings;	/* optional attribute */
	int *MaxRecordingJobs;	/* optional attribute */
	bool *Options;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1062; } /* = unique id SOAP_TYPE_trc__Capabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__Capabilities() { trc__Capabilities::soap_default(NULL); }
	virtual ~trc__Capabilities() { }
};
#endif

#ifndef SOAP_TYPE_trc__RecordingOptions
#define SOAP_TYPE_trc__RecordingOptions (1063)
/* trc:RecordingOptions */
class SOAP_CMAC trc__RecordingOptions
{
public:
	class trc__JobOptions *Job;	/* required element of type trc:JobOptions */
	class trc__TrackOptions *Track;	/* required element of type trc:TrackOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1063; } /* = unique id SOAP_TYPE_trc__RecordingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__RecordingOptions() { trc__RecordingOptions::soap_default(NULL); }
	virtual ~trc__RecordingOptions() { }
};
#endif

#ifndef SOAP_TYPE_trc__JobOptions
#define SOAP_TYPE_trc__JobOptions (1064)
/* trc:JobOptions */
class SOAP_CMAC trc__JobOptions
{
public:
	int *Spare;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1064; } /* = unique id SOAP_TYPE_trc__JobOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__JobOptions() { trc__JobOptions::soap_default(NULL); }
	virtual ~trc__JobOptions() { }
};
#endif

#ifndef SOAP_TYPE_trc__TrackOptions
#define SOAP_TYPE_trc__TrackOptions (1065)
/* trc:TrackOptions */
class SOAP_CMAC trc__TrackOptions
{
public:
	int *SpareTotal;	/* optional attribute */
	int *SpareVideo;	/* optional attribute */
	int *SpareAudio;	/* optional attribute */
	int *SpareMetadata;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1065; } /* = unique id SOAP_TYPE_trc__TrackOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         trc__TrackOptions() { trc__TrackOptions::soap_default(NULL); }
	virtual ~trc__TrackOptions() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetServiceCapabilities
#define SOAP_TYPE__trc__GetServiceCapabilities (1066)
/* trc:GetServiceCapabilities */
class SOAP_CMAC _trc__GetServiceCapabilities
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1066; } /* = unique id SOAP_TYPE__trc__GetServiceCapabilities */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetServiceCapabilities() { _trc__GetServiceCapabilities::soap_default(NULL); }
	virtual ~_trc__GetServiceCapabilities() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetServiceCapabilitiesResponse
#define SOAP_TYPE__trc__GetServiceCapabilitiesResponse (1067)
/* trc:GetServiceCapabilitiesResponse */
class SOAP_CMAC _trc__GetServiceCapabilitiesResponse
{
public:
	trc__Capabilities *Capabilities;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trc:Capabilities */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1067; } /* = unique id SOAP_TYPE__trc__GetServiceCapabilitiesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetServiceCapabilitiesResponse() { _trc__GetServiceCapabilitiesResponse::soap_default(NULL); }
	virtual ~_trc__GetServiceCapabilitiesResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecording
#define SOAP_TYPE__trc__CreateRecording (1068)
/* trc:CreateRecording */
class SOAP_CMAC _trc__CreateRecording
{
public:
	tt__RecordingConfiguration *RecordingConfiguration;	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1068; } /* = unique id SOAP_TYPE__trc__CreateRecording */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecording() { _trc__CreateRecording::soap_default(NULL); }
	virtual ~_trc__CreateRecording() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingResponse
#define SOAP_TYPE__trc__CreateRecordingResponse (1069)
/* trc:CreateRecordingResponse */
class SOAP_CMAC _trc__CreateRecordingResponse
{
public:
	std::string RecordingToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1069; } /* = unique id SOAP_TYPE__trc__CreateRecordingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingResponse() { _trc__CreateRecordingResponse::soap_default(NULL); }
	virtual ~_trc__CreateRecordingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecording
#define SOAP_TYPE__trc__DeleteRecording (1070)
/* trc:DeleteRecording */
class SOAP_CMAC _trc__DeleteRecording
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1070; } /* = unique id SOAP_TYPE__trc__DeleteRecording */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecording() { _trc__DeleteRecording::soap_default(NULL); }
	virtual ~_trc__DeleteRecording() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingResponse
#define SOAP_TYPE__trc__DeleteRecordingResponse (1071)
/* trc:DeleteRecordingResponse */
class SOAP_CMAC _trc__DeleteRecordingResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1071; } /* = unique id SOAP_TYPE__trc__DeleteRecordingResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingResponse() { _trc__DeleteRecordingResponse::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordings
#define SOAP_TYPE__trc__GetRecordings (1072)
/* trc:GetRecordings */
class SOAP_CMAC _trc__GetRecordings
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1072; } /* = unique id SOAP_TYPE__trc__GetRecordings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordings() { _trc__GetRecordings::soap_default(NULL); }
	virtual ~_trc__GetRecordings() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingsResponse
#define SOAP_TYPE__trc__GetRecordingsResponse (1073)
/* trc:GetRecordingsResponse */
class SOAP_CMAC _trc__GetRecordingsResponse
{
public:
	std::vector<tt__GetRecordingsResponseItem * >RecordingItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:GetRecordingsResponseItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1073; } /* = unique id SOAP_TYPE__trc__GetRecordingsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingsResponse() { _trc__GetRecordingsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingConfiguration
#define SOAP_TYPE__trc__SetRecordingConfiguration (1074)
/* trc:SetRecordingConfiguration */
class SOAP_CMAC _trc__SetRecordingConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__RecordingConfiguration *RecordingConfiguration;	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1074; } /* = unique id SOAP_TYPE__trc__SetRecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingConfiguration() { _trc__SetRecordingConfiguration::soap_default(NULL); }
	virtual ~_trc__SetRecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingConfigurationResponse
#define SOAP_TYPE__trc__SetRecordingConfigurationResponse (1075)
/* trc:SetRecordingConfigurationResponse */
class SOAP_CMAC _trc__SetRecordingConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1075; } /* = unique id SOAP_TYPE__trc__SetRecordingConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingConfigurationResponse() { _trc__SetRecordingConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingConfiguration
#define SOAP_TYPE__trc__GetRecordingConfiguration (1076)
/* trc:GetRecordingConfiguration */
class SOAP_CMAC _trc__GetRecordingConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1076; } /* = unique id SOAP_TYPE__trc__GetRecordingConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingConfiguration() { _trc__GetRecordingConfiguration::soap_default(NULL); }
	virtual ~_trc__GetRecordingConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingConfigurationResponse
#define SOAP_TYPE__trc__GetRecordingConfigurationResponse (1077)
/* trc:GetRecordingConfigurationResponse */
class SOAP_CMAC _trc__GetRecordingConfigurationResponse
{
public:
	tt__RecordingConfiguration *RecordingConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1077; } /* = unique id SOAP_TYPE__trc__GetRecordingConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingConfigurationResponse() { _trc__GetRecordingConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateTrack
#define SOAP_TYPE__trc__CreateTrack (1078)
/* trc:CreateTrack */
class SOAP_CMAC _trc__CreateTrack
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	tt__TrackConfiguration *TrackConfiguration;	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1078; } /* = unique id SOAP_TYPE__trc__CreateTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateTrack() { _trc__CreateTrack::soap_default(NULL); }
	virtual ~_trc__CreateTrack() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateTrackResponse
#define SOAP_TYPE__trc__CreateTrackResponse (1079)
/* trc:CreateTrackResponse */
class SOAP_CMAC _trc__CreateTrackResponse
{
public:
	std::string TrackToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1079; } /* = unique id SOAP_TYPE__trc__CreateTrackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateTrackResponse() { _trc__CreateTrackResponse::soap_default(NULL); }
	virtual ~_trc__CreateTrackResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteTrack
#define SOAP_TYPE__trc__DeleteTrack (1080)
/* trc:DeleteTrack */
class SOAP_CMAC _trc__DeleteTrack
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1080; } /* = unique id SOAP_TYPE__trc__DeleteTrack */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteTrack() { _trc__DeleteTrack::soap_default(NULL); }
	virtual ~_trc__DeleteTrack() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteTrackResponse
#define SOAP_TYPE__trc__DeleteTrackResponse (1081)
/* trc:DeleteTrackResponse */
class SOAP_CMAC _trc__DeleteTrackResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1081; } /* = unique id SOAP_TYPE__trc__DeleteTrackResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteTrackResponse() { _trc__DeleteTrackResponse::soap_default(NULL); }
	virtual ~_trc__DeleteTrackResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetTrackConfiguration
#define SOAP_TYPE__trc__GetTrackConfiguration (1082)
/* trc:GetTrackConfiguration */
class SOAP_CMAC _trc__GetTrackConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1082; } /* = unique id SOAP_TYPE__trc__GetTrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetTrackConfiguration() { _trc__GetTrackConfiguration::soap_default(NULL); }
	virtual ~_trc__GetTrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetTrackConfigurationResponse
#define SOAP_TYPE__trc__GetTrackConfigurationResponse (1083)
/* trc:GetTrackConfigurationResponse */
class SOAP_CMAC _trc__GetTrackConfigurationResponse
{
public:
	tt__TrackConfiguration *TrackConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1083; } /* = unique id SOAP_TYPE__trc__GetTrackConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetTrackConfigurationResponse() { _trc__GetTrackConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetTrackConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetTrackConfiguration
#define SOAP_TYPE__trc__SetTrackConfiguration (1084)
/* trc:SetTrackConfiguration */
class SOAP_CMAC _trc__SetTrackConfiguration
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	std::string TrackToken;	/* required element of type tt:TrackReference */
	tt__TrackConfiguration *TrackConfiguration;	/* required element of type tt:TrackConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1084; } /* = unique id SOAP_TYPE__trc__SetTrackConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetTrackConfiguration() { _trc__SetTrackConfiguration::soap_default(NULL); }
	virtual ~_trc__SetTrackConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetTrackConfigurationResponse
#define SOAP_TYPE__trc__SetTrackConfigurationResponse (1085)
/* trc:SetTrackConfigurationResponse */
class SOAP_CMAC _trc__SetTrackConfigurationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1085; } /* = unique id SOAP_TYPE__trc__SetTrackConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetTrackConfigurationResponse() { _trc__SetTrackConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetTrackConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingJob
#define SOAP_TYPE__trc__CreateRecordingJob (1086)
/* trc:CreateRecordingJob */
class SOAP_CMAC _trc__CreateRecordingJob
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1086; } /* = unique id SOAP_TYPE__trc__CreateRecordingJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingJob() { _trc__CreateRecordingJob::soap_default(NULL); }
	virtual ~_trc__CreateRecordingJob() { }
};
#endif

#ifndef SOAP_TYPE__trc__CreateRecordingJobResponse
#define SOAP_TYPE__trc__CreateRecordingJobResponse (1087)
/* trc:CreateRecordingJobResponse */
class SOAP_CMAC _trc__CreateRecordingJobResponse
{
public:
	std::string JobToken;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1087; } /* = unique id SOAP_TYPE__trc__CreateRecordingJobResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__CreateRecordingJobResponse() { _trc__CreateRecordingJobResponse::soap_default(NULL); }
	virtual ~_trc__CreateRecordingJobResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingJob
#define SOAP_TYPE__trc__DeleteRecordingJob (1088)
/* trc:DeleteRecordingJob */
class SOAP_CMAC _trc__DeleteRecordingJob
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1088; } /* = unique id SOAP_TYPE__trc__DeleteRecordingJob */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingJob() { _trc__DeleteRecordingJob::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingJob() { }
};
#endif

#ifndef SOAP_TYPE__trc__DeleteRecordingJobResponse
#define SOAP_TYPE__trc__DeleteRecordingJobResponse (1089)
/* trc:DeleteRecordingJobResponse */
class SOAP_CMAC _trc__DeleteRecordingJobResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1089; } /* = unique id SOAP_TYPE__trc__DeleteRecordingJobResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__DeleteRecordingJobResponse() { _trc__DeleteRecordingJobResponse::soap_default(NULL); }
	virtual ~_trc__DeleteRecordingJobResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobs
#define SOAP_TYPE__trc__GetRecordingJobs (1090)
/* trc:GetRecordingJobs */
class SOAP_CMAC _trc__GetRecordingJobs
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1090; } /* = unique id SOAP_TYPE__trc__GetRecordingJobs */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobs() { _trc__GetRecordingJobs::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobs() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobsResponse
#define SOAP_TYPE__trc__GetRecordingJobsResponse (1091)
/* trc:GetRecordingJobsResponse */
class SOAP_CMAC _trc__GetRecordingJobsResponse
{
public:
	std::vector<tt__GetRecordingJobsResponseItem * >JobItem;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type tt:GetRecordingJobsResponseItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1091; } /* = unique id SOAP_TYPE__trc__GetRecordingJobsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobsResponse() { _trc__GetRecordingJobsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobsResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobConfiguration
#define SOAP_TYPE__trc__SetRecordingJobConfiguration (1092)
/* trc:SetRecordingJobConfiguration */
class SOAP_CMAC _trc__SetRecordingJobConfiguration
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	tt__RecordingJobConfiguration *JobConfiguration;	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1092; } /* = unique id SOAP_TYPE__trc__SetRecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobConfiguration() { _trc__SetRecordingJobConfiguration::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobConfigurationResponse
#define SOAP_TYPE__trc__SetRecordingJobConfigurationResponse (1093)
/* trc:SetRecordingJobConfigurationResponse */
class SOAP_CMAC _trc__SetRecordingJobConfigurationResponse
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1093; } /* = unique id SOAP_TYPE__trc__SetRecordingJobConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobConfigurationResponse() { _trc__SetRecordingJobConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobConfiguration
#define SOAP_TYPE__trc__GetRecordingJobConfiguration (1094)
/* trc:GetRecordingJobConfiguration */
class SOAP_CMAC _trc__GetRecordingJobConfiguration
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1094; } /* = unique id SOAP_TYPE__trc__GetRecordingJobConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobConfiguration() { _trc__GetRecordingJobConfiguration::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobConfiguration() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobConfigurationResponse
#define SOAP_TYPE__trc__GetRecordingJobConfigurationResponse (1095)
/* trc:GetRecordingJobConfigurationResponse */
class SOAP_CMAC _trc__GetRecordingJobConfigurationResponse
{
public:
	tt__RecordingJobConfiguration *JobConfiguration;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobConfiguration */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1095; } /* = unique id SOAP_TYPE__trc__GetRecordingJobConfigurationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobConfigurationResponse() { _trc__GetRecordingJobConfigurationResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobConfigurationResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobMode
#define SOAP_TYPE__trc__SetRecordingJobMode (1096)
/* trc:SetRecordingJobMode */
class SOAP_CMAC _trc__SetRecordingJobMode
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	std::string Mode;	/* required element of type tt:RecordingJobMode */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1096; } /* = unique id SOAP_TYPE__trc__SetRecordingJobMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobMode() { _trc__SetRecordingJobMode::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobMode() { }
};
#endif

#ifndef SOAP_TYPE__trc__SetRecordingJobModeResponse
#define SOAP_TYPE__trc__SetRecordingJobModeResponse (1097)
/* trc:SetRecordingJobModeResponse */
class SOAP_CMAC _trc__SetRecordingJobModeResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1097; } /* = unique id SOAP_TYPE__trc__SetRecordingJobModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__SetRecordingJobModeResponse() { _trc__SetRecordingJobModeResponse::soap_default(NULL); }
	virtual ~_trc__SetRecordingJobModeResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobState
#define SOAP_TYPE__trc__GetRecordingJobState (1098)
/* trc:GetRecordingJobState */
class SOAP_CMAC _trc__GetRecordingJobState
{
public:
	std::string JobToken;	/* required element of type tt:RecordingJobReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1098; } /* = unique id SOAP_TYPE__trc__GetRecordingJobState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobState() { _trc__GetRecordingJobState::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobState() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingJobStateResponse
#define SOAP_TYPE__trc__GetRecordingJobStateResponse (1099)
/* trc:GetRecordingJobStateResponse */
class SOAP_CMAC _trc__GetRecordingJobStateResponse
{
public:
	tt__RecordingJobStateInformation *State;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type tt:RecordingJobStateInformation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1099; } /* = unique id SOAP_TYPE__trc__GetRecordingJobStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingJobStateResponse() { _trc__GetRecordingJobStateResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingJobStateResponse() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingOptions
#define SOAP_TYPE__trc__GetRecordingOptions (1100)
/* trc:GetRecordingOptions */
class SOAP_CMAC _trc__GetRecordingOptions
{
public:
	std::string RecordingToken;	/* required element of type tt:RecordingReference */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1100; } /* = unique id SOAP_TYPE__trc__GetRecordingOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingOptions() { _trc__GetRecordingOptions::soap_default(NULL); }
	virtual ~_trc__GetRecordingOptions() { }
};
#endif

#ifndef SOAP_TYPE__trc__GetRecordingOptionsResponse
#define SOAP_TYPE__trc__GetRecordingOptionsResponse (1101)
/* trc:GetRecordingOptionsResponse */
class SOAP_CMAC _trc__GetRecordingOptionsResponse
{
public:
	trc__RecordingOptions *Options;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type trc:RecordingOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1101; } /* = unique id SOAP_TYPE__trc__GetRecordingOptionsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _trc__GetRecordingOptionsResponse() { _trc__GetRecordingOptionsResponse::soap_default(NULL); }
	virtual ~_trc__GetRecordingOptionsResponse() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSource
#define SOAP_TYPE_tt__VideoSource (254)
/* tt:VideoSource */
class SOAP_CMAC tt__VideoSource : public tt__DeviceEntity
{
public:
	float Framerate;	/* required element of type xsd:float */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	tt__ImagingSettings *Imaging;	/* optional element of type tt:ImagingSettings */
	tt__VideoSourceExtension *Extension;	/* optional element of type tt:VideoSourceExtension */
public:
	virtual int soap_type() const { return 254; } /* = unique id SOAP_TYPE_tt__VideoSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSource() { tt__VideoSource::soap_default(NULL); }
	virtual ~tt__VideoSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSource
#define SOAP_TYPE_tt__AudioSource (257)
/* tt:AudioSource */
class SOAP_CMAC tt__AudioSource : public tt__DeviceEntity
{
public:
	int Channels;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 257; } /* = unique id SOAP_TYPE_tt__AudioSource */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSource() { tt__AudioSource::soap_default(NULL); }
	virtual ~tt__AudioSource() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoSourceConfiguration
#define SOAP_TYPE_tt__VideoSourceConfiguration (262)
/* tt:VideoSourceConfiguration */
class SOAP_CMAC tt__VideoSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
	tt__IntRectangle *Bounds;	/* required element of type tt:IntRectangle */
	tt__VideoSourceConfigurationExtension *Extension;	/* optional element of type tt:VideoSourceConfigurationExtension */
public:
	virtual int soap_type() const { return 262; } /* = unique id SOAP_TYPE_tt__VideoSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoSourceConfiguration() { tt__VideoSourceConfiguration::soap_default(NULL); }
	virtual ~tt__VideoSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoEncoderConfiguration
#define SOAP_TYPE_tt__VideoEncoderConfiguration (272)
/* tt:VideoEncoderConfiguration */
class SOAP_CMAC tt__VideoEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__VideoEncoding Encoding;	/* required element of type tt:VideoEncoding */
	tt__VideoResolution *Resolution;	/* required element of type tt:VideoResolution */
	float Quality;	/* required element of type xsd:float */
	tt__VideoRateControl *RateControl;	/* optional element of type tt:VideoRateControl */
	tt__Mpeg4Configuration *MPEG4;	/* optional element of type tt:Mpeg4Configuration */
	tt__H264Configuration *H264;	/* optional element of type tt:H264Configuration */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
public:
	virtual int soap_type() const { return 272; } /* = unique id SOAP_TYPE_tt__VideoEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoEncoderConfiguration() { tt__VideoEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__VideoEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__JpegOptions2
#define SOAP_TYPE_tt__JpegOptions2 (281)
/* tt:JpegOptions2 */
class SOAP_CMAC tt__JpegOptions2 : public tt__JpegOptions
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
public:
	virtual int soap_type() const { return 281; } /* = unique id SOAP_TYPE_tt__JpegOptions2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__JpegOptions2() { tt__JpegOptions2::soap_default(NULL); }
	virtual ~tt__JpegOptions2() { }
};
#endif

#ifndef SOAP_TYPE_tt__Mpeg4Options2
#define SOAP_TYPE_tt__Mpeg4Options2 (283)
/* tt:Mpeg4Options2 */
class SOAP_CMAC tt__Mpeg4Options2 : public tt__Mpeg4Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
public:
	virtual int soap_type() const { return 283; } /* = unique id SOAP_TYPE_tt__Mpeg4Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Mpeg4Options2() { tt__Mpeg4Options2::soap_default(NULL); }
	virtual ~tt__Mpeg4Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__H264Options2
#define SOAP_TYPE_tt__H264Options2 (285)
/* tt:H264Options2 */
class SOAP_CMAC tt__H264Options2 : public tt__H264Options
{
public:
	tt__IntRange *BitrateRange;	/* required element of type tt:IntRange */
public:
	virtual int soap_type() const { return 285; } /* = unique id SOAP_TYPE_tt__H264Options2 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__H264Options2() { tt__H264Options2::soap_default(NULL); }
	virtual ~tt__H264Options2() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioSourceConfiguration
#define SOAP_TYPE_tt__AudioSourceConfiguration (286)
/* tt:AudioSourceConfiguration */
class SOAP_CMAC tt__AudioSourceConfiguration : public tt__ConfigurationEntity
{
public:
	std::string SourceToken;	/* required element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 286; } /* = unique id SOAP_TYPE_tt__AudioSourceConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioSourceConfiguration() { tt__AudioSourceConfiguration::soap_default(NULL); }
	virtual ~tt__AudioSourceConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioEncoderConfiguration
#define SOAP_TYPE_tt__AudioEncoderConfiguration (289)
/* tt:AudioEncoderConfiguration */
class SOAP_CMAC tt__AudioEncoderConfiguration : public tt__ConfigurationEntity
{
public:
	enum tt__AudioEncoding Encoding;	/* required element of type tt:AudioEncoding */
	int Bitrate;	/* required element of type xsd:int */
	int SampleRate;	/* required element of type xsd:int */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
public:
	virtual int soap_type() const { return 289; } /* = unique id SOAP_TYPE_tt__AudioEncoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioEncoderConfiguration() { tt__AudioEncoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioEncoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoAnalyticsConfiguration
#define SOAP_TYPE_tt__VideoAnalyticsConfiguration (292)
/* tt:VideoAnalyticsConfiguration */
class SOAP_CMAC tt__VideoAnalyticsConfiguration : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsEngineConfiguration */
	tt__RuleEngineConfiguration *RuleEngineConfiguration;	/* required element of type tt:RuleEngineConfiguration */
public:
	virtual int soap_type() const { return 292; } /* = unique id SOAP_TYPE_tt__VideoAnalyticsConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoAnalyticsConfiguration() { tt__VideoAnalyticsConfiguration::soap_default(NULL); }
	virtual ~tt__VideoAnalyticsConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__MetadataConfiguration
#define SOAP_TYPE_tt__MetadataConfiguration (293)
/* tt:MetadataConfiguration */
class SOAP_CMAC tt__MetadataConfiguration : public tt__ConfigurationEntity
{
public:
	tt__PTZFilter *PTZStatus;	/* optional element of type tt:PTZFilter */
	tt__EventSubscription *Events;	/* optional element of type tt:EventSubscription */
	bool *Analytics;	/* optional element of type xsd:boolean */
	tt__MulticastConfiguration *Multicast;	/* required element of type tt:MulticastConfiguration */
	std::string SessionTimeout;	/* required element of type xsd:duration */
	tt__AnalyticsEngineConfiguration *AnalyticsEngineConfiguration;	/* optional element of type tt:AnalyticsEngineConfiguration */
	tt__MetadataConfigurationExtension *Extension;	/* optional element of type tt:MetadataConfigurationExtension */
public:
	virtual int soap_type() const { return 293; } /* = unique id SOAP_TYPE_tt__MetadataConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__MetadataConfiguration() { tt__MetadataConfiguration::soap_default(NULL); }
	virtual ~tt__MetadataConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutput
#define SOAP_TYPE_tt__VideoOutput (300)
/* tt:VideoOutput */
class SOAP_CMAC tt__VideoOutput : public tt__DeviceEntity
{
public:
	tt__Layout *Layout;	/* required element of type tt:Layout */
	tt__VideoResolution *Resolution;	/* optional element of type tt:VideoResolution */
	float *RefreshRate;	/* optional element of type xsd:float */
	float *AspectRatio;	/* optional element of type xsd:float */
	tt__VideoOutputExtension *Extension;	/* optional element of type tt:VideoOutputExtension */
public:
	virtual int soap_type() const { return 300; } /* = unique id SOAP_TYPE_tt__VideoOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutput() { tt__VideoOutput::soap_default(NULL); }
	virtual ~tt__VideoOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__VideoOutputConfiguration
#define SOAP_TYPE_tt__VideoOutputConfiguration (302)
/* tt:VideoOutputConfiguration */
class SOAP_CMAC tt__VideoOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
public:
	virtual int soap_type() const { return 302; } /* = unique id SOAP_TYPE_tt__VideoOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__VideoOutputConfiguration() { tt__VideoOutputConfiguration::soap_default(NULL); }
	virtual ~tt__VideoOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutput
#define SOAP_TYPE_tt__AudioOutput (309)
/* tt:AudioOutput */
class SOAP_CMAC tt__AudioOutput : public tt__DeviceEntity
{
public:
	virtual int soap_type() const { return 309; } /* = unique id SOAP_TYPE_tt__AudioOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutput() { tt__AudioOutput::soap_default(NULL); }
	virtual ~tt__AudioOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioOutputConfiguration
#define SOAP_TYPE_tt__AudioOutputConfiguration (310)
/* tt:AudioOutputConfiguration */
class SOAP_CMAC tt__AudioOutputConfiguration : public tt__ConfigurationEntity
{
public:
	std::string OutputToken;	/* required element of type tt:ReferenceToken */
	std::string *SendPrimacy;	/* optional element of type xsd:anyURI */
	int OutputLevel;	/* required element of type xsd:int */
public:
	virtual int soap_type() const { return 310; } /* = unique id SOAP_TYPE_tt__AudioOutputConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioOutputConfiguration() { tt__AudioOutputConfiguration::soap_default(NULL); }
	virtual ~tt__AudioOutputConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__AudioDecoderConfiguration
#define SOAP_TYPE_tt__AudioDecoderConfiguration (312)
/* tt:AudioDecoderConfiguration */
class SOAP_CMAC tt__AudioDecoderConfiguration : public tt__ConfigurationEntity
{
public:
	virtual int soap_type() const { return 312; } /* = unique id SOAP_TYPE_tt__AudioDecoderConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AudioDecoderConfiguration() { tt__AudioDecoderConfiguration::soap_default(NULL); }
	virtual ~tt__AudioDecoderConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__NetworkInterface
#define SOAP_TYPE_tt__NetworkInterface (323)
/* tt:NetworkInterface */
class SOAP_CMAC tt__NetworkInterface : public tt__DeviceEntity
{
public:
	bool Enabled;	/* required element of type xsd:boolean */
	tt__NetworkInterfaceInfo *Info;	/* optional element of type tt:NetworkInterfaceInfo */
	tt__NetworkInterfaceLink *Link;	/* optional element of type tt:NetworkInterfaceLink */
	tt__IPv4NetworkInterface *IPv4;	/* optional element of type tt:IPv4NetworkInterface */
	tt__IPv6NetworkInterface *IPv6;	/* optional element of type tt:IPv6NetworkInterface */
	tt__NetworkInterfaceExtension *Extension;	/* optional element of type tt:NetworkInterfaceExtension */
public:
	virtual int soap_type() const { return 323; } /* = unique id SOAP_TYPE_tt__NetworkInterface */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__NetworkInterface() { tt__NetworkInterface::soap_default(NULL); }
	virtual ~tt__NetworkInterface() { }
};
#endif

#ifndef SOAP_TYPE_tt__CertificateUsage
#define SOAP_TYPE_tt__CertificateUsage (427)
/* Primitive tt:CertificateUsage schema type: */
class SOAP_CMAC tt__CertificateUsage
{
public:
	std::string __item;
	bool Critical;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 427; } /* = unique id SOAP_TYPE_tt__CertificateUsage */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__CertificateUsage() { tt__CertificateUsage::soap_default(NULL); }
	virtual ~tt__CertificateUsage() { }
};
#endif

#ifndef SOAP_TYPE_tt__RelayOutput
#define SOAP_TYPE_tt__RelayOutput (436)
/* tt:RelayOutput */
class SOAP_CMAC tt__RelayOutput : public tt__DeviceEntity
{
public:
	tt__RelayOutputSettings *Properties;	/* required element of type tt:RelayOutputSettings */
public:
	virtual int soap_type() const { return 436; } /* = unique id SOAP_TYPE_tt__RelayOutput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__RelayOutput() { tt__RelayOutput::soap_default(NULL); }
	virtual ~tt__RelayOutput() { }
};
#endif

#ifndef SOAP_TYPE_tt__DigitalInput
#define SOAP_TYPE_tt__DigitalInput (437)
/* tt:DigitalInput */
class SOAP_CMAC tt__DigitalInput : public tt__DeviceEntity
{
public:
	virtual int soap_type() const { return 437; } /* = unique id SOAP_TYPE_tt__DigitalInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__DigitalInput() { tt__DigitalInput::soap_default(NULL); }
	virtual ~tt__DigitalInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZNode
#define SOAP_TYPE_tt__PTZNode (438)
/* tt:PTZNode */
class SOAP_CMAC tt__PTZNode : public tt__DeviceEntity
{
public:
	std::string *Name;	/* optional element of type tt:Name */
	tt__PTZSpaces *SupportedPTZSpaces;	/* required element of type tt:PTZSpaces */
	int MaximumNumberOfPresets;	/* required element of type xsd:int */
	bool HomeSupported;	/* required element of type xsd:boolean */
	std::vector<std::string >AuxiliaryCommands;	/* optional element of type tt:AuxiliaryData */
	tt__PTZNodeExtension *Extension;	/* optional element of type tt:PTZNodeExtension */
	bool *FixedHomePosition;	/* optional attribute */
public:
	virtual int soap_type() const { return 438; } /* = unique id SOAP_TYPE_tt__PTZNode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZNode() { tt__PTZNode::soap_default(NULL); }
	virtual ~tt__PTZNode() { }
};
#endif

#ifndef SOAP_TYPE_tt__PTZConfiguration
#define SOAP_TYPE_tt__PTZConfiguration (443)
/* tt:PTZConfiguration */
class SOAP_CMAC tt__PTZConfiguration : public tt__ConfigurationEntity
{
public:
	std::string NodeToken;	/* required element of type tt:ReferenceToken */
	std::string *DefaultAbsolutePantTiltPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultAbsoluteZoomPositionSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativePanTiltTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultRelativeZoomTranslationSpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousPanTiltVelocitySpace;	/* optional element of type xsd:anyURI */
	std::string *DefaultContinuousZoomVelocitySpace;	/* optional element of type xsd:anyURI */
	tt__PTZSpeed *DefaultPTZSpeed;	/* optional element of type tt:PTZSpeed */
	std::string *DefaultPTZTimeout;	/* optional element of type xsd:duration */
	tt__PanTiltLimits *PanTiltLimits;	/* optional element of type tt:PanTiltLimits */
	tt__ZoomLimits *ZoomLimits;	/* optional element of type tt:ZoomLimits */
	tt__PTZConfigurationExtension *Extension;	/* optional element of type tt:PTZConfigurationExtension */
public:
	virtual int soap_type() const { return 443; } /* = unique id SOAP_TYPE_tt__PTZConfiguration */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__PTZConfiguration() { tt__PTZConfiguration::soap_default(NULL); }
	virtual ~tt__PTZConfiguration() { }
};
#endif

#ifndef SOAP_TYPE_tt__Object
#define SOAP_TYPE_tt__Object (563)
/* tt:Object */
class SOAP_CMAC tt__Object : public tt__ObjectId
{
public:
	tt__Appearance *Appearance;	/* optional element of type tt:Appearance */
	tt__Behaviour *Behaviour;	/* optional element of type tt:Behaviour */
	tt__ObjectExtension *Extension;	/* optional element of type tt:ObjectExtension */
public:
	virtual int soap_type() const { return 563; } /* = unique id SOAP_TYPE_tt__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__Object() { tt__Object::soap_default(NULL); }
	virtual ~tt__Object() { }
};
#endif

#ifndef SOAP_TYPE_tt__EventFilter
#define SOAP_TYPE_tt__EventFilter (622)
/* tt:EventFilter */
class SOAP_CMAC tt__EventFilter : public wsnt__FilterType
{
public:
	virtual int soap_type() const { return 622; } /* = unique id SOAP_TYPE_tt__EventFilter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__EventFilter() { tt__EventFilter::soap_default(NULL); }
	virtual ~tt__EventFilter() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngine
#define SOAP_TYPE_tt__AnalyticsEngine (658)
/* tt:AnalyticsEngine */
class SOAP_CMAC tt__AnalyticsEngine : public tt__ConfigurationEntity
{
public:
	tt__AnalyticsDeviceEngineConfiguration *AnalyticsEngineConfiguration;	/* required element of type tt:AnalyticsDeviceEngineConfiguration */
public:
	virtual int soap_type() const { return 658; } /* = unique id SOAP_TYPE_tt__AnalyticsEngine */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngine() { tt__AnalyticsEngine::soap_default(NULL); }
	virtual ~tt__AnalyticsEngine() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineInput
#define SOAP_TYPE_tt__AnalyticsEngineInput (664)
/* tt:AnalyticsEngineInput */
class SOAP_CMAC tt__AnalyticsEngineInput : public tt__ConfigurationEntity
{
public:
	tt__SourceIdentification *SourceIdentification;	/* required element of type tt:SourceIdentification */
	tt__VideoEncoderConfiguration *VideoInput;	/* required element of type tt:VideoEncoderConfiguration */
	tt__MetadataInput *MetadataInput;	/* required element of type tt:MetadataInput */
public:
	virtual int soap_type() const { return 664; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineInput */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineInput() { tt__AnalyticsEngineInput::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineInput() { }
};
#endif

#ifndef SOAP_TYPE_tt__AnalyticsEngineControl
#define SOAP_TYPE_tt__AnalyticsEngineControl (669)
/* tt:AnalyticsEngineControl */
class SOAP_CMAC tt__AnalyticsEngineControl : public tt__ConfigurationEntity
{
public:
	std::string EngineToken;	/* required element of type tt:ReferenceToken */
	std::string EngineConfigToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >InputToken;	/* required element of type tt:ReferenceToken */
	std::vector<std::string >ReceiverToken;	/* required element of type tt:ReferenceToken */
	tt__MulticastConfiguration *Multicast;	/* optional element of type tt:MulticastConfiguration */
	tt__Config *Subscription;	/* required element of type tt:Config */
	enum tt__ModeOfOperation Mode;	/* required element of type tt:ModeOfOperation */
public:
	virtual int soap_type() const { return 669; } /* = unique id SOAP_TYPE_tt__AnalyticsEngineControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tt__AnalyticsEngineControl() { tt__AnalyticsEngineControl::soap_default(NULL); }
	virtual ~tt__AnalyticsEngineControl() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType
#define SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType (680)
/* wsnt:SubscribeCreationFailedFaultType */
class SOAP_CMAC wsnt__SubscribeCreationFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 680; } /* = unique id SOAP_TYPE_wsnt__SubscribeCreationFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__SubscribeCreationFailedFaultType() { wsnt__SubscribeCreationFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__SubscribeCreationFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidFilterFaultType
#define SOAP_TYPE_wsnt__InvalidFilterFaultType (681)
/* wsnt:InvalidFilterFaultType */
class SOAP_CMAC wsnt__InvalidFilterFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnknownFilter;	/* required element of type xsd:QName */
public:
	virtual int soap_type() const { return 681; } /* = unique id SOAP_TYPE_wsnt__InvalidFilterFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidFilterFaultType() { wsnt__InvalidFilterFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidFilterFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType
#define SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType (682)
/* wsnt:TopicExpressionDialectUnknownFaultType */
class SOAP_CMAC wsnt__TopicExpressionDialectUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 682; } /* = unique id SOAP_TYPE_wsnt__TopicExpressionDialectUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicExpressionDialectUnknownFaultType() { wsnt__TopicExpressionDialectUnknownFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicExpressionDialectUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType (683)
/* wsnt:InvalidTopicExpressionFaultType */
class SOAP_CMAC wsnt__InvalidTopicExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 683; } /* = unique id SOAP_TYPE_wsnt__InvalidTopicExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidTopicExpressionFaultType() { wsnt__InvalidTopicExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidTopicExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__TopicNotSupportedFaultType
#define SOAP_TYPE_wsnt__TopicNotSupportedFaultType (684)
/* wsnt:TopicNotSupportedFaultType */
class SOAP_CMAC wsnt__TopicNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 684; } /* = unique id SOAP_TYPE_wsnt__TopicNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__TopicNotSupportedFaultType() { wsnt__TopicNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__TopicNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType
#define SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType (685)
/* wsnt:MultipleTopicsSpecifiedFaultType */
class SOAP_CMAC wsnt__MultipleTopicsSpecifiedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 685; } /* = unique id SOAP_TYPE_wsnt__MultipleTopicsSpecifiedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__MultipleTopicsSpecifiedFaultType() { wsnt__MultipleTopicsSpecifiedFaultType::soap_default(NULL); }
	virtual ~wsnt__MultipleTopicsSpecifiedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType (686)
/* wsnt:InvalidProducerPropertiesExpressionFaultType */
class SOAP_CMAC wsnt__InvalidProducerPropertiesExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 686; } /* = unique id SOAP_TYPE_wsnt__InvalidProducerPropertiesExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidProducerPropertiesExpressionFaultType() { wsnt__InvalidProducerPropertiesExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidProducerPropertiesExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType
#define SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType (687)
/* wsnt:InvalidMessageContentExpressionFaultType */
class SOAP_CMAC wsnt__InvalidMessageContentExpressionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 687; } /* = unique id SOAP_TYPE_wsnt__InvalidMessageContentExpressionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__InvalidMessageContentExpressionFaultType() { wsnt__InvalidMessageContentExpressionFaultType::soap_default(NULL); }
	virtual ~wsnt__InvalidMessageContentExpressionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType (688)
/* wsnt:UnrecognizedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnrecognizedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnrecognizedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 688; } /* = unique id SOAP_TYPE_wsnt__UnrecognizedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnrecognizedPolicyRequestFaultType() { wsnt__UnrecognizedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnrecognizedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType
#define SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType (689)
/* wsnt:UnsupportedPolicyRequestFaultType */
class SOAP_CMAC wsnt__UnsupportedPolicyRequestFaultType : public wsrfbf__BaseFaultType
{
public:
	std::vector<std::string >UnsupportedPolicy;	/* optional element of type xsd:QName */
public:
	virtual int soap_type() const { return 689; } /* = unique id SOAP_TYPE_wsnt__UnsupportedPolicyRequestFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnsupportedPolicyRequestFaultType() { wsnt__UnsupportedPolicyRequestFaultType::soap_default(NULL); }
	virtual ~wsnt__UnsupportedPolicyRequestFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType
#define SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType (690)
/* wsnt:NotifyMessageNotSupportedFaultType */
class SOAP_CMAC wsnt__NotifyMessageNotSupportedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 690; } /* = unique id SOAP_TYPE_wsnt__NotifyMessageNotSupportedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NotifyMessageNotSupportedFaultType() { wsnt__NotifyMessageNotSupportedFaultType::soap_default(NULL); }
	virtual ~wsnt__NotifyMessageNotSupportedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType (691)
/* wsnt:UnacceptableInitialTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableInitialTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 691; } /* = unique id SOAP_TYPE_wsnt__UnacceptableInitialTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableInitialTerminationTimeFaultType() { wsnt__UnacceptableInitialTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableInitialTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType
#define SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType (692)
/* wsnt:NoCurrentMessageOnTopicFaultType */
class SOAP_CMAC wsnt__NoCurrentMessageOnTopicFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 692; } /* = unique id SOAP_TYPE_wsnt__NoCurrentMessageOnTopicFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__NoCurrentMessageOnTopicFaultType() { wsnt__NoCurrentMessageOnTopicFaultType::soap_default(NULL); }
	virtual ~wsnt__NoCurrentMessageOnTopicFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToGetMessagesFaultType
#define SOAP_TYPE_wsnt__UnableToGetMessagesFaultType (693)
/* wsnt:UnableToGetMessagesFaultType */
class SOAP_CMAC wsnt__UnableToGetMessagesFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 693; } /* = unique id SOAP_TYPE_wsnt__UnableToGetMessagesFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToGetMessagesFaultType() { wsnt__UnableToGetMessagesFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToGetMessagesFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType
#define SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType (694)
/* wsnt:UnableToDestroyPullPointFaultType */
class SOAP_CMAC wsnt__UnableToDestroyPullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 694; } /* = unique id SOAP_TYPE_wsnt__UnableToDestroyPullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroyPullPointFaultType() { wsnt__UnableToDestroyPullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroyPullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType
#define SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType (695)
/* wsnt:UnableToCreatePullPointFaultType */
class SOAP_CMAC wsnt__UnableToCreatePullPointFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 695; } /* = unique id SOAP_TYPE_wsnt__UnableToCreatePullPointFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToCreatePullPointFaultType() { wsnt__UnableToCreatePullPointFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToCreatePullPointFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType
#define SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType (696)
/* wsnt:UnacceptableTerminationTimeFaultType */
class SOAP_CMAC wsnt__UnacceptableTerminationTimeFaultType : public wsrfbf__BaseFaultType
{
public:
	time_t MinimumTime;	/* required element of type xsd:dateTime */
	time_t *MaximumTime;	/* optional element of type xsd:dateTime */
public:
	virtual int soap_type() const { return 696; } /* = unique id SOAP_TYPE_wsnt__UnacceptableTerminationTimeFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnacceptableTerminationTimeFaultType() { wsnt__UnacceptableTerminationTimeFaultType::soap_default(NULL); }
	virtual ~wsnt__UnacceptableTerminationTimeFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType
#define SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType (697)
/* wsnt:UnableToDestroySubscriptionFaultType */
class SOAP_CMAC wsnt__UnableToDestroySubscriptionFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 697; } /* = unique id SOAP_TYPE_wsnt__UnableToDestroySubscriptionFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__UnableToDestroySubscriptionFaultType() { wsnt__UnableToDestroySubscriptionFaultType::soap_default(NULL); }
	virtual ~wsnt__UnableToDestroySubscriptionFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__PauseFailedFaultType
#define SOAP_TYPE_wsnt__PauseFailedFaultType (698)
/* wsnt:PauseFailedFaultType */
class SOAP_CMAC wsnt__PauseFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 698; } /* = unique id SOAP_TYPE_wsnt__PauseFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__PauseFailedFaultType() { wsnt__PauseFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__PauseFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsnt__ResumeFailedFaultType
#define SOAP_TYPE_wsnt__ResumeFailedFaultType (699)
/* wsnt:ResumeFailedFaultType */
class SOAP_CMAC wsnt__ResumeFailedFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 699; } /* = unique id SOAP_TYPE_wsnt__ResumeFailedFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsnt__ResumeFailedFaultType() { wsnt__ResumeFailedFaultType::soap_default(NULL); }
	virtual ~wsnt__ResumeFailedFaultType() { }
};
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespaceType_Topic
#define SOAP_TYPE__wstop__TopicNamespaceType_Topic (1852)
/* wstop:TopicNamespaceType-Topic */
class SOAP_CMAC _wstop__TopicNamespaceType_Topic
{
public:
	wstop__Documentation *documentation;	/* optional element of type wstop:Documentation */
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<class wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
	std::string *parent;	/* optional attribute */
public:
	virtual int soap_type() const { return 1852; } /* = unique id SOAP_TYPE__wstop__TopicNamespaceType_Topic */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _wstop__TopicNamespaceType_Topic() { _wstop__TopicNamespaceType_Topic::soap_default(NULL); }
	virtual ~_wstop__TopicNamespaceType_Topic() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicNamespaceType
#define SOAP_TYPE_wstop__TopicNamespaceType (726)
/* wstop:TopicNamespaceType */
class SOAP_CMAC wstop__TopicNamespaceType : public wstop__ExtensibleDocumented
{
public:
	std::vector<_wstop__TopicNamespaceType_Topic >*Topic;	/* optional element of type wstop:TopicNamespaceType-Topic */
	std::string *name;	/* optional attribute */
	std::string targetNamespace;	/* required attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 726; } /* = unique id SOAP_TYPE_wstop__TopicNamespaceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicNamespaceType() { wstop__TopicNamespaceType::soap_default(NULL); }
	virtual ~wstop__TopicNamespaceType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicType
#define SOAP_TYPE_wstop__TopicType (727)
/* wstop:TopicType */
class SOAP_CMAC wstop__TopicType : public wstop__ExtensibleDocumented
{
public:
	wstop__QueryExpressionType *MessagePattern;	/* optional element of type wstop:QueryExpressionType */
	std::vector<wstop__TopicType * >Topic;	/* optional element of type wstop:TopicType */
	std::string name;	/* required attribute */
	std::string *messageTypes;	/* optional attribute */
	bool final;	/* optional attribute */
public:
	virtual int soap_type() const { return 727; } /* = unique id SOAP_TYPE_wstop__TopicType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicType() { wstop__TopicType::soap_default(NULL); }
	virtual ~wstop__TopicType() { }
};
#endif

#ifndef SOAP_TYPE_wstop__TopicSetType
#define SOAP_TYPE_wstop__TopicSetType (728)
/* wstop:TopicSetType */
class SOAP_CMAC wstop__TopicSetType : public wstop__ExtensibleDocumented
{
public:
	virtual int soap_type() const { return 728; } /* = unique id SOAP_TYPE_wstop__TopicSetType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wstop__TopicSetType() { wstop__TopicSetType::soap_default(NULL); }
	virtual ~wstop__TopicSetType() { }
};
#endif

#ifndef SOAP_TYPE_tmd__SerialPort
#define SOAP_TYPE_tmd__SerialPort (733)
/* tmd:SerialPort */
class SOAP_CMAC tmd__SerialPort : public tt__DeviceEntity
{
public:
	virtual int soap_type() const { return 733; } /* = unique id SOAP_TYPE_tmd__SerialPort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         tmd__SerialPort() { tmd__SerialPort::soap_default(NULL); }
	virtual ~tmd__SerialPort() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnknownFaultType
#define SOAP_TYPE_wsrfr__ResourceUnknownFaultType (1016)
/* wsrfr:ResourceUnknownFaultType */
class SOAP_CMAC wsrfr__ResourceUnknownFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 1016; } /* = unique id SOAP_TYPE_wsrfr__ResourceUnknownFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnknownFaultType() { wsrfr__ResourceUnknownFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnknownFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsrfr__ResourceUnavailableFaultType
#define SOAP_TYPE_wsrfr__ResourceUnavailableFaultType (1017)
/* wsrfr:ResourceUnavailableFaultType */
class SOAP_CMAC wsrfr__ResourceUnavailableFaultType : public wsrfbf__BaseFaultType
{
public:
	virtual int soap_type() const { return 1017; } /* = unique id SOAP_TYPE_wsrfr__ResourceUnavailableFaultType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsrfr__ResourceUnavailableFaultType() { wsrfr__ResourceUnavailableFaultType::soap_default(NULL); }
	virtual ~wsrfr__ResourceUnavailableFaultType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__ScopesType
#define SOAP_TYPE_wsd__ScopesType (1026)
/* Primitive wsd:ScopesType schema type: */
class SOAP_CMAC wsd__ScopesType
{
public:
	std::string __item;
	std::string *MatchBy;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1026; } /* = unique id SOAP_TYPE_wsd__ScopesType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__ScopesType() { wsd__ScopesType::soap_default(NULL); }
	virtual ~wsd__ScopesType() { }
};
#endif

#ifndef SOAP_TYPE_wsd__AppSequenceType
#define SOAP_TYPE_wsd__AppSequenceType (1029)
/* wsd:AppSequenceType */
class SOAP_CMAC wsd__AppSequenceType
{
public:
	unsigned int InstanceId;	/* required attribute */
	std::string *SequenceId;	/* optional attribute */
	unsigned int MessageNumber;	/* required attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1029; } /* = unique id SOAP_TYPE_wsd__AppSequenceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsd__AppSequenceType() { wsd__AppSequenceType::soap_default(NULL); }
	virtual ~wsd__AppSequenceType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__ServiceNameType
#define SOAP_TYPE_wsa__ServiceNameType (1033)
/* Primitive wsa:ServiceNameType schema type: */
class SOAP_CMAC wsa__ServiceNameType
{
public:
	std::string __item;
	std::string *PortName;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1033; } /* = unique id SOAP_TYPE_wsa__ServiceNameType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__ServiceNameType() { wsa__ServiceNameType::soap_default(NULL); }
	virtual ~wsa__ServiceNameType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__Relationship
#define SOAP_TYPE_wsa__Relationship (1034)
/* Primitive wsa:Relationship schema type: */
class SOAP_CMAC wsa__Relationship
{
public:
	std::string __item;
	std::string *RelationshipType;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1034; } /* = unique id SOAP_TYPE_wsa__Relationship */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__Relationship() { wsa__Relationship::soap_default(NULL); }
	virtual ~wsa__Relationship() { }
};
#endif

#ifndef SOAP_TYPE_wsa__ReplyAfterType
#define SOAP_TYPE_wsa__ReplyAfterType (1035)
/* Primitive wsa:ReplyAfterType schema type: */
class SOAP_CMAC wsa__ReplyAfterType
{
public:
	std::string __item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1035; } /* = unique id SOAP_TYPE_wsa__ReplyAfterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__ReplyAfterType() { wsa__ReplyAfterType::soap_default(NULL); }
	virtual ~wsa__ReplyAfterType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__RetryAfterType
#define SOAP_TYPE_wsa__RetryAfterType (1036)
/* Primitive wsa:RetryAfterType schema type: */
class SOAP_CMAC wsa__RetryAfterType
{
public:
	std::string __item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1036; } /* = unique id SOAP_TYPE_wsa__RetryAfterType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__RetryAfterType() { wsa__RetryAfterType::soap_default(NULL); }
	virtual ~wsa__RetryAfterType() { }
};
#endif

#ifndef SOAP_TYPE_wsa__AttributedQName
#define SOAP_TYPE_wsa__AttributedQName (1037)
/* Primitive wsa:AttributedQName schema type: */
class SOAP_CMAC wsa__AttributedQName
{
public:
	std::string __item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1037; } /* = unique id SOAP_TYPE_wsa__AttributedQName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__AttributedQName() { wsa__AttributedQName::soap_default(NULL); }
	virtual ~wsa__AttributedQName() { }
};
#endif

#ifndef SOAP_TYPE_wsa__AttributedURI
#define SOAP_TYPE_wsa__AttributedURI (1038)
/* Primitive wsa:AttributedURI schema type: */
class SOAP_CMAC wsa__AttributedURI
{
public:
	std::string __item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 1038; } /* = unique id SOAP_TYPE_wsa__AttributedURI */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         wsa__AttributedURI() { wsa__AttributedURI::soap_default(NULL); }
	virtual ~wsa__AttributedURI() { }
};
#endif

#ifndef SOAP_TYPE___dn__Hello
#define SOAP_TYPE___dn__Hello (1959)
/* Operation wrapper: */
struct __dn__Hello
{
public:
	wsd__HelloType *dn__Hello;	/* optional element of type wsd:HelloType */
public:
	int soap_type() const { return 1959; } /* = unique id SOAP_TYPE___dn__Hello */
};
#endif

#ifndef SOAP_TYPE___dn__Bye
#define SOAP_TYPE___dn__Bye (1962)
/* Operation wrapper: */
struct __dn__Bye
{
public:
	wsd__ByeType *dn__Bye;	/* optional element of type wsd:ByeType */
public:
	int soap_type() const { return 1962; } /* = unique id SOAP_TYPE___dn__Bye */
};
#endif

#ifndef SOAP_TYPE___dn__Probe
#define SOAP_TYPE___dn__Probe (1966)
/* Operation wrapper: */
struct __dn__Probe
{
public:
	wsd__ProbeType *dn__Probe;	/* optional element of type wsd:ProbeType */
public:
	int soap_type() const { return 1966; } /* = unique id SOAP_TYPE___dn__Probe */
};
#endif

#ifndef SOAP_TYPE___tan__GetSupportedRules
#define SOAP_TYPE___tan__GetSupportedRules (1970)
/* Operation wrapper: */
struct __tan__GetSupportedRules
{
public:
	_tan__GetSupportedRules *tan__GetSupportedRules;	/* optional element of type tan:GetSupportedRules */
public:
	int soap_type() const { return 1970; } /* = unique id SOAP_TYPE___tan__GetSupportedRules */
};
#endif

#ifndef SOAP_TYPE___tan__CreateRules
#define SOAP_TYPE___tan__CreateRules (1974)
/* Operation wrapper: */
struct __tan__CreateRules
{
public:
	_tan__CreateRules *tan__CreateRules;	/* optional element of type tan:CreateRules */
public:
	int soap_type() const { return 1974; } /* = unique id SOAP_TYPE___tan__CreateRules */
};
#endif

#ifndef SOAP_TYPE___tan__DeleteRules
#define SOAP_TYPE___tan__DeleteRules (1978)
/* Operation wrapper: */
struct __tan__DeleteRules
{
public:
	_tan__DeleteRules *tan__DeleteRules;	/* optional element of type tan:DeleteRules */
public:
	int soap_type() const { return 1978; } /* = unique id SOAP_TYPE___tan__DeleteRules */
};
#endif

#ifndef SOAP_TYPE___tan__GetRules
#define SOAP_TYPE___tan__GetRules (1982)
/* Operation wrapper: */
struct __tan__GetRules
{
public:
	_tan__GetRules *tan__GetRules;	/* optional element of type tan:GetRules */
public:
	int soap_type() const { return 1982; } /* = unique id SOAP_TYPE___tan__GetRules */
};
#endif

#ifndef SOAP_TYPE___tan__ModifyRules
#define SOAP_TYPE___tan__ModifyRules (1986)
/* Operation wrapper: */
struct __tan__ModifyRules
{
public:
	_tan__ModifyRules *tan__ModifyRules;	/* optional element of type tan:ModifyRules */
public:
	int soap_type() const { return 1986; } /* = unique id SOAP_TYPE___tan__ModifyRules */
};
#endif

#ifndef SOAP_TYPE___tan__GetServiceCapabilities
#define SOAP_TYPE___tan__GetServiceCapabilities (1990)
/* Operation wrapper: */
struct __tan__GetServiceCapabilities
{
public:
	_tan__GetServiceCapabilities *tan__GetServiceCapabilities;	/* optional element of type tan:GetServiceCapabilities */
public:
	int soap_type() const { return 1990; } /* = unique id SOAP_TYPE___tan__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tan__GetSupportedAnalyticsModules
#define SOAP_TYPE___tan__GetSupportedAnalyticsModules (1994)
/* Operation wrapper: */
struct __tan__GetSupportedAnalyticsModules
{
public:
	_tan__GetSupportedAnalyticsModules *tan__GetSupportedAnalyticsModules;	/* optional element of type tan:GetSupportedAnalyticsModules */
public:
	int soap_type() const { return 1994; } /* = unique id SOAP_TYPE___tan__GetSupportedAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___tan__CreateAnalyticsModules
#define SOAP_TYPE___tan__CreateAnalyticsModules (1998)
/* Operation wrapper: */
struct __tan__CreateAnalyticsModules
{
public:
	_tan__CreateAnalyticsModules *tan__CreateAnalyticsModules;	/* optional element of type tan:CreateAnalyticsModules */
public:
	int soap_type() const { return 1998; } /* = unique id SOAP_TYPE___tan__CreateAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___tan__DeleteAnalyticsModules
#define SOAP_TYPE___tan__DeleteAnalyticsModules (2002)
/* Operation wrapper: */
struct __tan__DeleteAnalyticsModules
{
public:
	_tan__DeleteAnalyticsModules *tan__DeleteAnalyticsModules;	/* optional element of type tan:DeleteAnalyticsModules */
public:
	int soap_type() const { return 2002; } /* = unique id SOAP_TYPE___tan__DeleteAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___tan__GetAnalyticsModules
#define SOAP_TYPE___tan__GetAnalyticsModules (2006)
/* Operation wrapper: */
struct __tan__GetAnalyticsModules
{
public:
	_tan__GetAnalyticsModules *tan__GetAnalyticsModules;	/* optional element of type tan:GetAnalyticsModules */
public:
	int soap_type() const { return 2006; } /* = unique id SOAP_TYPE___tan__GetAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___tan__ModifyAnalyticsModules
#define SOAP_TYPE___tan__ModifyAnalyticsModules (2010)
/* Operation wrapper: */
struct __tan__ModifyAnalyticsModules
{
public:
	_tan__ModifyAnalyticsModules *tan__ModifyAnalyticsModules;	/* optional element of type tan:ModifyAnalyticsModules */
public:
	int soap_type() const { return 2010; } /* = unique id SOAP_TYPE___tan__ModifyAnalyticsModules */
};
#endif

#ifndef SOAP_TYPE___tds__GetServices
#define SOAP_TYPE___tds__GetServices (2014)
/* Operation wrapper: */
struct __tds__GetServices
{
public:
	_tds__GetServices *tds__GetServices;	/* optional element of type tds:GetServices */
public:
	int soap_type() const { return 2014; } /* = unique id SOAP_TYPE___tds__GetServices */
};
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities
#define SOAP_TYPE___tds__GetServiceCapabilities (2018)
/* Operation wrapper: */
struct __tds__GetServiceCapabilities
{
public:
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities;	/* optional element of type tds:GetServiceCapabilities */
public:
	int soap_type() const { return 2018; } /* = unique id SOAP_TYPE___tds__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation
#define SOAP_TYPE___tds__GetDeviceInformation (2022)
/* Operation wrapper: */
struct __tds__GetDeviceInformation
{
public:
	_tds__GetDeviceInformation *tds__GetDeviceInformation;	/* optional element of type tds:GetDeviceInformation */
public:
	int soap_type() const { return 2022; } /* = unique id SOAP_TYPE___tds__GetDeviceInformation */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime
#define SOAP_TYPE___tds__SetSystemDateAndTime (2026)
/* Operation wrapper: */
struct __tds__SetSystemDateAndTime
{
public:
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;	/* optional element of type tds:SetSystemDateAndTime */
public:
	int soap_type() const { return 2026; } /* = unique id SOAP_TYPE___tds__SetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime
#define SOAP_TYPE___tds__GetSystemDateAndTime (2030)
/* Operation wrapper: */
struct __tds__GetSystemDateAndTime
{
public:
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;	/* optional element of type tds:GetSystemDateAndTime */
public:
	int soap_type() const { return 2030; } /* = unique id SOAP_TYPE___tds__GetSystemDateAndTime */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault
#define SOAP_TYPE___tds__SetSystemFactoryDefault (2034)
/* Operation wrapper: */
struct __tds__SetSystemFactoryDefault
{
public:
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;	/* optional element of type tds:SetSystemFactoryDefault */
public:
	int soap_type() const { return 2034; } /* = unique id SOAP_TYPE___tds__SetSystemFactoryDefault */
};
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware
#define SOAP_TYPE___tds__UpgradeSystemFirmware (2038)
/* Operation wrapper: */
struct __tds__UpgradeSystemFirmware
{
public:
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;	/* optional element of type tds:UpgradeSystemFirmware */
public:
	int soap_type() const { return 2038; } /* = unique id SOAP_TYPE___tds__UpgradeSystemFirmware */
};
#endif

#ifndef SOAP_TYPE___tds__SystemReboot
#define SOAP_TYPE___tds__SystemReboot (2042)
/* Operation wrapper: */
struct __tds__SystemReboot
{
public:
	_tds__SystemReboot *tds__SystemReboot;	/* optional element of type tds:SystemReboot */
public:
	int soap_type() const { return 2042; } /* = unique id SOAP_TYPE___tds__SystemReboot */
};
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem
#define SOAP_TYPE___tds__RestoreSystem (2046)
/* Operation wrapper: */
struct __tds__RestoreSystem
{
public:
	_tds__RestoreSystem *tds__RestoreSystem;	/* optional element of type tds:RestoreSystem */
public:
	int soap_type() const { return 2046; } /* = unique id SOAP_TYPE___tds__RestoreSystem */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup
#define SOAP_TYPE___tds__GetSystemBackup (2050)
/* Operation wrapper: */
struct __tds__GetSystemBackup
{
public:
	_tds__GetSystemBackup *tds__GetSystemBackup;	/* optional element of type tds:GetSystemBackup */
public:
	int soap_type() const { return 2050; } /* = unique id SOAP_TYPE___tds__GetSystemBackup */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog
#define SOAP_TYPE___tds__GetSystemLog (2054)
/* Operation wrapper: */
struct __tds__GetSystemLog
{
public:
	_tds__GetSystemLog *tds__GetSystemLog;	/* optional element of type tds:GetSystemLog */
public:
	int soap_type() const { return 2054; } /* = unique id SOAP_TYPE___tds__GetSystemLog */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation
#define SOAP_TYPE___tds__GetSystemSupportInformation (2058)
/* Operation wrapper: */
struct __tds__GetSystemSupportInformation
{
public:
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;	/* optional element of type tds:GetSystemSupportInformation */
public:
	int soap_type() const { return 2058; } /* = unique id SOAP_TYPE___tds__GetSystemSupportInformation */
};
#endif

#ifndef SOAP_TYPE___tds__GetScopes
#define SOAP_TYPE___tds__GetScopes (2062)
/* Operation wrapper: */
struct __tds__GetScopes
{
public:
	_tds__GetScopes *tds__GetScopes;	/* optional element of type tds:GetScopes */
public:
	int soap_type() const { return 2062; } /* = unique id SOAP_TYPE___tds__GetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__SetScopes
#define SOAP_TYPE___tds__SetScopes (2066)
/* Operation wrapper: */
struct __tds__SetScopes
{
public:
	_tds__SetScopes *tds__SetScopes;	/* optional element of type tds:SetScopes */
public:
	int soap_type() const { return 2066; } /* = unique id SOAP_TYPE___tds__SetScopes */
};
#endif

#ifndef SOAP_TYPE___tds__AddScopes
#define SOAP_TYPE___tds__AddScopes (2070)
/* Operation wrapper: */
struct __tds__AddScopes
{
public:
	_tds__AddScopes *tds__AddScopes;	/* optional element of type tds:AddScopes */
public:
	int soap_type() const { return 2070; } /* = unique id SOAP_TYPE___tds__AddScopes */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes
#define SOAP_TYPE___tds__RemoveScopes (2074)
/* Operation wrapper: */
struct __tds__RemoveScopes
{
public:
	_tds__RemoveScopes *tds__RemoveScopes;	/* optional element of type tds:RemoveScopes */
public:
	int soap_type() const { return 2074; } /* = unique id SOAP_TYPE___tds__RemoveScopes */
};
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode
#define SOAP_TYPE___tds__GetDiscoveryMode (2078)
/* Operation wrapper: */
struct __tds__GetDiscoveryMode
{
public:
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode;	/* optional element of type tds:GetDiscoveryMode */
public:
	int soap_type() const { return 2078; } /* = unique id SOAP_TYPE___tds__GetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode
#define SOAP_TYPE___tds__SetDiscoveryMode (2082)
/* Operation wrapper: */
struct __tds__SetDiscoveryMode
{
public:
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode;	/* optional element of type tds:SetDiscoveryMode */
public:
	int soap_type() const { return 2082; } /* = unique id SOAP_TYPE___tds__SetDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode (2086)
/* Operation wrapper: */
struct __tds__GetRemoteDiscoveryMode
{
public:
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;	/* optional element of type tds:GetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2086; } /* = unique id SOAP_TYPE___tds__GetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode (2090)
/* Operation wrapper: */
struct __tds__SetRemoteDiscoveryMode
{
public:
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;	/* optional element of type tds:SetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2090; } /* = unique id SOAP_TYPE___tds__SetRemoteDiscoveryMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses
#define SOAP_TYPE___tds__GetDPAddresses (2094)
/* Operation wrapper: */
struct __tds__GetDPAddresses
{
public:
	_tds__GetDPAddresses *tds__GetDPAddresses;	/* optional element of type tds:GetDPAddresses */
public:
	int soap_type() const { return 2094; } /* = unique id SOAP_TYPE___tds__GetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference
#define SOAP_TYPE___tds__GetEndpointReference (2098)
/* Operation wrapper: */
struct __tds__GetEndpointReference
{
public:
	_tds__GetEndpointReference *tds__GetEndpointReference;	/* optional element of type tds:GetEndpointReference */
public:
	int soap_type() const { return 2098; } /* = unique id SOAP_TYPE___tds__GetEndpointReference */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser
#define SOAP_TYPE___tds__GetRemoteUser (2102)
/* Operation wrapper: */
struct __tds__GetRemoteUser
{
public:
	_tds__GetRemoteUser *tds__GetRemoteUser;	/* optional element of type tds:GetRemoteUser */
public:
	int soap_type() const { return 2102; } /* = unique id SOAP_TYPE___tds__GetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser
#define SOAP_TYPE___tds__SetRemoteUser (2106)
/* Operation wrapper: */
struct __tds__SetRemoteUser
{
public:
	_tds__SetRemoteUser *tds__SetRemoteUser;	/* optional element of type tds:SetRemoteUser */
public:
	int soap_type() const { return 2106; } /* = unique id SOAP_TYPE___tds__SetRemoteUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetUsers
#define SOAP_TYPE___tds__GetUsers (2110)
/* Operation wrapper: */
struct __tds__GetUsers
{
public:
	_tds__GetUsers *tds__GetUsers;	/* optional element of type tds:GetUsers */
public:
	int soap_type() const { return 2110; } /* = unique id SOAP_TYPE___tds__GetUsers */
};
#endif

#ifndef SOAP_TYPE___tds__CreateUsers
#define SOAP_TYPE___tds__CreateUsers (2114)
/* Operation wrapper: */
struct __tds__CreateUsers
{
public:
	_tds__CreateUsers *tds__CreateUsers;	/* optional element of type tds:CreateUsers */
public:
	int soap_type() const { return 2114; } /* = unique id SOAP_TYPE___tds__CreateUsers */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers
#define SOAP_TYPE___tds__DeleteUsers (2118)
/* Operation wrapper: */
struct __tds__DeleteUsers
{
public:
	_tds__DeleteUsers *tds__DeleteUsers;	/* optional element of type tds:DeleteUsers */
public:
	int soap_type() const { return 2118; } /* = unique id SOAP_TYPE___tds__DeleteUsers */
};
#endif

#ifndef SOAP_TYPE___tds__SetUser
#define SOAP_TYPE___tds__SetUser (2122)
/* Operation wrapper: */
struct __tds__SetUser
{
public:
	_tds__SetUser *tds__SetUser;	/* optional element of type tds:SetUser */
public:
	int soap_type() const { return 2122; } /* = unique id SOAP_TYPE___tds__SetUser */
};
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl
#define SOAP_TYPE___tds__GetWsdlUrl (2126)
/* Operation wrapper: */
struct __tds__GetWsdlUrl
{
public:
	_tds__GetWsdlUrl *tds__GetWsdlUrl;	/* optional element of type tds:GetWsdlUrl */
public:
	int soap_type() const { return 2126; } /* = unique id SOAP_TYPE___tds__GetWsdlUrl */
};
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities
#define SOAP_TYPE___tds__GetCapabilities (2130)
/* Operation wrapper: */
struct __tds__GetCapabilities
{
public:
	_tds__GetCapabilities *tds__GetCapabilities;	/* optional element of type tds:GetCapabilities */
public:
	int soap_type() const { return 2130; } /* = unique id SOAP_TYPE___tds__GetCapabilities */
};
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses
#define SOAP_TYPE___tds__SetDPAddresses (2134)
/* Operation wrapper: */
struct __tds__SetDPAddresses
{
public:
	_tds__SetDPAddresses *tds__SetDPAddresses;	/* optional element of type tds:SetDPAddresses */
public:
	int soap_type() const { return 2134; } /* = unique id SOAP_TYPE___tds__SetDPAddresses */
};
#endif

#ifndef SOAP_TYPE___tds__GetHostname
#define SOAP_TYPE___tds__GetHostname (2138)
/* Operation wrapper: */
struct __tds__GetHostname
{
public:
	_tds__GetHostname *tds__GetHostname;	/* optional element of type tds:GetHostname */
public:
	int soap_type() const { return 2138; } /* = unique id SOAP_TYPE___tds__GetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostname
#define SOAP_TYPE___tds__SetHostname (2142)
/* Operation wrapper: */
struct __tds__SetHostname
{
public:
	_tds__SetHostname *tds__SetHostname;	/* optional element of type tds:SetHostname */
public:
	int soap_type() const { return 2142; } /* = unique id SOAP_TYPE___tds__SetHostname */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP
#define SOAP_TYPE___tds__SetHostnameFromDHCP (2146)
/* Operation wrapper: */
struct __tds__SetHostnameFromDHCP
{
public:
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;	/* optional element of type tds:SetHostnameFromDHCP */
public:
	int soap_type() const { return 2146; } /* = unique id SOAP_TYPE___tds__SetHostnameFromDHCP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDNS
#define SOAP_TYPE___tds__GetDNS (2150)
/* Operation wrapper: */
struct __tds__GetDNS
{
public:
	_tds__GetDNS *tds__GetDNS;	/* optional element of type tds:GetDNS */
public:
	int soap_type() const { return 2150; } /* = unique id SOAP_TYPE___tds__GetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDNS
#define SOAP_TYPE___tds__SetDNS (2154)
/* Operation wrapper: */
struct __tds__SetDNS
{
public:
	_tds__SetDNS *tds__SetDNS;	/* optional element of type tds:SetDNS */
public:
	int soap_type() const { return 2154; } /* = unique id SOAP_TYPE___tds__SetDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNTP
#define SOAP_TYPE___tds__GetNTP (2158)
/* Operation wrapper: */
struct __tds__GetNTP
{
public:
	_tds__GetNTP *tds__GetNTP;	/* optional element of type tds:GetNTP */
public:
	int soap_type() const { return 2158; } /* = unique id SOAP_TYPE___tds__GetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__SetNTP
#define SOAP_TYPE___tds__SetNTP (2162)
/* Operation wrapper: */
struct __tds__SetNTP
{
public:
	_tds__SetNTP *tds__SetNTP;	/* optional element of type tds:SetNTP */
public:
	int soap_type() const { return 2162; } /* = unique id SOAP_TYPE___tds__SetNTP */
};
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS
#define SOAP_TYPE___tds__GetDynamicDNS (2166)
/* Operation wrapper: */
struct __tds__GetDynamicDNS
{
public:
	_tds__GetDynamicDNS *tds__GetDynamicDNS;	/* optional element of type tds:GetDynamicDNS */
public:
	int soap_type() const { return 2166; } /* = unique id SOAP_TYPE___tds__GetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS
#define SOAP_TYPE___tds__SetDynamicDNS (2170)
/* Operation wrapper: */
struct __tds__SetDynamicDNS
{
public:
	_tds__SetDynamicDNS *tds__SetDynamicDNS;	/* optional element of type tds:SetDynamicDNS */
public:
	int soap_type() const { return 2170; } /* = unique id SOAP_TYPE___tds__SetDynamicDNS */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces
#define SOAP_TYPE___tds__GetNetworkInterfaces (2174)
/* Operation wrapper: */
struct __tds__GetNetworkInterfaces
{
public:
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;	/* optional element of type tds:GetNetworkInterfaces */
public:
	int soap_type() const { return 2174; } /* = unique id SOAP_TYPE___tds__GetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces
#define SOAP_TYPE___tds__SetNetworkInterfaces (2178)
/* Operation wrapper: */
struct __tds__SetNetworkInterfaces
{
public:
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;	/* optional element of type tds:SetNetworkInterfaces */
public:
	int soap_type() const { return 2178; } /* = unique id SOAP_TYPE___tds__SetNetworkInterfaces */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols
#define SOAP_TYPE___tds__GetNetworkProtocols (2182)
/* Operation wrapper: */
struct __tds__GetNetworkProtocols
{
public:
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols;	/* optional element of type tds:GetNetworkProtocols */
public:
	int soap_type() const { return 2182; } /* = unique id SOAP_TYPE___tds__GetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols
#define SOAP_TYPE___tds__SetNetworkProtocols (2186)
/* Operation wrapper: */
struct __tds__SetNetworkProtocols
{
public:
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols;	/* optional element of type tds:SetNetworkProtocols */
public:
	int soap_type() const { return 2186; } /* = unique id SOAP_TYPE___tds__SetNetworkProtocols */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway
#define SOAP_TYPE___tds__GetNetworkDefaultGateway (2190)
/* Operation wrapper: */
struct __tds__GetNetworkDefaultGateway
{
public:
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;	/* optional element of type tds:GetNetworkDefaultGateway */
public:
	int soap_type() const { return 2190; } /* = unique id SOAP_TYPE___tds__GetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway
#define SOAP_TYPE___tds__SetNetworkDefaultGateway (2194)
/* Operation wrapper: */
struct __tds__SetNetworkDefaultGateway
{
public:
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;	/* optional element of type tds:SetNetworkDefaultGateway */
public:
	int soap_type() const { return 2194; } /* = unique id SOAP_TYPE___tds__SetNetworkDefaultGateway */
};
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration
#define SOAP_TYPE___tds__GetZeroConfiguration (2198)
/* Operation wrapper: */
struct __tds__GetZeroConfiguration
{
public:
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration;	/* optional element of type tds:GetZeroConfiguration */
public:
	int soap_type() const { return 2198; } /* = unique id SOAP_TYPE___tds__GetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration
#define SOAP_TYPE___tds__SetZeroConfiguration (2202)
/* Operation wrapper: */
struct __tds__SetZeroConfiguration
{
public:
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration;	/* optional element of type tds:SetZeroConfiguration */
public:
	int soap_type() const { return 2202; } /* = unique id SOAP_TYPE___tds__SetZeroConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter
#define SOAP_TYPE___tds__GetIPAddressFilter (2206)
/* Operation wrapper: */
struct __tds__GetIPAddressFilter
{
public:
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter;	/* optional element of type tds:GetIPAddressFilter */
public:
	int soap_type() const { return 2206; } /* = unique id SOAP_TYPE___tds__GetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter
#define SOAP_TYPE___tds__SetIPAddressFilter (2210)
/* Operation wrapper: */
struct __tds__SetIPAddressFilter
{
public:
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter;	/* optional element of type tds:SetIPAddressFilter */
public:
	int soap_type() const { return 2210; } /* = unique id SOAP_TYPE___tds__SetIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter
#define SOAP_TYPE___tds__AddIPAddressFilter (2214)
/* Operation wrapper: */
struct __tds__AddIPAddressFilter
{
public:
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter;	/* optional element of type tds:AddIPAddressFilter */
public:
	int soap_type() const { return 2214; } /* = unique id SOAP_TYPE___tds__AddIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter
#define SOAP_TYPE___tds__RemoveIPAddressFilter (2218)
/* Operation wrapper: */
struct __tds__RemoveIPAddressFilter
{
public:
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;	/* optional element of type tds:RemoveIPAddressFilter */
public:
	int soap_type() const { return 2218; } /* = unique id SOAP_TYPE___tds__RemoveIPAddressFilter */
};
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy
#define SOAP_TYPE___tds__GetAccessPolicy (2222)
/* Operation wrapper: */
struct __tds__GetAccessPolicy
{
public:
	_tds__GetAccessPolicy *tds__GetAccessPolicy;	/* optional element of type tds:GetAccessPolicy */
public:
	int soap_type() const { return 2222; } /* = unique id SOAP_TYPE___tds__GetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy
#define SOAP_TYPE___tds__SetAccessPolicy (2226)
/* Operation wrapper: */
struct __tds__SetAccessPolicy
{
public:
	_tds__SetAccessPolicy *tds__SetAccessPolicy;	/* optional element of type tds:SetAccessPolicy */
public:
	int soap_type() const { return 2226; } /* = unique id SOAP_TYPE___tds__SetAccessPolicy */
};
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate
#define SOAP_TYPE___tds__CreateCertificate (2230)
/* Operation wrapper: */
struct __tds__CreateCertificate
{
public:
	_tds__CreateCertificate *tds__CreateCertificate;	/* optional element of type tds:CreateCertificate */
public:
	int soap_type() const { return 2230; } /* = unique id SOAP_TYPE___tds__CreateCertificate */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificates
#define SOAP_TYPE___tds__GetCertificates (2234)
/* Operation wrapper: */
struct __tds__GetCertificates
{
public:
	_tds__GetCertificates *tds__GetCertificates;	/* optional element of type tds:GetCertificates */
public:
	int soap_type() const { return 2234; } /* = unique id SOAP_TYPE___tds__GetCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus
#define SOAP_TYPE___tds__GetCertificatesStatus (2238)
/* Operation wrapper: */
struct __tds__GetCertificatesStatus
{
public:
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus;	/* optional element of type tds:GetCertificatesStatus */
public:
	int soap_type() const { return 2238; } /* = unique id SOAP_TYPE___tds__GetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus
#define SOAP_TYPE___tds__SetCertificatesStatus (2242)
/* Operation wrapper: */
struct __tds__SetCertificatesStatus
{
public:
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus;	/* optional element of type tds:SetCertificatesStatus */
public:
	int soap_type() const { return 2242; } /* = unique id SOAP_TYPE___tds__SetCertificatesStatus */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates
#define SOAP_TYPE___tds__DeleteCertificates (2246)
/* Operation wrapper: */
struct __tds__DeleteCertificates
{
public:
	_tds__DeleteCertificates *tds__DeleteCertificates;	/* optional element of type tds:DeleteCertificates */
public:
	int soap_type() const { return 2246; } /* = unique id SOAP_TYPE___tds__DeleteCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request
#define SOAP_TYPE___tds__GetPkcs10Request (2250)
/* Operation wrapper: */
struct __tds__GetPkcs10Request
{
public:
	_tds__GetPkcs10Request *tds__GetPkcs10Request;	/* optional element of type tds:GetPkcs10Request */
public:
	int soap_type() const { return 2250; } /* = unique id SOAP_TYPE___tds__GetPkcs10Request */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates
#define SOAP_TYPE___tds__LoadCertificates (2254)
/* Operation wrapper: */
struct __tds__LoadCertificates
{
public:
	_tds__LoadCertificates *tds__LoadCertificates;	/* optional element of type tds:LoadCertificates */
public:
	int soap_type() const { return 2254; } /* = unique id SOAP_TYPE___tds__LoadCertificates */
};
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode
#define SOAP_TYPE___tds__GetClientCertificateMode (2258)
/* Operation wrapper: */
struct __tds__GetClientCertificateMode
{
public:
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode;	/* optional element of type tds:GetClientCertificateMode */
public:
	int soap_type() const { return 2258; } /* = unique id SOAP_TYPE___tds__GetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode
#define SOAP_TYPE___tds__SetClientCertificateMode (2262)
/* Operation wrapper: */
struct __tds__SetClientCertificateMode
{
public:
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode;	/* optional element of type tds:SetClientCertificateMode */
public:
	int soap_type() const { return 2262; } /* = unique id SOAP_TYPE___tds__SetClientCertificateMode */
};
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs
#define SOAP_TYPE___tds__GetRelayOutputs (2266)
/* Operation wrapper: */
struct __tds__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 2266; } /* = unique id SOAP_TYPE___tds__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings
#define SOAP_TYPE___tds__SetRelayOutputSettings (2270)
/* Operation wrapper: */
struct __tds__SetRelayOutputSettings
{
public:
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;	/* optional element of type tds:SetRelayOutputSettings */
public:
	int soap_type() const { return 2270; } /* = unique id SOAP_TYPE___tds__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState
#define SOAP_TYPE___tds__SetRelayOutputState (2274)
/* Operation wrapper: */
struct __tds__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 2274; } /* = unique id SOAP_TYPE___tds__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand
#define SOAP_TYPE___tds__SendAuxiliaryCommand (2278)
/* Operation wrapper: */
struct __tds__SendAuxiliaryCommand
{
public:
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;	/* optional element of type tds:SendAuxiliaryCommand */
public:
	int soap_type() const { return 2278; } /* = unique id SOAP_TYPE___tds__SendAuxiliaryCommand */
};
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates
#define SOAP_TYPE___tds__GetCACertificates (2282)
/* Operation wrapper: */
struct __tds__GetCACertificates
{
public:
	_tds__GetCACertificates *tds__GetCACertificates;	/* optional element of type tds:GetCACertificates */
public:
	int soap_type() const { return 2282; } /* = unique id SOAP_TYPE___tds__GetCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey (2286)
/* Operation wrapper: */
struct __tds__LoadCertificateWithPrivateKey
{
public:
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;	/* optional element of type tds:LoadCertificateWithPrivateKey */
public:
	int soap_type() const { return 2286; } /* = unique id SOAP_TYPE___tds__LoadCertificateWithPrivateKey */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation
#define SOAP_TYPE___tds__GetCertificateInformation (2290)
/* Operation wrapper: */
struct __tds__GetCertificateInformation
{
public:
	_tds__GetCertificateInformation *tds__GetCertificateInformation;	/* optional element of type tds:GetCertificateInformation */
public:
	int soap_type() const { return 2290; } /* = unique id SOAP_TYPE___tds__GetCertificateInformation */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates
#define SOAP_TYPE___tds__LoadCACertificates (2294)
/* Operation wrapper: */
struct __tds__LoadCACertificates
{
public:
	_tds__LoadCACertificates *tds__LoadCACertificates;	/* optional element of type tds:LoadCACertificates */
public:
	int soap_type() const { return 2294; } /* = unique id SOAP_TYPE___tds__LoadCACertificates */
};
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration
#define SOAP_TYPE___tds__CreateDot1XConfiguration (2298)
/* Operation wrapper: */
struct __tds__CreateDot1XConfiguration
{
public:
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;	/* optional element of type tds:CreateDot1XConfiguration */
public:
	int soap_type() const { return 2298; } /* = unique id SOAP_TYPE___tds__CreateDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration
#define SOAP_TYPE___tds__SetDot1XConfiguration (2302)
/* Operation wrapper: */
struct __tds__SetDot1XConfiguration
{
public:
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;	/* optional element of type tds:SetDot1XConfiguration */
public:
	int soap_type() const { return 2302; } /* = unique id SOAP_TYPE___tds__SetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration
#define SOAP_TYPE___tds__GetDot1XConfiguration (2306)
/* Operation wrapper: */
struct __tds__GetDot1XConfiguration
{
public:
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;	/* optional element of type tds:GetDot1XConfiguration */
public:
	int soap_type() const { return 2306; } /* = unique id SOAP_TYPE___tds__GetDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations
#define SOAP_TYPE___tds__GetDot1XConfigurations (2310)
/* Operation wrapper: */
struct __tds__GetDot1XConfigurations
{
public:
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;	/* optional element of type tds:GetDot1XConfigurations */
public:
	int soap_type() const { return 2310; } /* = unique id SOAP_TYPE___tds__GetDot1XConfigurations */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration
#define SOAP_TYPE___tds__DeleteDot1XConfiguration (2314)
/* Operation wrapper: */
struct __tds__DeleteDot1XConfiguration
{
public:
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;	/* optional element of type tds:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 2314; } /* = unique id SOAP_TYPE___tds__DeleteDot1XConfiguration */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities
#define SOAP_TYPE___tds__GetDot11Capabilities (2318)
/* Operation wrapper: */
struct __tds__GetDot11Capabilities
{
public:
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities;	/* optional element of type tds:GetDot11Capabilities */
public:
	int soap_type() const { return 2318; } /* = unique id SOAP_TYPE___tds__GetDot11Capabilities */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status
#define SOAP_TYPE___tds__GetDot11Status (2322)
/* Operation wrapper: */
struct __tds__GetDot11Status
{
public:
	_tds__GetDot11Status *tds__GetDot11Status;	/* optional element of type tds:GetDot11Status */
public:
	int soap_type() const { return 2322; } /* = unique id SOAP_TYPE___tds__GetDot11Status */
};
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks
#define SOAP_TYPE___tds__ScanAvailableDot11Networks (2326)
/* Operation wrapper: */
struct __tds__ScanAvailableDot11Networks
{
public:
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;	/* optional element of type tds:ScanAvailableDot11Networks */
public:
	int soap_type() const { return 2326; } /* = unique id SOAP_TYPE___tds__ScanAvailableDot11Networks */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris
#define SOAP_TYPE___tds__GetSystemUris (2330)
/* Operation wrapper: */
struct __tds__GetSystemUris
{
public:
	_tds__GetSystemUris *tds__GetSystemUris;	/* optional element of type tds:GetSystemUris */
public:
	int soap_type() const { return 2330; } /* = unique id SOAP_TYPE___tds__GetSystemUris */
};
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade
#define SOAP_TYPE___tds__StartFirmwareUpgrade (2334)
/* Operation wrapper: */
struct __tds__StartFirmwareUpgrade
{
public:
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;	/* optional element of type tds:StartFirmwareUpgrade */
public:
	int soap_type() const { return 2334; } /* = unique id SOAP_TYPE___tds__StartFirmwareUpgrade */
};
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore
#define SOAP_TYPE___tds__StartSystemRestore (2338)
/* Operation wrapper: */
struct __tds__StartSystemRestore
{
public:
	_tds__StartSystemRestore *tds__StartSystemRestore;	/* optional element of type tds:StartSystemRestore */
public:
	int soap_type() const { return 2338; } /* = unique id SOAP_TYPE___tds__StartSystemRestore */
};
#endif

#ifndef SOAP_TYPE___tds__GetServices_
#define SOAP_TYPE___tds__GetServices_ (2340)
/* Operation wrapper: */
struct __tds__GetServices_
{
public:
	_tds__GetServices *tds__GetServices;	/* optional element of type tds:GetServices */
public:
	int soap_type() const { return 2340; } /* = unique id SOAP_TYPE___tds__GetServices_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetServiceCapabilities_
#define SOAP_TYPE___tds__GetServiceCapabilities_ (2342)
/* Operation wrapper: */
struct __tds__GetServiceCapabilities_
{
public:
	_tds__GetServiceCapabilities *tds__GetServiceCapabilities;	/* optional element of type tds:GetServiceCapabilities */
public:
	int soap_type() const { return 2342; } /* = unique id SOAP_TYPE___tds__GetServiceCapabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDeviceInformation_
#define SOAP_TYPE___tds__GetDeviceInformation_ (2344)
/* Operation wrapper: */
struct __tds__GetDeviceInformation_
{
public:
	_tds__GetDeviceInformation *tds__GetDeviceInformation;	/* optional element of type tds:GetDeviceInformation */
public:
	int soap_type() const { return 2344; } /* = unique id SOAP_TYPE___tds__GetDeviceInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemDateAndTime_
#define SOAP_TYPE___tds__SetSystemDateAndTime_ (2346)
/* Operation wrapper: */
struct __tds__SetSystemDateAndTime_
{
public:
	_tds__SetSystemDateAndTime *tds__SetSystemDateAndTime;	/* optional element of type tds:SetSystemDateAndTime */
public:
	int soap_type() const { return 2346; } /* = unique id SOAP_TYPE___tds__SetSystemDateAndTime_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemDateAndTime_
#define SOAP_TYPE___tds__GetSystemDateAndTime_ (2348)
/* Operation wrapper: */
struct __tds__GetSystemDateAndTime_
{
public:
	_tds__GetSystemDateAndTime *tds__GetSystemDateAndTime;	/* optional element of type tds:GetSystemDateAndTime */
public:
	int soap_type() const { return 2348; } /* = unique id SOAP_TYPE___tds__GetSystemDateAndTime_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetSystemFactoryDefault_
#define SOAP_TYPE___tds__SetSystemFactoryDefault_ (2350)
/* Operation wrapper: */
struct __tds__SetSystemFactoryDefault_
{
public:
	_tds__SetSystemFactoryDefault *tds__SetSystemFactoryDefault;	/* optional element of type tds:SetSystemFactoryDefault */
public:
	int soap_type() const { return 2350; } /* = unique id SOAP_TYPE___tds__SetSystemFactoryDefault_ */
};
#endif

#ifndef SOAP_TYPE___tds__UpgradeSystemFirmware_
#define SOAP_TYPE___tds__UpgradeSystemFirmware_ (2352)
/* Operation wrapper: */
struct __tds__UpgradeSystemFirmware_
{
public:
	_tds__UpgradeSystemFirmware *tds__UpgradeSystemFirmware;	/* optional element of type tds:UpgradeSystemFirmware */
public:
	int soap_type() const { return 2352; } /* = unique id SOAP_TYPE___tds__UpgradeSystemFirmware_ */
};
#endif

#ifndef SOAP_TYPE___tds__SystemReboot_
#define SOAP_TYPE___tds__SystemReboot_ (2354)
/* Operation wrapper: */
struct __tds__SystemReboot_
{
public:
	_tds__SystemReboot *tds__SystemReboot;	/* optional element of type tds:SystemReboot */
public:
	int soap_type() const { return 2354; } /* = unique id SOAP_TYPE___tds__SystemReboot_ */
};
#endif

#ifndef SOAP_TYPE___tds__RestoreSystem_
#define SOAP_TYPE___tds__RestoreSystem_ (2356)
/* Operation wrapper: */
struct __tds__RestoreSystem_
{
public:
	_tds__RestoreSystem *tds__RestoreSystem;	/* optional element of type tds:RestoreSystem */
public:
	int soap_type() const { return 2356; } /* = unique id SOAP_TYPE___tds__RestoreSystem_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemBackup_
#define SOAP_TYPE___tds__GetSystemBackup_ (2358)
/* Operation wrapper: */
struct __tds__GetSystemBackup_
{
public:
	_tds__GetSystemBackup *tds__GetSystemBackup;	/* optional element of type tds:GetSystemBackup */
public:
	int soap_type() const { return 2358; } /* = unique id SOAP_TYPE___tds__GetSystemBackup_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemLog_
#define SOAP_TYPE___tds__GetSystemLog_ (2360)
/* Operation wrapper: */
struct __tds__GetSystemLog_
{
public:
	_tds__GetSystemLog *tds__GetSystemLog;	/* optional element of type tds:GetSystemLog */
public:
	int soap_type() const { return 2360; } /* = unique id SOAP_TYPE___tds__GetSystemLog_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemSupportInformation_
#define SOAP_TYPE___tds__GetSystemSupportInformation_ (2362)
/* Operation wrapper: */
struct __tds__GetSystemSupportInformation_
{
public:
	_tds__GetSystemSupportInformation *tds__GetSystemSupportInformation;	/* optional element of type tds:GetSystemSupportInformation */
public:
	int soap_type() const { return 2362; } /* = unique id SOAP_TYPE___tds__GetSystemSupportInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetScopes_
#define SOAP_TYPE___tds__GetScopes_ (2364)
/* Operation wrapper: */
struct __tds__GetScopes_
{
public:
	_tds__GetScopes *tds__GetScopes;	/* optional element of type tds:GetScopes */
public:
	int soap_type() const { return 2364; } /* = unique id SOAP_TYPE___tds__GetScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetScopes_
#define SOAP_TYPE___tds__SetScopes_ (2366)
/* Operation wrapper: */
struct __tds__SetScopes_
{
public:
	_tds__SetScopes *tds__SetScopes;	/* optional element of type tds:SetScopes */
public:
	int soap_type() const { return 2366; } /* = unique id SOAP_TYPE___tds__SetScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__AddScopes_
#define SOAP_TYPE___tds__AddScopes_ (2368)
/* Operation wrapper: */
struct __tds__AddScopes_
{
public:
	_tds__AddScopes *tds__AddScopes;	/* optional element of type tds:AddScopes */
public:
	int soap_type() const { return 2368; } /* = unique id SOAP_TYPE___tds__AddScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveScopes_
#define SOAP_TYPE___tds__RemoveScopes_ (2370)
/* Operation wrapper: */
struct __tds__RemoveScopes_
{
public:
	_tds__RemoveScopes *tds__RemoveScopes;	/* optional element of type tds:RemoveScopes */
public:
	int soap_type() const { return 2370; } /* = unique id SOAP_TYPE___tds__RemoveScopes_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDiscoveryMode_
#define SOAP_TYPE___tds__GetDiscoveryMode_ (2372)
/* Operation wrapper: */
struct __tds__GetDiscoveryMode_
{
public:
	_tds__GetDiscoveryMode *tds__GetDiscoveryMode;	/* optional element of type tds:GetDiscoveryMode */
public:
	int soap_type() const { return 2372; } /* = unique id SOAP_TYPE___tds__GetDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDiscoveryMode_
#define SOAP_TYPE___tds__SetDiscoveryMode_ (2374)
/* Operation wrapper: */
struct __tds__SetDiscoveryMode_
{
public:
	_tds__SetDiscoveryMode *tds__SetDiscoveryMode;	/* optional element of type tds:SetDiscoveryMode */
public:
	int soap_type() const { return 2374; } /* = unique id SOAP_TYPE___tds__SetDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteDiscoveryMode_
#define SOAP_TYPE___tds__GetRemoteDiscoveryMode_ (2376)
/* Operation wrapper: */
struct __tds__GetRemoteDiscoveryMode_
{
public:
	_tds__GetRemoteDiscoveryMode *tds__GetRemoteDiscoveryMode;	/* optional element of type tds:GetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2376; } /* = unique id SOAP_TYPE___tds__GetRemoteDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteDiscoveryMode_
#define SOAP_TYPE___tds__SetRemoteDiscoveryMode_ (2378)
/* Operation wrapper: */
struct __tds__SetRemoteDiscoveryMode_
{
public:
	_tds__SetRemoteDiscoveryMode *tds__SetRemoteDiscoveryMode;	/* optional element of type tds:SetRemoteDiscoveryMode */
public:
	int soap_type() const { return 2378; } /* = unique id SOAP_TYPE___tds__SetRemoteDiscoveryMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDPAddresses_
#define SOAP_TYPE___tds__GetDPAddresses_ (2380)
/* Operation wrapper: */
struct __tds__GetDPAddresses_
{
public:
	_tds__GetDPAddresses *tds__GetDPAddresses;	/* optional element of type tds:GetDPAddresses */
public:
	int soap_type() const { return 2380; } /* = unique id SOAP_TYPE___tds__GetDPAddresses_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetEndpointReference_
#define SOAP_TYPE___tds__GetEndpointReference_ (2382)
/* Operation wrapper: */
struct __tds__GetEndpointReference_
{
public:
	_tds__GetEndpointReference *tds__GetEndpointReference;	/* optional element of type tds:GetEndpointReference */
public:
	int soap_type() const { return 2382; } /* = unique id SOAP_TYPE___tds__GetEndpointReference_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRemoteUser_
#define SOAP_TYPE___tds__GetRemoteUser_ (2384)
/* Operation wrapper: */
struct __tds__GetRemoteUser_
{
public:
	_tds__GetRemoteUser *tds__GetRemoteUser;	/* optional element of type tds:GetRemoteUser */
public:
	int soap_type() const { return 2384; } /* = unique id SOAP_TYPE___tds__GetRemoteUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRemoteUser_
#define SOAP_TYPE___tds__SetRemoteUser_ (2386)
/* Operation wrapper: */
struct __tds__SetRemoteUser_
{
public:
	_tds__SetRemoteUser *tds__SetRemoteUser;	/* optional element of type tds:SetRemoteUser */
public:
	int soap_type() const { return 2386; } /* = unique id SOAP_TYPE___tds__SetRemoteUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetUsers_
#define SOAP_TYPE___tds__GetUsers_ (2388)
/* Operation wrapper: */
struct __tds__GetUsers_
{
public:
	_tds__GetUsers *tds__GetUsers;	/* optional element of type tds:GetUsers */
public:
	int soap_type() const { return 2388; } /* = unique id SOAP_TYPE___tds__GetUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateUsers_
#define SOAP_TYPE___tds__CreateUsers_ (2390)
/* Operation wrapper: */
struct __tds__CreateUsers_
{
public:
	_tds__CreateUsers *tds__CreateUsers;	/* optional element of type tds:CreateUsers */
public:
	int soap_type() const { return 2390; } /* = unique id SOAP_TYPE___tds__CreateUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteUsers_
#define SOAP_TYPE___tds__DeleteUsers_ (2392)
/* Operation wrapper: */
struct __tds__DeleteUsers_
{
public:
	_tds__DeleteUsers *tds__DeleteUsers;	/* optional element of type tds:DeleteUsers */
public:
	int soap_type() const { return 2392; } /* = unique id SOAP_TYPE___tds__DeleteUsers_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetUser_
#define SOAP_TYPE___tds__SetUser_ (2394)
/* Operation wrapper: */
struct __tds__SetUser_
{
public:
	_tds__SetUser *tds__SetUser;	/* optional element of type tds:SetUser */
public:
	int soap_type() const { return 2394; } /* = unique id SOAP_TYPE___tds__SetUser_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetWsdlUrl_
#define SOAP_TYPE___tds__GetWsdlUrl_ (2396)
/* Operation wrapper: */
struct __tds__GetWsdlUrl_
{
public:
	_tds__GetWsdlUrl *tds__GetWsdlUrl;	/* optional element of type tds:GetWsdlUrl */
public:
	int soap_type() const { return 2396; } /* = unique id SOAP_TYPE___tds__GetWsdlUrl_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCapabilities_
#define SOAP_TYPE___tds__GetCapabilities_ (2398)
/* Operation wrapper: */
struct __tds__GetCapabilities_
{
public:
	_tds__GetCapabilities *tds__GetCapabilities;	/* optional element of type tds:GetCapabilities */
public:
	int soap_type() const { return 2398; } /* = unique id SOAP_TYPE___tds__GetCapabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDPAddresses_
#define SOAP_TYPE___tds__SetDPAddresses_ (2400)
/* Operation wrapper: */
struct __tds__SetDPAddresses_
{
public:
	_tds__SetDPAddresses *tds__SetDPAddresses;	/* optional element of type tds:SetDPAddresses */
public:
	int soap_type() const { return 2400; } /* = unique id SOAP_TYPE___tds__SetDPAddresses_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetHostname_
#define SOAP_TYPE___tds__GetHostname_ (2402)
/* Operation wrapper: */
struct __tds__GetHostname_
{
public:
	_tds__GetHostname *tds__GetHostname;	/* optional element of type tds:GetHostname */
public:
	int soap_type() const { return 2402; } /* = unique id SOAP_TYPE___tds__GetHostname_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostname_
#define SOAP_TYPE___tds__SetHostname_ (2404)
/* Operation wrapper: */
struct __tds__SetHostname_
{
public:
	_tds__SetHostname *tds__SetHostname;	/* optional element of type tds:SetHostname */
public:
	int soap_type() const { return 2404; } /* = unique id SOAP_TYPE___tds__SetHostname_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetHostnameFromDHCP_
#define SOAP_TYPE___tds__SetHostnameFromDHCP_ (2406)
/* Operation wrapper: */
struct __tds__SetHostnameFromDHCP_
{
public:
	_tds__SetHostnameFromDHCP *tds__SetHostnameFromDHCP;	/* optional element of type tds:SetHostnameFromDHCP */
public:
	int soap_type() const { return 2406; } /* = unique id SOAP_TYPE___tds__SetHostnameFromDHCP_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDNS_
#define SOAP_TYPE___tds__GetDNS_ (2408)
/* Operation wrapper: */
struct __tds__GetDNS_
{
public:
	_tds__GetDNS *tds__GetDNS;	/* optional element of type tds:GetDNS */
public:
	int soap_type() const { return 2408; } /* = unique id SOAP_TYPE___tds__GetDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDNS_
#define SOAP_TYPE___tds__SetDNS_ (2410)
/* Operation wrapper: */
struct __tds__SetDNS_
{
public:
	_tds__SetDNS *tds__SetDNS;	/* optional element of type tds:SetDNS */
public:
	int soap_type() const { return 2410; } /* = unique id SOAP_TYPE___tds__SetDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNTP_
#define SOAP_TYPE___tds__GetNTP_ (2412)
/* Operation wrapper: */
struct __tds__GetNTP_
{
public:
	_tds__GetNTP *tds__GetNTP;	/* optional element of type tds:GetNTP */
public:
	int soap_type() const { return 2412; } /* = unique id SOAP_TYPE___tds__GetNTP_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNTP_
#define SOAP_TYPE___tds__SetNTP_ (2414)
/* Operation wrapper: */
struct __tds__SetNTP_
{
public:
	_tds__SetNTP *tds__SetNTP;	/* optional element of type tds:SetNTP */
public:
	int soap_type() const { return 2414; } /* = unique id SOAP_TYPE___tds__SetNTP_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDynamicDNS_
#define SOAP_TYPE___tds__GetDynamicDNS_ (2416)
/* Operation wrapper: */
struct __tds__GetDynamicDNS_
{
public:
	_tds__GetDynamicDNS *tds__GetDynamicDNS;	/* optional element of type tds:GetDynamicDNS */
public:
	int soap_type() const { return 2416; } /* = unique id SOAP_TYPE___tds__GetDynamicDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDynamicDNS_
#define SOAP_TYPE___tds__SetDynamicDNS_ (2418)
/* Operation wrapper: */
struct __tds__SetDynamicDNS_
{
public:
	_tds__SetDynamicDNS *tds__SetDynamicDNS;	/* optional element of type tds:SetDynamicDNS */
public:
	int soap_type() const { return 2418; } /* = unique id SOAP_TYPE___tds__SetDynamicDNS_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkInterfaces_
#define SOAP_TYPE___tds__GetNetworkInterfaces_ (2420)
/* Operation wrapper: */
struct __tds__GetNetworkInterfaces_
{
public:
	_tds__GetNetworkInterfaces *tds__GetNetworkInterfaces;	/* optional element of type tds:GetNetworkInterfaces */
public:
	int soap_type() const { return 2420; } /* = unique id SOAP_TYPE___tds__GetNetworkInterfaces_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkInterfaces_
#define SOAP_TYPE___tds__SetNetworkInterfaces_ (2422)
/* Operation wrapper: */
struct __tds__SetNetworkInterfaces_
{
public:
	_tds__SetNetworkInterfaces *tds__SetNetworkInterfaces;	/* optional element of type tds:SetNetworkInterfaces */
public:
	int soap_type() const { return 2422; } /* = unique id SOAP_TYPE___tds__SetNetworkInterfaces_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkProtocols_
#define SOAP_TYPE___tds__GetNetworkProtocols_ (2424)
/* Operation wrapper: */
struct __tds__GetNetworkProtocols_
{
public:
	_tds__GetNetworkProtocols *tds__GetNetworkProtocols;	/* optional element of type tds:GetNetworkProtocols */
public:
	int soap_type() const { return 2424; } /* = unique id SOAP_TYPE___tds__GetNetworkProtocols_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkProtocols_
#define SOAP_TYPE___tds__SetNetworkProtocols_ (2426)
/* Operation wrapper: */
struct __tds__SetNetworkProtocols_
{
public:
	_tds__SetNetworkProtocols *tds__SetNetworkProtocols;	/* optional element of type tds:SetNetworkProtocols */
public:
	int soap_type() const { return 2426; } /* = unique id SOAP_TYPE___tds__SetNetworkProtocols_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetNetworkDefaultGateway_
#define SOAP_TYPE___tds__GetNetworkDefaultGateway_ (2428)
/* Operation wrapper: */
struct __tds__GetNetworkDefaultGateway_
{
public:
	_tds__GetNetworkDefaultGateway *tds__GetNetworkDefaultGateway;	/* optional element of type tds:GetNetworkDefaultGateway */
public:
	int soap_type() const { return 2428; } /* = unique id SOAP_TYPE___tds__GetNetworkDefaultGateway_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetNetworkDefaultGateway_
#define SOAP_TYPE___tds__SetNetworkDefaultGateway_ (2430)
/* Operation wrapper: */
struct __tds__SetNetworkDefaultGateway_
{
public:
	_tds__SetNetworkDefaultGateway *tds__SetNetworkDefaultGateway;	/* optional element of type tds:SetNetworkDefaultGateway */
public:
	int soap_type() const { return 2430; } /* = unique id SOAP_TYPE___tds__SetNetworkDefaultGateway_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetZeroConfiguration_
#define SOAP_TYPE___tds__GetZeroConfiguration_ (2432)
/* Operation wrapper: */
struct __tds__GetZeroConfiguration_
{
public:
	_tds__GetZeroConfiguration *tds__GetZeroConfiguration;	/* optional element of type tds:GetZeroConfiguration */
public:
	int soap_type() const { return 2432; } /* = unique id SOAP_TYPE___tds__GetZeroConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetZeroConfiguration_
#define SOAP_TYPE___tds__SetZeroConfiguration_ (2434)
/* Operation wrapper: */
struct __tds__SetZeroConfiguration_
{
public:
	_tds__SetZeroConfiguration *tds__SetZeroConfiguration;	/* optional element of type tds:SetZeroConfiguration */
public:
	int soap_type() const { return 2434; } /* = unique id SOAP_TYPE___tds__SetZeroConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetIPAddressFilter_
#define SOAP_TYPE___tds__GetIPAddressFilter_ (2436)
/* Operation wrapper: */
struct __tds__GetIPAddressFilter_
{
public:
	_tds__GetIPAddressFilter *tds__GetIPAddressFilter;	/* optional element of type tds:GetIPAddressFilter */
public:
	int soap_type() const { return 2436; } /* = unique id SOAP_TYPE___tds__GetIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetIPAddressFilter_
#define SOAP_TYPE___tds__SetIPAddressFilter_ (2438)
/* Operation wrapper: */
struct __tds__SetIPAddressFilter_
{
public:
	_tds__SetIPAddressFilter *tds__SetIPAddressFilter;	/* optional element of type tds:SetIPAddressFilter */
public:
	int soap_type() const { return 2438; } /* = unique id SOAP_TYPE___tds__SetIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__AddIPAddressFilter_
#define SOAP_TYPE___tds__AddIPAddressFilter_ (2440)
/* Operation wrapper: */
struct __tds__AddIPAddressFilter_
{
public:
	_tds__AddIPAddressFilter *tds__AddIPAddressFilter;	/* optional element of type tds:AddIPAddressFilter */
public:
	int soap_type() const { return 2440; } /* = unique id SOAP_TYPE___tds__AddIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__RemoveIPAddressFilter_
#define SOAP_TYPE___tds__RemoveIPAddressFilter_ (2442)
/* Operation wrapper: */
struct __tds__RemoveIPAddressFilter_
{
public:
	_tds__RemoveIPAddressFilter *tds__RemoveIPAddressFilter;	/* optional element of type tds:RemoveIPAddressFilter */
public:
	int soap_type() const { return 2442; } /* = unique id SOAP_TYPE___tds__RemoveIPAddressFilter_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetAccessPolicy_
#define SOAP_TYPE___tds__GetAccessPolicy_ (2444)
/* Operation wrapper: */
struct __tds__GetAccessPolicy_
{
public:
	_tds__GetAccessPolicy *tds__GetAccessPolicy;	/* optional element of type tds:GetAccessPolicy */
public:
	int soap_type() const { return 2444; } /* = unique id SOAP_TYPE___tds__GetAccessPolicy_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetAccessPolicy_
#define SOAP_TYPE___tds__SetAccessPolicy_ (2446)
/* Operation wrapper: */
struct __tds__SetAccessPolicy_
{
public:
	_tds__SetAccessPolicy *tds__SetAccessPolicy;	/* optional element of type tds:SetAccessPolicy */
public:
	int soap_type() const { return 2446; } /* = unique id SOAP_TYPE___tds__SetAccessPolicy_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateCertificate_
#define SOAP_TYPE___tds__CreateCertificate_ (2448)
/* Operation wrapper: */
struct __tds__CreateCertificate_
{
public:
	_tds__CreateCertificate *tds__CreateCertificate;	/* optional element of type tds:CreateCertificate */
public:
	int soap_type() const { return 2448; } /* = unique id SOAP_TYPE___tds__CreateCertificate_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificates_
#define SOAP_TYPE___tds__GetCertificates_ (2450)
/* Operation wrapper: */
struct __tds__GetCertificates_
{
public:
	_tds__GetCertificates *tds__GetCertificates;	/* optional element of type tds:GetCertificates */
public:
	int soap_type() const { return 2450; } /* = unique id SOAP_TYPE___tds__GetCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificatesStatus_
#define SOAP_TYPE___tds__GetCertificatesStatus_ (2452)
/* Operation wrapper: */
struct __tds__GetCertificatesStatus_
{
public:
	_tds__GetCertificatesStatus *tds__GetCertificatesStatus;	/* optional element of type tds:GetCertificatesStatus */
public:
	int soap_type() const { return 2452; } /* = unique id SOAP_TYPE___tds__GetCertificatesStatus_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetCertificatesStatus_
#define SOAP_TYPE___tds__SetCertificatesStatus_ (2454)
/* Operation wrapper: */
struct __tds__SetCertificatesStatus_
{
public:
	_tds__SetCertificatesStatus *tds__SetCertificatesStatus;	/* optional element of type tds:SetCertificatesStatus */
public:
	int soap_type() const { return 2454; } /* = unique id SOAP_TYPE___tds__SetCertificatesStatus_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteCertificates_
#define SOAP_TYPE___tds__DeleteCertificates_ (2456)
/* Operation wrapper: */
struct __tds__DeleteCertificates_
{
public:
	_tds__DeleteCertificates *tds__DeleteCertificates;	/* optional element of type tds:DeleteCertificates */
public:
	int soap_type() const { return 2456; } /* = unique id SOAP_TYPE___tds__DeleteCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetPkcs10Request_
#define SOAP_TYPE___tds__GetPkcs10Request_ (2458)
/* Operation wrapper: */
struct __tds__GetPkcs10Request_
{
public:
	_tds__GetPkcs10Request *tds__GetPkcs10Request;	/* optional element of type tds:GetPkcs10Request */
public:
	int soap_type() const { return 2458; } /* = unique id SOAP_TYPE___tds__GetPkcs10Request_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificates_
#define SOAP_TYPE___tds__LoadCertificates_ (2460)
/* Operation wrapper: */
struct __tds__LoadCertificates_
{
public:
	_tds__LoadCertificates *tds__LoadCertificates;	/* optional element of type tds:LoadCertificates */
public:
	int soap_type() const { return 2460; } /* = unique id SOAP_TYPE___tds__LoadCertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetClientCertificateMode_
#define SOAP_TYPE___tds__GetClientCertificateMode_ (2462)
/* Operation wrapper: */
struct __tds__GetClientCertificateMode_
{
public:
	_tds__GetClientCertificateMode *tds__GetClientCertificateMode;	/* optional element of type tds:GetClientCertificateMode */
public:
	int soap_type() const { return 2462; } /* = unique id SOAP_TYPE___tds__GetClientCertificateMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetClientCertificateMode_
#define SOAP_TYPE___tds__SetClientCertificateMode_ (2464)
/* Operation wrapper: */
struct __tds__SetClientCertificateMode_
{
public:
	_tds__SetClientCertificateMode *tds__SetClientCertificateMode;	/* optional element of type tds:SetClientCertificateMode */
public:
	int soap_type() const { return 2464; } /* = unique id SOAP_TYPE___tds__SetClientCertificateMode_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetRelayOutputs_
#define SOAP_TYPE___tds__GetRelayOutputs_ (2466)
/* Operation wrapper: */
struct __tds__GetRelayOutputs_
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 2466; } /* = unique id SOAP_TYPE___tds__GetRelayOutputs_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputSettings_
#define SOAP_TYPE___tds__SetRelayOutputSettings_ (2468)
/* Operation wrapper: */
struct __tds__SetRelayOutputSettings_
{
public:
	_tds__SetRelayOutputSettings *tds__SetRelayOutputSettings;	/* optional element of type tds:SetRelayOutputSettings */
public:
	int soap_type() const { return 2468; } /* = unique id SOAP_TYPE___tds__SetRelayOutputSettings_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetRelayOutputState_
#define SOAP_TYPE___tds__SetRelayOutputState_ (2470)
/* Operation wrapper: */
struct __tds__SetRelayOutputState_
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 2470; } /* = unique id SOAP_TYPE___tds__SetRelayOutputState_ */
};
#endif

#ifndef SOAP_TYPE___tds__SendAuxiliaryCommand_
#define SOAP_TYPE___tds__SendAuxiliaryCommand_ (2472)
/* Operation wrapper: */
struct __tds__SendAuxiliaryCommand_
{
public:
	_tds__SendAuxiliaryCommand *tds__SendAuxiliaryCommand;	/* optional element of type tds:SendAuxiliaryCommand */
public:
	int soap_type() const { return 2472; } /* = unique id SOAP_TYPE___tds__SendAuxiliaryCommand_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCACertificates_
#define SOAP_TYPE___tds__GetCACertificates_ (2474)
/* Operation wrapper: */
struct __tds__GetCACertificates_
{
public:
	_tds__GetCACertificates *tds__GetCACertificates;	/* optional element of type tds:GetCACertificates */
public:
	int soap_type() const { return 2474; } /* = unique id SOAP_TYPE___tds__GetCACertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCertificateWithPrivateKey_
#define SOAP_TYPE___tds__LoadCertificateWithPrivateKey_ (2476)
/* Operation wrapper: */
struct __tds__LoadCertificateWithPrivateKey_
{
public:
	_tds__LoadCertificateWithPrivateKey *tds__LoadCertificateWithPrivateKey;	/* optional element of type tds:LoadCertificateWithPrivateKey */
public:
	int soap_type() const { return 2476; } /* = unique id SOAP_TYPE___tds__LoadCertificateWithPrivateKey_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetCertificateInformation_
#define SOAP_TYPE___tds__GetCertificateInformation_ (2478)
/* Operation wrapper: */
struct __tds__GetCertificateInformation_
{
public:
	_tds__GetCertificateInformation *tds__GetCertificateInformation;	/* optional element of type tds:GetCertificateInformation */
public:
	int soap_type() const { return 2478; } /* = unique id SOAP_TYPE___tds__GetCertificateInformation_ */
};
#endif

#ifndef SOAP_TYPE___tds__LoadCACertificates_
#define SOAP_TYPE___tds__LoadCACertificates_ (2480)
/* Operation wrapper: */
struct __tds__LoadCACertificates_
{
public:
	_tds__LoadCACertificates *tds__LoadCACertificates;	/* optional element of type tds:LoadCACertificates */
public:
	int soap_type() const { return 2480; } /* = unique id SOAP_TYPE___tds__LoadCACertificates_ */
};
#endif

#ifndef SOAP_TYPE___tds__CreateDot1XConfiguration_
#define SOAP_TYPE___tds__CreateDot1XConfiguration_ (2482)
/* Operation wrapper: */
struct __tds__CreateDot1XConfiguration_
{
public:
	_tds__CreateDot1XConfiguration *tds__CreateDot1XConfiguration;	/* optional element of type tds:CreateDot1XConfiguration */
public:
	int soap_type() const { return 2482; } /* = unique id SOAP_TYPE___tds__CreateDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__SetDot1XConfiguration_
#define SOAP_TYPE___tds__SetDot1XConfiguration_ (2484)
/* Operation wrapper: */
struct __tds__SetDot1XConfiguration_
{
public:
	_tds__SetDot1XConfiguration *tds__SetDot1XConfiguration;	/* optional element of type tds:SetDot1XConfiguration */
public:
	int soap_type() const { return 2484; } /* = unique id SOAP_TYPE___tds__SetDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfiguration_
#define SOAP_TYPE___tds__GetDot1XConfiguration_ (2486)
/* Operation wrapper: */
struct __tds__GetDot1XConfiguration_
{
public:
	_tds__GetDot1XConfiguration *tds__GetDot1XConfiguration;	/* optional element of type tds:GetDot1XConfiguration */
public:
	int soap_type() const { return 2486; } /* = unique id SOAP_TYPE___tds__GetDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot1XConfigurations_
#define SOAP_TYPE___tds__GetDot1XConfigurations_ (2488)
/* Operation wrapper: */
struct __tds__GetDot1XConfigurations_
{
public:
	_tds__GetDot1XConfigurations *tds__GetDot1XConfigurations;	/* optional element of type tds:GetDot1XConfigurations */
public:
	int soap_type() const { return 2488; } /* = unique id SOAP_TYPE___tds__GetDot1XConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___tds__DeleteDot1XConfiguration_
#define SOAP_TYPE___tds__DeleteDot1XConfiguration_ (2490)
/* Operation wrapper: */
struct __tds__DeleteDot1XConfiguration_
{
public:
	_tds__DeleteDot1XConfiguration *tds__DeleteDot1XConfiguration;	/* optional element of type tds:DeleteDot1XConfiguration */
public:
	int soap_type() const { return 2490; } /* = unique id SOAP_TYPE___tds__DeleteDot1XConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Capabilities_
#define SOAP_TYPE___tds__GetDot11Capabilities_ (2492)
/* Operation wrapper: */
struct __tds__GetDot11Capabilities_
{
public:
	_tds__GetDot11Capabilities *tds__GetDot11Capabilities;	/* optional element of type tds:GetDot11Capabilities */
public:
	int soap_type() const { return 2492; } /* = unique id SOAP_TYPE___tds__GetDot11Capabilities_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetDot11Status_
#define SOAP_TYPE___tds__GetDot11Status_ (2494)
/* Operation wrapper: */
struct __tds__GetDot11Status_
{
public:
	_tds__GetDot11Status *tds__GetDot11Status;	/* optional element of type tds:GetDot11Status */
public:
	int soap_type() const { return 2494; } /* = unique id SOAP_TYPE___tds__GetDot11Status_ */
};
#endif

#ifndef SOAP_TYPE___tds__ScanAvailableDot11Networks_
#define SOAP_TYPE___tds__ScanAvailableDot11Networks_ (2496)
/* Operation wrapper: */
struct __tds__ScanAvailableDot11Networks_
{
public:
	_tds__ScanAvailableDot11Networks *tds__ScanAvailableDot11Networks;	/* optional element of type tds:ScanAvailableDot11Networks */
public:
	int soap_type() const { return 2496; } /* = unique id SOAP_TYPE___tds__ScanAvailableDot11Networks_ */
};
#endif

#ifndef SOAP_TYPE___tds__GetSystemUris_
#define SOAP_TYPE___tds__GetSystemUris_ (2498)
/* Operation wrapper: */
struct __tds__GetSystemUris_
{
public:
	_tds__GetSystemUris *tds__GetSystemUris;	/* optional element of type tds:GetSystemUris */
public:
	int soap_type() const { return 2498; } /* = unique id SOAP_TYPE___tds__GetSystemUris_ */
};
#endif

#ifndef SOAP_TYPE___tds__StartFirmwareUpgrade_
#define SOAP_TYPE___tds__StartFirmwareUpgrade_ (2500)
/* Operation wrapper: */
struct __tds__StartFirmwareUpgrade_
{
public:
	_tds__StartFirmwareUpgrade *tds__StartFirmwareUpgrade;	/* optional element of type tds:StartFirmwareUpgrade */
public:
	int soap_type() const { return 2500; } /* = unique id SOAP_TYPE___tds__StartFirmwareUpgrade_ */
};
#endif

#ifndef SOAP_TYPE___tds__StartSystemRestore_
#define SOAP_TYPE___tds__StartSystemRestore_ (2502)
/* Operation wrapper: */
struct __tds__StartSystemRestore_
{
public:
	_tds__StartSystemRestore *tds__StartSystemRestore;	/* optional element of type tds:StartSystemRestore */
public:
	int soap_type() const { return 2502; } /* = unique id SOAP_TYPE___tds__StartSystemRestore_ */
};
#endif

#ifndef SOAP_TYPE___tev__PullMessages
#define SOAP_TYPE___tev__PullMessages (2506)
/* Operation wrapper: */
struct __tev__PullMessages
{
public:
	_tev__PullMessages *tev__PullMessages;	/* optional element of type tev:PullMessages */
public:
	int soap_type() const { return 2506; } /* = unique id SOAP_TYPE___tev__PullMessages */
};
#endif

#ifndef SOAP_TYPE___tev__Seek
#define SOAP_TYPE___tev__Seek (2510)
/* Operation wrapper: */
struct __tev__Seek
{
public:
	_tev__Seek *tev__Seek;	/* optional element of type tev:Seek */
public:
	int soap_type() const { return 2510; } /* = unique id SOAP_TYPE___tev__Seek */
};
#endif

#ifndef SOAP_TYPE___tev__SetSynchronizationPoint
#define SOAP_TYPE___tev__SetSynchronizationPoint (2514)
/* Operation wrapper: */
struct __tev__SetSynchronizationPoint
{
public:
	_tev__SetSynchronizationPoint *tev__SetSynchronizationPoint;	/* optional element of type tev:SetSynchronizationPoint */
public:
	int soap_type() const { return 2514; } /* = unique id SOAP_TYPE___tev__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___tev__GetServiceCapabilities
#define SOAP_TYPE___tev__GetServiceCapabilities (2518)
/* Operation wrapper: */
struct __tev__GetServiceCapabilities
{
public:
	_tev__GetServiceCapabilities *tev__GetServiceCapabilities;	/* optional element of type tev:GetServiceCapabilities */
public:
	int soap_type() const { return 2518; } /* = unique id SOAP_TYPE___tev__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tev__CreatePullPointSubscription
#define SOAP_TYPE___tev__CreatePullPointSubscription (2522)
/* Operation wrapper: */
struct __tev__CreatePullPointSubscription
{
public:
	_tev__CreatePullPointSubscription *tev__CreatePullPointSubscription;	/* optional element of type tev:CreatePullPointSubscription */
public:
	int soap_type() const { return 2522; } /* = unique id SOAP_TYPE___tev__CreatePullPointSubscription */
};
#endif

#ifndef SOAP_TYPE___tev__GetEventProperties
#define SOAP_TYPE___tev__GetEventProperties (2526)
/* Operation wrapper: */
struct __tev__GetEventProperties
{
public:
	_tev__GetEventProperties *tev__GetEventProperties;	/* optional element of type tev:GetEventProperties */
public:
	int soap_type() const { return 2526; } /* = unique id SOAP_TYPE___tev__GetEventProperties */
};
#endif

#ifndef SOAP_TYPE___tev__Renew
#define SOAP_TYPE___tev__Renew (2530)
/* Operation wrapper: */
struct __tev__Renew
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 2530; } /* = unique id SOAP_TYPE___tev__Renew */
};
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe
#define SOAP_TYPE___tev__Unsubscribe (2534)
/* Operation wrapper: */
struct __tev__Unsubscribe
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 2534; } /* = unique id SOAP_TYPE___tev__Unsubscribe */
};
#endif

#ifndef SOAP_TYPE___tev__Subscribe
#define SOAP_TYPE___tev__Subscribe (2538)
/* Operation wrapper: */
struct __tev__Subscribe
{
public:
	_wsnt__Subscribe *wsnt__Subscribe;	/* optional element of type wsnt:Subscribe */
public:
	int soap_type() const { return 2538; } /* = unique id SOAP_TYPE___tev__Subscribe */
};
#endif

#ifndef SOAP_TYPE___tev__GetCurrentMessage
#define SOAP_TYPE___tev__GetCurrentMessage (2542)
/* Operation wrapper: */
struct __tev__GetCurrentMessage
{
public:
	_wsnt__GetCurrentMessage *wsnt__GetCurrentMessage;	/* optional element of type wsnt:GetCurrentMessage */
public:
	int soap_type() const { return 2542; } /* = unique id SOAP_TYPE___tev__GetCurrentMessage */
};
#endif

#ifndef SOAP_TYPE___tev__Notify
#define SOAP_TYPE___tev__Notify (2545)
/* Operation wrapper: */
struct __tev__Notify
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 2545; } /* = unique id SOAP_TYPE___tev__Notify */
};
#endif

#ifndef SOAP_TYPE___tev__GetMessages
#define SOAP_TYPE___tev__GetMessages (2549)
/* Operation wrapper: */
struct __tev__GetMessages
{
public:
	_wsnt__GetMessages *wsnt__GetMessages;	/* optional element of type wsnt:GetMessages */
public:
	int soap_type() const { return 2549; } /* = unique id SOAP_TYPE___tev__GetMessages */
};
#endif

#ifndef SOAP_TYPE___tev__DestroyPullPoint
#define SOAP_TYPE___tev__DestroyPullPoint (2553)
/* Operation wrapper: */
struct __tev__DestroyPullPoint
{
public:
	_wsnt__DestroyPullPoint *wsnt__DestroyPullPoint;	/* optional element of type wsnt:DestroyPullPoint */
public:
	int soap_type() const { return 2553; } /* = unique id SOAP_TYPE___tev__DestroyPullPoint */
};
#endif

#ifndef SOAP_TYPE___tev__Notify_
#define SOAP_TYPE___tev__Notify_ (2555)
/* Operation wrapper: */
struct __tev__Notify_
{
public:
	_wsnt__Notify *wsnt__Notify;	/* optional element of type wsnt:Notify */
public:
	int soap_type() const { return 2555; } /* = unique id SOAP_TYPE___tev__Notify_ */
};
#endif

#ifndef SOAP_TYPE___tev__CreatePullPoint
#define SOAP_TYPE___tev__CreatePullPoint (2559)
/* Operation wrapper: */
struct __tev__CreatePullPoint
{
public:
	_wsnt__CreatePullPoint *wsnt__CreatePullPoint;	/* optional element of type wsnt:CreatePullPoint */
public:
	int soap_type() const { return 2559; } /* = unique id SOAP_TYPE___tev__CreatePullPoint */
};
#endif

#ifndef SOAP_TYPE___tev__Renew_
#define SOAP_TYPE___tev__Renew_ (2561)
/* Operation wrapper: */
struct __tev__Renew_
{
public:
	_wsnt__Renew *wsnt__Renew;	/* optional element of type wsnt:Renew */
public:
	int soap_type() const { return 2561; } /* = unique id SOAP_TYPE___tev__Renew_ */
};
#endif

#ifndef SOAP_TYPE___tev__Unsubscribe_
#define SOAP_TYPE___tev__Unsubscribe_ (2563)
/* Operation wrapper: */
struct __tev__Unsubscribe_
{
public:
	_wsnt__Unsubscribe *wsnt__Unsubscribe;	/* optional element of type wsnt:Unsubscribe */
public:
	int soap_type() const { return 2563; } /* = unique id SOAP_TYPE___tev__Unsubscribe_ */
};
#endif

#ifndef SOAP_TYPE___tev__PauseSubscription
#define SOAP_TYPE___tev__PauseSubscription (2567)
/* Operation wrapper: */
struct __tev__PauseSubscription
{
public:
	_wsnt__PauseSubscription *wsnt__PauseSubscription;	/* optional element of type wsnt:PauseSubscription */
public:
	int soap_type() const { return 2567; } /* = unique id SOAP_TYPE___tev__PauseSubscription */
};
#endif

#ifndef SOAP_TYPE___tev__ResumeSubscription
#define SOAP_TYPE___tev__ResumeSubscription (2571)
/* Operation wrapper: */
struct __tev__ResumeSubscription
{
public:
	_wsnt__ResumeSubscription *wsnt__ResumeSubscription;	/* optional element of type wsnt:ResumeSubscription */
public:
	int soap_type() const { return 2571; } /* = unique id SOAP_TYPE___tev__ResumeSubscription */
};
#endif

#ifndef SOAP_TYPE___tls__GetServiceCapabilities
#define SOAP_TYPE___tls__GetServiceCapabilities (2575)
/* Operation wrapper: */
struct __tls__GetServiceCapabilities
{
public:
	_tls__GetServiceCapabilities *tls__GetServiceCapabilities;	/* optional element of type tls:GetServiceCapabilities */
public:
	int soap_type() const { return 2575; } /* = unique id SOAP_TYPE___tls__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tls__GetLayout
#define SOAP_TYPE___tls__GetLayout (2579)
/* Operation wrapper: */
struct __tls__GetLayout
{
public:
	_tls__GetLayout *tls__GetLayout;	/* optional element of type tls:GetLayout */
public:
	int soap_type() const { return 2579; } /* = unique id SOAP_TYPE___tls__GetLayout */
};
#endif

#ifndef SOAP_TYPE___tls__SetLayout
#define SOAP_TYPE___tls__SetLayout (2583)
/* Operation wrapper: */
struct __tls__SetLayout
{
public:
	_tls__SetLayout *tls__SetLayout;	/* optional element of type tls:SetLayout */
public:
	int soap_type() const { return 2583; } /* = unique id SOAP_TYPE___tls__SetLayout */
};
#endif

#ifndef SOAP_TYPE___tls__GetDisplayOptions
#define SOAP_TYPE___tls__GetDisplayOptions (2587)
/* Operation wrapper: */
struct __tls__GetDisplayOptions
{
public:
	_tls__GetDisplayOptions *tls__GetDisplayOptions;	/* optional element of type tls:GetDisplayOptions */
public:
	int soap_type() const { return 2587; } /* = unique id SOAP_TYPE___tls__GetDisplayOptions */
};
#endif

#ifndef SOAP_TYPE___tls__GetPaneConfigurations
#define SOAP_TYPE___tls__GetPaneConfigurations (2591)
/* Operation wrapper: */
struct __tls__GetPaneConfigurations
{
public:
	_tls__GetPaneConfigurations *tls__GetPaneConfigurations;	/* optional element of type tls:GetPaneConfigurations */
public:
	int soap_type() const { return 2591; } /* = unique id SOAP_TYPE___tls__GetPaneConfigurations */
};
#endif

#ifndef SOAP_TYPE___tls__GetPaneConfiguration
#define SOAP_TYPE___tls__GetPaneConfiguration (2595)
/* Operation wrapper: */
struct __tls__GetPaneConfiguration
{
public:
	_tls__GetPaneConfiguration *tls__GetPaneConfiguration;	/* optional element of type tls:GetPaneConfiguration */
public:
	int soap_type() const { return 2595; } /* = unique id SOAP_TYPE___tls__GetPaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__SetPaneConfigurations
#define SOAP_TYPE___tls__SetPaneConfigurations (2599)
/* Operation wrapper: */
struct __tls__SetPaneConfigurations
{
public:
	_tls__SetPaneConfigurations *tls__SetPaneConfigurations;	/* optional element of type tls:SetPaneConfigurations */
public:
	int soap_type() const { return 2599; } /* = unique id SOAP_TYPE___tls__SetPaneConfigurations */
};
#endif

#ifndef SOAP_TYPE___tls__SetPaneConfiguration
#define SOAP_TYPE___tls__SetPaneConfiguration (2603)
/* Operation wrapper: */
struct __tls__SetPaneConfiguration
{
public:
	_tls__SetPaneConfiguration *tls__SetPaneConfiguration;	/* optional element of type tls:SetPaneConfiguration */
public:
	int soap_type() const { return 2603; } /* = unique id SOAP_TYPE___tls__SetPaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__CreatePaneConfiguration
#define SOAP_TYPE___tls__CreatePaneConfiguration (2607)
/* Operation wrapper: */
struct __tls__CreatePaneConfiguration
{
public:
	_tls__CreatePaneConfiguration *tls__CreatePaneConfiguration;	/* optional element of type tls:CreatePaneConfiguration */
public:
	int soap_type() const { return 2607; } /* = unique id SOAP_TYPE___tls__CreatePaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tls__DeletePaneConfiguration
#define SOAP_TYPE___tls__DeletePaneConfiguration (2611)
/* Operation wrapper: */
struct __tls__DeletePaneConfiguration
{
public:
	_tls__DeletePaneConfiguration *tls__DeletePaneConfiguration;	/* optional element of type tls:DeletePaneConfiguration */
public:
	int soap_type() const { return 2611; } /* = unique id SOAP_TYPE___tls__DeletePaneConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetServiceCapabilities
#define SOAP_TYPE___tmd__GetServiceCapabilities (2615)
/* Operation wrapper: */
struct __tmd__GetServiceCapabilities
{
public:
	_tmd__GetServiceCapabilities *tmd__GetServiceCapabilities;	/* optional element of type tmd:GetServiceCapabilities */
public:
	int soap_type() const { return 2615; } /* = unique id SOAP_TYPE___tmd__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputOptions
#define SOAP_TYPE___tmd__GetRelayOutputOptions (2619)
/* Operation wrapper: */
struct __tmd__GetRelayOutputOptions
{
public:
	_tmd__GetRelayOutputOptions *tmd__GetRelayOutputOptions;	/* optional element of type tmd:GetRelayOutputOptions */
public:
	int soap_type() const { return 2619; } /* = unique id SOAP_TYPE___tmd__GetRelayOutputOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSources
#define SOAP_TYPE___tmd__GetAudioSources (2623)
/* Operation wrapper: */
struct __tmd__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
public:
	int soap_type() const { return 2623; } /* = unique id SOAP_TYPE___tmd__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputs
#define SOAP_TYPE___tmd__GetAudioOutputs (2627)
/* Operation wrapper: */
struct __tmd__GetAudioOutputs
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
public:
	int soap_type() const { return 2627; } /* = unique id SOAP_TYPE___tmd__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSources
#define SOAP_TYPE___tmd__GetVideoSources (2631)
/* Operation wrapper: */
struct __tmd__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
public:
	int soap_type() const { return 2631; } /* = unique id SOAP_TYPE___tmd__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputs
#define SOAP_TYPE___tmd__GetVideoOutputs (2635)
/* Operation wrapper: */
struct __tmd__GetVideoOutputs
{
public:
	_tmd__GetVideoOutputs *tmd__GetVideoOutputs;	/* optional element of type tmd:GetVideoOutputs */
public:
	int soap_type() const { return 2635; } /* = unique id SOAP_TYPE___tmd__GetVideoOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfiguration
#define SOAP_TYPE___tmd__GetVideoSourceConfiguration (2639)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfiguration
{
public:
	_tmd__GetVideoSourceConfiguration *tmd__GetVideoSourceConfiguration;	/* optional element of type tmd:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 2639; } /* = unique id SOAP_TYPE___tmd__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfiguration
#define SOAP_TYPE___tmd__GetVideoOutputConfiguration (2643)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfiguration
{
public:
	_tmd__GetVideoOutputConfiguration *tmd__GetVideoOutputConfiguration;	/* optional element of type tmd:GetVideoOutputConfiguration */
public:
	int soap_type() const { return 2643; } /* = unique id SOAP_TYPE___tmd__GetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfiguration
#define SOAP_TYPE___tmd__GetAudioSourceConfiguration (2647)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfiguration
{
public:
	_tmd__GetAudioSourceConfiguration *tmd__GetAudioSourceConfiguration;	/* optional element of type tmd:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 2647; } /* = unique id SOAP_TYPE___tmd__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfiguration
#define SOAP_TYPE___tmd__GetAudioOutputConfiguration (2651)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfiguration
{
public:
	_tmd__GetAudioOutputConfiguration *tmd__GetAudioOutputConfiguration;	/* optional element of type tmd:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 2651; } /* = unique id SOAP_TYPE___tmd__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoSourceConfiguration
#define SOAP_TYPE___tmd__SetVideoSourceConfiguration (2655)
/* Operation wrapper: */
struct __tmd__SetVideoSourceConfiguration
{
public:
	_tmd__SetVideoSourceConfiguration *tmd__SetVideoSourceConfiguration;	/* optional element of type tmd:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 2655; } /* = unique id SOAP_TYPE___tmd__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetVideoOutputConfiguration
#define SOAP_TYPE___tmd__SetVideoOutputConfiguration (2659)
/* Operation wrapper: */
struct __tmd__SetVideoOutputConfiguration
{
public:
	_tmd__SetVideoOutputConfiguration *tmd__SetVideoOutputConfiguration;	/* optional element of type tmd:SetVideoOutputConfiguration */
public:
	int soap_type() const { return 2659; } /* = unique id SOAP_TYPE___tmd__SetVideoOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioSourceConfiguration
#define SOAP_TYPE___tmd__SetAudioSourceConfiguration (2663)
/* Operation wrapper: */
struct __tmd__SetAudioSourceConfiguration
{
public:
	_tmd__SetAudioSourceConfiguration *tmd__SetAudioSourceConfiguration;	/* optional element of type tmd:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 2663; } /* = unique id SOAP_TYPE___tmd__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetAudioOutputConfiguration
#define SOAP_TYPE___tmd__SetAudioOutputConfiguration (2667)
/* Operation wrapper: */
struct __tmd__SetAudioOutputConfiguration
{
public:
	_tmd__SetAudioOutputConfiguration *tmd__SetAudioOutputConfiguration;	/* optional element of type tmd:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 2667; } /* = unique id SOAP_TYPE___tmd__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions (2671)
/* Operation wrapper: */
struct __tmd__GetVideoSourceConfigurationOptions
{
public:
	_tmd__GetVideoSourceConfigurationOptions *tmd__GetVideoSourceConfigurationOptions;	/* optional element of type tmd:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 2671; } /* = unique id SOAP_TYPE___tmd__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions (2675)
/* Operation wrapper: */
struct __tmd__GetVideoOutputConfigurationOptions
{
public:
	_tmd__GetVideoOutputConfigurationOptions *tmd__GetVideoOutputConfigurationOptions;	/* optional element of type tmd:GetVideoOutputConfigurationOptions */
public:
	int soap_type() const { return 2675; } /* = unique id SOAP_TYPE___tmd__GetVideoOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions (2679)
/* Operation wrapper: */
struct __tmd__GetAudioSourceConfigurationOptions
{
public:
	_tmd__GetAudioSourceConfigurationOptions *tmd__GetAudioSourceConfigurationOptions;	/* optional element of type tmd:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 2679; } /* = unique id SOAP_TYPE___tmd__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions (2683)
/* Operation wrapper: */
struct __tmd__GetAudioOutputConfigurationOptions
{
public:
	_tmd__GetAudioOutputConfigurationOptions *tmd__GetAudioOutputConfigurationOptions;	/* optional element of type tmd:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 2683; } /* = unique id SOAP_TYPE___tmd__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__GetRelayOutputs
#define SOAP_TYPE___tmd__GetRelayOutputs (2685)
/* Operation wrapper: */
struct __tmd__GetRelayOutputs
{
public:
	_tds__GetRelayOutputs *tds__GetRelayOutputs;	/* optional element of type tds:GetRelayOutputs */
public:
	int soap_type() const { return 2685; } /* = unique id SOAP_TYPE___tmd__GetRelayOutputs */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputSettings
#define SOAP_TYPE___tmd__SetRelayOutputSettings (2689)
/* Operation wrapper: */
struct __tmd__SetRelayOutputSettings
{
public:
	_tmd__SetRelayOutputSettings *tmd__SetRelayOutputSettings;	/* optional element of type tmd:SetRelayOutputSettings */
public:
	int soap_type() const { return 2689; } /* = unique id SOAP_TYPE___tmd__SetRelayOutputSettings */
};
#endif

#ifndef SOAP_TYPE___tmd__SetRelayOutputState
#define SOAP_TYPE___tmd__SetRelayOutputState (2691)
/* Operation wrapper: */
struct __tmd__SetRelayOutputState
{
public:
	_tds__SetRelayOutputState *tds__SetRelayOutputState;	/* optional element of type tds:SetRelayOutputState */
public:
	int soap_type() const { return 2691; } /* = unique id SOAP_TYPE___tmd__SetRelayOutputState */
};
#endif

#ifndef SOAP_TYPE___tmd__GetDigitalInputs
#define SOAP_TYPE___tmd__GetDigitalInputs (2695)
/* Operation wrapper: */
struct __tmd__GetDigitalInputs
{
public:
	_tmd__GetDigitalInputs *tmd__GetDigitalInputs;	/* optional element of type tmd:GetDigitalInputs */
public:
	int soap_type() const { return 2695; } /* = unique id SOAP_TYPE___tmd__GetDigitalInputs */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPorts
#define SOAP_TYPE___tmd__GetSerialPorts (2699)
/* Operation wrapper: */
struct __tmd__GetSerialPorts
{
public:
	_tmd__GetSerialPorts *tmd__GetSerialPorts;	/* optional element of type tmd:GetSerialPorts */
public:
	int soap_type() const { return 2699; } /* = unique id SOAP_TYPE___tmd__GetSerialPorts */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfiguration
#define SOAP_TYPE___tmd__GetSerialPortConfiguration (2703)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfiguration
{
public:
	_tmd__GetSerialPortConfiguration *tmd__GetSerialPortConfiguration;	/* optional element of type tmd:GetSerialPortConfiguration */
public:
	int soap_type() const { return 2703; } /* = unique id SOAP_TYPE___tmd__GetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__SetSerialPortConfiguration
#define SOAP_TYPE___tmd__SetSerialPortConfiguration (2707)
/* Operation wrapper: */
struct __tmd__SetSerialPortConfiguration
{
public:
	_tmd__SetSerialPortConfiguration *tmd__SetSerialPortConfiguration;	/* optional element of type tmd:SetSerialPortConfiguration */
public:
	int soap_type() const { return 2707; } /* = unique id SOAP_TYPE___tmd__SetSerialPortConfiguration */
};
#endif

#ifndef SOAP_TYPE___tmd__GetSerialPortConfigurationOptions
#define SOAP_TYPE___tmd__GetSerialPortConfigurationOptions (2711)
/* Operation wrapper: */
struct __tmd__GetSerialPortConfigurationOptions
{
public:
	_tmd__GetSerialPortConfigurationOptions *tmd__GetSerialPortConfigurationOptions;	/* optional element of type tmd:GetSerialPortConfigurationOptions */
public:
	int soap_type() const { return 2711; } /* = unique id SOAP_TYPE___tmd__GetSerialPortConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___tmd__SendReceiveSerialCommand
#define SOAP_TYPE___tmd__SendReceiveSerialCommand (2715)
/* Operation wrapper: */
struct __tmd__SendReceiveSerialCommand
{
public:
	_tmd__SendReceiveSerialCommand *tmd__SendReceiveSerialCommand;	/* optional element of type tmd:SendReceiveSerialCommand */
public:
	int soap_type() const { return 2715; } /* = unique id SOAP_TYPE___tmd__SendReceiveSerialCommand */
};
#endif

#ifndef SOAP_TYPE___trc__GetServiceCapabilities
#define SOAP_TYPE___trc__GetServiceCapabilities (2719)
/* Operation wrapper: */
struct __trc__GetServiceCapabilities
{
public:
	_trc__GetServiceCapabilities *trc__GetServiceCapabilities;	/* optional element of type trc:GetServiceCapabilities */
public:
	int soap_type() const { return 2719; } /* = unique id SOAP_TYPE___trc__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trc__CreateRecording
#define SOAP_TYPE___trc__CreateRecording (2723)
/* Operation wrapper: */
struct __trc__CreateRecording
{
public:
	_trc__CreateRecording *trc__CreateRecording;	/* optional element of type trc:CreateRecording */
public:
	int soap_type() const { return 2723; } /* = unique id SOAP_TYPE___trc__CreateRecording */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteRecording
#define SOAP_TYPE___trc__DeleteRecording (2727)
/* Operation wrapper: */
struct __trc__DeleteRecording
{
public:
	_trc__DeleteRecording *trc__DeleteRecording;	/* optional element of type trc:DeleteRecording */
public:
	int soap_type() const { return 2727; } /* = unique id SOAP_TYPE___trc__DeleteRecording */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordings
#define SOAP_TYPE___trc__GetRecordings (2731)
/* Operation wrapper: */
struct __trc__GetRecordings
{
public:
	_trc__GetRecordings *trc__GetRecordings;	/* optional element of type trc:GetRecordings */
public:
	int soap_type() const { return 2731; } /* = unique id SOAP_TYPE___trc__GetRecordings */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingConfiguration
#define SOAP_TYPE___trc__SetRecordingConfiguration (2735)
/* Operation wrapper: */
struct __trc__SetRecordingConfiguration
{
public:
	_trc__SetRecordingConfiguration *trc__SetRecordingConfiguration;	/* optional element of type trc:SetRecordingConfiguration */
public:
	int soap_type() const { return 2735; } /* = unique id SOAP_TYPE___trc__SetRecordingConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingConfiguration
#define SOAP_TYPE___trc__GetRecordingConfiguration (2739)
/* Operation wrapper: */
struct __trc__GetRecordingConfiguration
{
public:
	_trc__GetRecordingConfiguration *trc__GetRecordingConfiguration;	/* optional element of type trc:GetRecordingConfiguration */
public:
	int soap_type() const { return 2739; } /* = unique id SOAP_TYPE___trc__GetRecordingConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingOptions
#define SOAP_TYPE___trc__GetRecordingOptions (2743)
/* Operation wrapper: */
struct __trc__GetRecordingOptions
{
public:
	_trc__GetRecordingOptions *trc__GetRecordingOptions;	/* optional element of type trc:GetRecordingOptions */
public:
	int soap_type() const { return 2743; } /* = unique id SOAP_TYPE___trc__GetRecordingOptions */
};
#endif

#ifndef SOAP_TYPE___trc__CreateTrack
#define SOAP_TYPE___trc__CreateTrack (2747)
/* Operation wrapper: */
struct __trc__CreateTrack
{
public:
	_trc__CreateTrack *trc__CreateTrack;	/* optional element of type trc:CreateTrack */
public:
	int soap_type() const { return 2747; } /* = unique id SOAP_TYPE___trc__CreateTrack */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteTrack
#define SOAP_TYPE___trc__DeleteTrack (2751)
/* Operation wrapper: */
struct __trc__DeleteTrack
{
public:
	_trc__DeleteTrack *trc__DeleteTrack;	/* optional element of type trc:DeleteTrack */
public:
	int soap_type() const { return 2751; } /* = unique id SOAP_TYPE___trc__DeleteTrack */
};
#endif

#ifndef SOAP_TYPE___trc__GetTrackConfiguration
#define SOAP_TYPE___trc__GetTrackConfiguration (2755)
/* Operation wrapper: */
struct __trc__GetTrackConfiguration
{
public:
	_trc__GetTrackConfiguration *trc__GetTrackConfiguration;	/* optional element of type trc:GetTrackConfiguration */
public:
	int soap_type() const { return 2755; } /* = unique id SOAP_TYPE___trc__GetTrackConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__SetTrackConfiguration
#define SOAP_TYPE___trc__SetTrackConfiguration (2759)
/* Operation wrapper: */
struct __trc__SetTrackConfiguration
{
public:
	_trc__SetTrackConfiguration *trc__SetTrackConfiguration;	/* optional element of type trc:SetTrackConfiguration */
public:
	int soap_type() const { return 2759; } /* = unique id SOAP_TYPE___trc__SetTrackConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__CreateRecordingJob
#define SOAP_TYPE___trc__CreateRecordingJob (2763)
/* Operation wrapper: */
struct __trc__CreateRecordingJob
{
public:
	_trc__CreateRecordingJob *trc__CreateRecordingJob;	/* optional element of type trc:CreateRecordingJob */
public:
	int soap_type() const { return 2763; } /* = unique id SOAP_TYPE___trc__CreateRecordingJob */
};
#endif

#ifndef SOAP_TYPE___trc__DeleteRecordingJob
#define SOAP_TYPE___trc__DeleteRecordingJob (2767)
/* Operation wrapper: */
struct __trc__DeleteRecordingJob
{
public:
	_trc__DeleteRecordingJob *trc__DeleteRecordingJob;	/* optional element of type trc:DeleteRecordingJob */
public:
	int soap_type() const { return 2767; } /* = unique id SOAP_TYPE___trc__DeleteRecordingJob */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobs
#define SOAP_TYPE___trc__GetRecordingJobs (2771)
/* Operation wrapper: */
struct __trc__GetRecordingJobs
{
public:
	_trc__GetRecordingJobs *trc__GetRecordingJobs;	/* optional element of type trc:GetRecordingJobs */
public:
	int soap_type() const { return 2771; } /* = unique id SOAP_TYPE___trc__GetRecordingJobs */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingJobConfiguration
#define SOAP_TYPE___trc__SetRecordingJobConfiguration (2775)
/* Operation wrapper: */
struct __trc__SetRecordingJobConfiguration
{
public:
	_trc__SetRecordingJobConfiguration *trc__SetRecordingJobConfiguration;	/* optional element of type trc:SetRecordingJobConfiguration */
public:
	int soap_type() const { return 2775; } /* = unique id SOAP_TYPE___trc__SetRecordingJobConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobConfiguration
#define SOAP_TYPE___trc__GetRecordingJobConfiguration (2779)
/* Operation wrapper: */
struct __trc__GetRecordingJobConfiguration
{
public:
	_trc__GetRecordingJobConfiguration *trc__GetRecordingJobConfiguration;	/* optional element of type trc:GetRecordingJobConfiguration */
public:
	int soap_type() const { return 2779; } /* = unique id SOAP_TYPE___trc__GetRecordingJobConfiguration */
};
#endif

#ifndef SOAP_TYPE___trc__SetRecordingJobMode
#define SOAP_TYPE___trc__SetRecordingJobMode (2783)
/* Operation wrapper: */
struct __trc__SetRecordingJobMode
{
public:
	_trc__SetRecordingJobMode *trc__SetRecordingJobMode;	/* optional element of type trc:SetRecordingJobMode */
public:
	int soap_type() const { return 2783; } /* = unique id SOAP_TYPE___trc__SetRecordingJobMode */
};
#endif

#ifndef SOAP_TYPE___trc__GetRecordingJobState
#define SOAP_TYPE___trc__GetRecordingJobState (2787)
/* Operation wrapper: */
struct __trc__GetRecordingJobState
{
public:
	_trc__GetRecordingJobState *trc__GetRecordingJobState;	/* optional element of type trc:GetRecordingJobState */
public:
	int soap_type() const { return 2787; } /* = unique id SOAP_TYPE___trc__GetRecordingJobState */
};
#endif

#ifndef SOAP_TYPE___trp__GetServiceCapabilities
#define SOAP_TYPE___trp__GetServiceCapabilities (2791)
/* Operation wrapper: */
struct __trp__GetServiceCapabilities
{
public:
	_trp__GetServiceCapabilities *trp__GetServiceCapabilities;	/* optional element of type trp:GetServiceCapabilities */
public:
	int soap_type() const { return 2791; } /* = unique id SOAP_TYPE___trp__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trp__GetReplayUri
#define SOAP_TYPE___trp__GetReplayUri (2795)
/* Operation wrapper: */
struct __trp__GetReplayUri
{
public:
	_trp__GetReplayUri *trp__GetReplayUri;	/* optional element of type trp:GetReplayUri */
public:
	int soap_type() const { return 2795; } /* = unique id SOAP_TYPE___trp__GetReplayUri */
};
#endif

#ifndef SOAP_TYPE___trp__GetReplayConfiguration
#define SOAP_TYPE___trp__GetReplayConfiguration (2799)
/* Operation wrapper: */
struct __trp__GetReplayConfiguration
{
public:
	_trp__GetReplayConfiguration *trp__GetReplayConfiguration;	/* optional element of type trp:GetReplayConfiguration */
public:
	int soap_type() const { return 2799; } /* = unique id SOAP_TYPE___trp__GetReplayConfiguration */
};
#endif

#ifndef SOAP_TYPE___trp__SetReplayConfiguration
#define SOAP_TYPE___trp__SetReplayConfiguration (2803)
/* Operation wrapper: */
struct __trp__SetReplayConfiguration
{
public:
	_trp__SetReplayConfiguration *trp__SetReplayConfiguration;	/* optional element of type trp:SetReplayConfiguration */
public:
	int soap_type() const { return 2803; } /* = unique id SOAP_TYPE___trp__SetReplayConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities
#define SOAP_TYPE___trt__GetServiceCapabilities (2807)
/* Operation wrapper: */
struct __trt__GetServiceCapabilities
{
public:
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities;	/* optional element of type trt:GetServiceCapabilities */
public:
	int soap_type() const { return 2807; } /* = unique id SOAP_TYPE___trt__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources
#define SOAP_TYPE___trt__GetVideoSources (2809)
/* Operation wrapper: */
struct __trt__GetVideoSources
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
public:
	int soap_type() const { return 2809; } /* = unique id SOAP_TYPE___trt__GetVideoSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources
#define SOAP_TYPE___trt__GetAudioSources (2811)
/* Operation wrapper: */
struct __trt__GetAudioSources
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
public:
	int soap_type() const { return 2811; } /* = unique id SOAP_TYPE___trt__GetAudioSources */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs
#define SOAP_TYPE___trt__GetAudioOutputs (2813)
/* Operation wrapper: */
struct __trt__GetAudioOutputs
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
public:
	int soap_type() const { return 2813; } /* = unique id SOAP_TYPE___trt__GetAudioOutputs */
};
#endif

#ifndef SOAP_TYPE___trt__CreateProfile
#define SOAP_TYPE___trt__CreateProfile (2817)
/* Operation wrapper: */
struct __trt__CreateProfile
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
public:
	int soap_type() const { return 2817; } /* = unique id SOAP_TYPE___trt__CreateProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfile
#define SOAP_TYPE___trt__GetProfile (2821)
/* Operation wrapper: */
struct __trt__GetProfile
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
public:
	int soap_type() const { return 2821; } /* = unique id SOAP_TYPE___trt__GetProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfiles
#define SOAP_TYPE___trt__GetProfiles (2825)
/* Operation wrapper: */
struct __trt__GetProfiles
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
public:
	int soap_type() const { return 2825; } /* = unique id SOAP_TYPE___trt__GetProfiles */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration (2829)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
public:
	int soap_type() const { return 2829; } /* = unique id SOAP_TYPE___trt__AddVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration
#define SOAP_TYPE___trt__AddVideoSourceConfiguration (2833)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
public:
	int soap_type() const { return 2833; } /* = unique id SOAP_TYPE___trt__AddVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration (2837)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
public:
	int soap_type() const { return 2837; } /* = unique id SOAP_TYPE___trt__AddAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration
#define SOAP_TYPE___trt__AddAudioSourceConfiguration (2841)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
public:
	int soap_type() const { return 2841; } /* = unique id SOAP_TYPE___trt__AddAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration
#define SOAP_TYPE___trt__AddPTZConfiguration (2845)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
public:
	int soap_type() const { return 2845; } /* = unique id SOAP_TYPE___trt__AddPTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration (2849)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2849; } /* = unique id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration
#define SOAP_TYPE___trt__AddMetadataConfiguration (2853)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
public:
	int soap_type() const { return 2853; } /* = unique id SOAP_TYPE___trt__AddMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration
#define SOAP_TYPE___trt__AddAudioOutputConfiguration (2857)
/* Operation wrapper: */
struct __trt__AddAudioOutputConfiguration
{
public:
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;	/* optional element of type trt:AddAudioOutputConfiguration */
public:
	int soap_type() const { return 2857; } /* = unique id SOAP_TYPE___trt__AddAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration (2861)
/* Operation wrapper: */
struct __trt__AddAudioDecoderConfiguration
{
public:
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;	/* optional element of type trt:AddAudioDecoderConfiguration */
public:
	int soap_type() const { return 2861; } /* = unique id SOAP_TYPE___trt__AddAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration (2865)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
public:
	int soap_type() const { return 2865; } /* = unique id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration (2869)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
public:
	int soap_type() const { return 2869; } /* = unique id SOAP_TYPE___trt__RemoveVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration (2873)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
public:
	int soap_type() const { return 2873; } /* = unique id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration (2877)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
public:
	int soap_type() const { return 2877; } /* = unique id SOAP_TYPE___trt__RemoveAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration
#define SOAP_TYPE___trt__RemovePTZConfiguration (2881)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
public:
	int soap_type() const { return 2881; } /* = unique id SOAP_TYPE___trt__RemovePTZConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration (2885)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2885; } /* = unique id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration
#define SOAP_TYPE___trt__RemoveMetadataConfiguration (2889)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
public:
	int soap_type() const { return 2889; } /* = unique id SOAP_TYPE___trt__RemoveMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration (2893)
/* Operation wrapper: */
struct __trt__RemoveAudioOutputConfiguration
{
public:
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;	/* optional element of type trt:RemoveAudioOutputConfiguration */
public:
	int soap_type() const { return 2893; } /* = unique id SOAP_TYPE___trt__RemoveAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration (2897)
/* Operation wrapper: */
struct __trt__RemoveAudioDecoderConfiguration
{
public:
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;	/* optional element of type trt:RemoveAudioDecoderConfiguration */
public:
	int soap_type() const { return 2897; } /* = unique id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile
#define SOAP_TYPE___trt__DeleteProfile (2901)
/* Operation wrapper: */
struct __trt__DeleteProfile
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
public:
	int soap_type() const { return 2901; } /* = unique id SOAP_TYPE___trt__DeleteProfile */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations
#define SOAP_TYPE___trt__GetVideoSourceConfigurations (2905)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
public:
	int soap_type() const { return 2905; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations (2909)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
public:
	int soap_type() const { return 2909; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations
#define SOAP_TYPE___trt__GetAudioSourceConfigurations (2913)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
public:
	int soap_type() const { return 2913; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations (2917)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
public:
	int soap_type() const { return 2917; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations (2921)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 2921; } /* = unique id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations
#define SOAP_TYPE___trt__GetMetadataConfigurations (2925)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
public:
	int soap_type() const { return 2925; } /* = unique id SOAP_TYPE___trt__GetMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations
#define SOAP_TYPE___trt__GetAudioOutputConfigurations (2929)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurations
{
public:
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;	/* optional element of type trt:GetAudioOutputConfigurations */
public:
	int soap_type() const { return 2929; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations (2933)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurations
{
public:
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;	/* optional element of type trt:GetAudioDecoderConfigurations */
public:
	int soap_type() const { return 2933; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration
#define SOAP_TYPE___trt__GetVideoSourceConfiguration (2937)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 2937; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration (2941)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
public:
	int soap_type() const { return 2941; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration
#define SOAP_TYPE___trt__GetAudioSourceConfiguration (2945)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 2945; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration (2949)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
public:
	int soap_type() const { return 2949; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration (2953)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 2953; } /* = unique id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration
#define SOAP_TYPE___trt__GetMetadataConfiguration (2957)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
public:
	int soap_type() const { return 2957; } /* = unique id SOAP_TYPE___trt__GetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration
#define SOAP_TYPE___trt__GetAudioOutputConfiguration (2961)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfiguration
{
public:
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;	/* optional element of type trt:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 2961; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration (2965)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfiguration
{
public:
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;	/* optional element of type trt:GetAudioDecoderConfiguration */
public:
	int soap_type() const { return 2965; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations (2969)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
public:
	int soap_type() const { return 2969; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations (2973)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
public:
	int soap_type() const { return 2973; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations (2977)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
public:
	int soap_type() const { return 2977; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations (2981)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
public:
	int soap_type() const { return 2981; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations (2985)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 2985; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations (2989)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
public:
	int soap_type() const { return 2989; } /* = unique id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations (2993)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioOutputConfigurations
{
public:
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;	/* optional element of type trt:GetCompatibleAudioOutputConfigurations */
public:
	int soap_type() const { return 2993; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations (2997)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioDecoderConfigurations
{
public:
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;	/* optional element of type trt:GetCompatibleAudioDecoderConfigurations */
public:
	int soap_type() const { return 2997; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration
#define SOAP_TYPE___trt__SetVideoSourceConfiguration (3001)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 3001; } /* = unique id SOAP_TYPE___trt__SetVideoSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration (3005)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
public:
	int soap_type() const { return 3005; } /* = unique id SOAP_TYPE___trt__SetVideoEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration
#define SOAP_TYPE___trt__SetAudioSourceConfiguration (3009)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 3009; } /* = unique id SOAP_TYPE___trt__SetAudioSourceConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration (3013)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
public:
	int soap_type() const { return 3013; } /* = unique id SOAP_TYPE___trt__SetAudioEncoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration (3017)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 3017; } /* = unique id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration
#define SOAP_TYPE___trt__SetMetadataConfiguration (3021)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
public:
	int soap_type() const { return 3021; } /* = unique id SOAP_TYPE___trt__SetMetadataConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration
#define SOAP_TYPE___trt__SetAudioOutputConfiguration (3025)
/* Operation wrapper: */
struct __trt__SetAudioOutputConfiguration
{
public:
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;	/* optional element of type trt:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 3025; } /* = unique id SOAP_TYPE___trt__SetAudioOutputConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration (3029)
/* Operation wrapper: */
struct __trt__SetAudioDecoderConfiguration
{
public:
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;	/* optional element of type trt:SetAudioDecoderConfiguration */
public:
	int soap_type() const { return 3029; } /* = unique id SOAP_TYPE___trt__SetAudioDecoderConfiguration */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions (3033)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 3033; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions (3037)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
public:
	int soap_type() const { return 3037; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions (3041)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 3041; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions (3045)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
public:
	int soap_type() const { return 3045; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions (3049)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
public:
	int soap_type() const { return 3049; } /* = unique id SOAP_TYPE___trt__GetMetadataConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions (3053)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurationOptions
{
public:
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;	/* optional element of type trt:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 3053; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions (3057)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurationOptions
{
public:
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;	/* optional element of type trt:GetAudioDecoderConfigurationOptions */
public:
	int soap_type() const { return 3057; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions */
};
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances (3061)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
public:
	int soap_type() const { return 3061; } /* = unique id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances */
};
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri
#define SOAP_TYPE___trt__GetStreamUri (3065)
/* Operation wrapper: */
struct __trt__GetStreamUri
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
public:
	int soap_type() const { return 3065; } /* = unique id SOAP_TYPE___trt__GetStreamUri */
};
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming
#define SOAP_TYPE___trt__StartMulticastStreaming (3069)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
public:
	int soap_type() const { return 3069; } /* = unique id SOAP_TYPE___trt__StartMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming
#define SOAP_TYPE___trt__StopMulticastStreaming (3073)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
public:
	int soap_type() const { return 3073; } /* = unique id SOAP_TYPE___trt__StopMulticastStreaming */
};
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint
#define SOAP_TYPE___trt__SetSynchronizationPoint (3077)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
public:
	int soap_type() const { return 3077; } /* = unique id SOAP_TYPE___trt__SetSynchronizationPoint */
};
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri
#define SOAP_TYPE___trt__GetSnapshotUri (3081)
/* Operation wrapper: */
struct __trt__GetSnapshotUri
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
public:
	int soap_type() const { return 3081; } /* = unique id SOAP_TYPE___trt__GetSnapshotUri */
};
#endif

#ifndef SOAP_TYPE___trt__GetServiceCapabilities_
#define SOAP_TYPE___trt__GetServiceCapabilities_ (3083)
/* Operation wrapper: */
struct __trt__GetServiceCapabilities_
{
public:
	_trt__GetServiceCapabilities *trt__GetServiceCapabilities;	/* optional element of type trt:GetServiceCapabilities */
public:
	int soap_type() const { return 3083; } /* = unique id SOAP_TYPE___trt__GetServiceCapabilities_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSources_
#define SOAP_TYPE___trt__GetVideoSources_ (3085)
/* Operation wrapper: */
struct __trt__GetVideoSources_
{
public:
	_trt__GetVideoSources *trt__GetVideoSources;	/* optional element of type trt:GetVideoSources */
public:
	int soap_type() const { return 3085; } /* = unique id SOAP_TYPE___trt__GetVideoSources_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSources_
#define SOAP_TYPE___trt__GetAudioSources_ (3087)
/* Operation wrapper: */
struct __trt__GetAudioSources_
{
public:
	_trt__GetAudioSources *trt__GetAudioSources;	/* optional element of type trt:GetAudioSources */
public:
	int soap_type() const { return 3087; } /* = unique id SOAP_TYPE___trt__GetAudioSources_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputs_
#define SOAP_TYPE___trt__GetAudioOutputs_ (3089)
/* Operation wrapper: */
struct __trt__GetAudioOutputs_
{
public:
	_trt__GetAudioOutputs *trt__GetAudioOutputs;	/* optional element of type trt:GetAudioOutputs */
public:
	int soap_type() const { return 3089; } /* = unique id SOAP_TYPE___trt__GetAudioOutputs_ */
};
#endif

#ifndef SOAP_TYPE___trt__CreateProfile_
#define SOAP_TYPE___trt__CreateProfile_ (3091)
/* Operation wrapper: */
struct __trt__CreateProfile_
{
public:
	_trt__CreateProfile *trt__CreateProfile;	/* optional element of type trt:CreateProfile */
public:
	int soap_type() const { return 3091; } /* = unique id SOAP_TYPE___trt__CreateProfile_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfile_
#define SOAP_TYPE___trt__GetProfile_ (3093)
/* Operation wrapper: */
struct __trt__GetProfile_
{
public:
	_trt__GetProfile *trt__GetProfile;	/* optional element of type trt:GetProfile */
public:
	int soap_type() const { return 3093; } /* = unique id SOAP_TYPE___trt__GetProfile_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetProfiles_
#define SOAP_TYPE___trt__GetProfiles_ (3095)
/* Operation wrapper: */
struct __trt__GetProfiles_
{
public:
	_trt__GetProfiles *trt__GetProfiles;	/* optional element of type trt:GetProfiles */
public:
	int soap_type() const { return 3095; } /* = unique id SOAP_TYPE___trt__GetProfiles_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoEncoderConfiguration_
#define SOAP_TYPE___trt__AddVideoEncoderConfiguration_ (3097)
/* Operation wrapper: */
struct __trt__AddVideoEncoderConfiguration_
{
public:
	_trt__AddVideoEncoderConfiguration *trt__AddVideoEncoderConfiguration;	/* optional element of type trt:AddVideoEncoderConfiguration */
public:
	int soap_type() const { return 3097; } /* = unique id SOAP_TYPE___trt__AddVideoEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoSourceConfiguration_
#define SOAP_TYPE___trt__AddVideoSourceConfiguration_ (3099)
/* Operation wrapper: */
struct __trt__AddVideoSourceConfiguration_
{
public:
	_trt__AddVideoSourceConfiguration *trt__AddVideoSourceConfiguration;	/* optional element of type trt:AddVideoSourceConfiguration */
public:
	int soap_type() const { return 3099; } /* = unique id SOAP_TYPE___trt__AddVideoSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioEncoderConfiguration_
#define SOAP_TYPE___trt__AddAudioEncoderConfiguration_ (3101)
/* Operation wrapper: */
struct __trt__AddAudioEncoderConfiguration_
{
public:
	_trt__AddAudioEncoderConfiguration *trt__AddAudioEncoderConfiguration;	/* optional element of type trt:AddAudioEncoderConfiguration */
public:
	int soap_type() const { return 3101; } /* = unique id SOAP_TYPE___trt__AddAudioEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioSourceConfiguration_
#define SOAP_TYPE___trt__AddAudioSourceConfiguration_ (3103)
/* Operation wrapper: */
struct __trt__AddAudioSourceConfiguration_
{
public:
	_trt__AddAudioSourceConfiguration *trt__AddAudioSourceConfiguration;	/* optional element of type trt:AddAudioSourceConfiguration */
public:
	int soap_type() const { return 3103; } /* = unique id SOAP_TYPE___trt__AddAudioSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddPTZConfiguration_
#define SOAP_TYPE___trt__AddPTZConfiguration_ (3105)
/* Operation wrapper: */
struct __trt__AddPTZConfiguration_
{
public:
	_trt__AddPTZConfiguration *trt__AddPTZConfiguration;	/* optional element of type trt:AddPTZConfiguration */
public:
	int soap_type() const { return 3105; } /* = unique id SOAP_TYPE___trt__AddPTZConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_
#define SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_ (3107)
/* Operation wrapper: */
struct __trt__AddVideoAnalyticsConfiguration_
{
public:
	_trt__AddVideoAnalyticsConfiguration *trt__AddVideoAnalyticsConfiguration;	/* optional element of type trt:AddVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 3107; } /* = unique id SOAP_TYPE___trt__AddVideoAnalyticsConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddMetadataConfiguration_
#define SOAP_TYPE___trt__AddMetadataConfiguration_ (3109)
/* Operation wrapper: */
struct __trt__AddMetadataConfiguration_
{
public:
	_trt__AddMetadataConfiguration *trt__AddMetadataConfiguration;	/* optional element of type trt:AddMetadataConfiguration */
public:
	int soap_type() const { return 3109; } /* = unique id SOAP_TYPE___trt__AddMetadataConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioOutputConfiguration_
#define SOAP_TYPE___trt__AddAudioOutputConfiguration_ (3111)
/* Operation wrapper: */
struct __trt__AddAudioOutputConfiguration_
{
public:
	_trt__AddAudioOutputConfiguration *trt__AddAudioOutputConfiguration;	/* optional element of type trt:AddAudioOutputConfiguration */
public:
	int soap_type() const { return 3111; } /* = unique id SOAP_TYPE___trt__AddAudioOutputConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__AddAudioDecoderConfiguration_
#define SOAP_TYPE___trt__AddAudioDecoderConfiguration_ (3113)
/* Operation wrapper: */
struct __trt__AddAudioDecoderConfiguration_
{
public:
	_trt__AddAudioDecoderConfiguration *trt__AddAudioDecoderConfiguration;	/* optional element of type trt:AddAudioDecoderConfiguration */
public:
	int soap_type() const { return 3113; } /* = unique id SOAP_TYPE___trt__AddAudioDecoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_
#define SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_ (3115)
/* Operation wrapper: */
struct __trt__RemoveVideoEncoderConfiguration_
{
public:
	_trt__RemoveVideoEncoderConfiguration *trt__RemoveVideoEncoderConfiguration;	/* optional element of type trt:RemoveVideoEncoderConfiguration */
public:
	int soap_type() const { return 3115; } /* = unique id SOAP_TYPE___trt__RemoveVideoEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoSourceConfiguration_
#define SOAP_TYPE___trt__RemoveVideoSourceConfiguration_ (3117)
/* Operation wrapper: */
struct __trt__RemoveVideoSourceConfiguration_
{
public:
	_trt__RemoveVideoSourceConfiguration *trt__RemoveVideoSourceConfiguration;	/* optional element of type trt:RemoveVideoSourceConfiguration */
public:
	int soap_type() const { return 3117; } /* = unique id SOAP_TYPE___trt__RemoveVideoSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_
#define SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_ (3119)
/* Operation wrapper: */
struct __trt__RemoveAudioEncoderConfiguration_
{
public:
	_trt__RemoveAudioEncoderConfiguration *trt__RemoveAudioEncoderConfiguration;	/* optional element of type trt:RemoveAudioEncoderConfiguration */
public:
	int soap_type() const { return 3119; } /* = unique id SOAP_TYPE___trt__RemoveAudioEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioSourceConfiguration_
#define SOAP_TYPE___trt__RemoveAudioSourceConfiguration_ (3121)
/* Operation wrapper: */
struct __trt__RemoveAudioSourceConfiguration_
{
public:
	_trt__RemoveAudioSourceConfiguration *trt__RemoveAudioSourceConfiguration;	/* optional element of type trt:RemoveAudioSourceConfiguration */
public:
	int soap_type() const { return 3121; } /* = unique id SOAP_TYPE___trt__RemoveAudioSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemovePTZConfiguration_
#define SOAP_TYPE___trt__RemovePTZConfiguration_ (3123)
/* Operation wrapper: */
struct __trt__RemovePTZConfiguration_
{
public:
	_trt__RemovePTZConfiguration *trt__RemovePTZConfiguration;	/* optional element of type trt:RemovePTZConfiguration */
public:
	int soap_type() const { return 3123; } /* = unique id SOAP_TYPE___trt__RemovePTZConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_
#define SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_ (3125)
/* Operation wrapper: */
struct __trt__RemoveVideoAnalyticsConfiguration_
{
public:
	_trt__RemoveVideoAnalyticsConfiguration *trt__RemoveVideoAnalyticsConfiguration;	/* optional element of type trt:RemoveVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 3125; } /* = unique id SOAP_TYPE___trt__RemoveVideoAnalyticsConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveMetadataConfiguration_
#define SOAP_TYPE___trt__RemoveMetadataConfiguration_ (3127)
/* Operation wrapper: */
struct __trt__RemoveMetadataConfiguration_
{
public:
	_trt__RemoveMetadataConfiguration *trt__RemoveMetadataConfiguration;	/* optional element of type trt:RemoveMetadataConfiguration */
public:
	int soap_type() const { return 3127; } /* = unique id SOAP_TYPE___trt__RemoveMetadataConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioOutputConfiguration_
#define SOAP_TYPE___trt__RemoveAudioOutputConfiguration_ (3129)
/* Operation wrapper: */
struct __trt__RemoveAudioOutputConfiguration_
{
public:
	_trt__RemoveAudioOutputConfiguration *trt__RemoveAudioOutputConfiguration;	/* optional element of type trt:RemoveAudioOutputConfiguration */
public:
	int soap_type() const { return 3129; } /* = unique id SOAP_TYPE___trt__RemoveAudioOutputConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_
#define SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_ (3131)
/* Operation wrapper: */
struct __trt__RemoveAudioDecoderConfiguration_
{
public:
	_trt__RemoveAudioDecoderConfiguration *trt__RemoveAudioDecoderConfiguration;	/* optional element of type trt:RemoveAudioDecoderConfiguration */
public:
	int soap_type() const { return 3131; } /* = unique id SOAP_TYPE___trt__RemoveAudioDecoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__DeleteProfile_
#define SOAP_TYPE___trt__DeleteProfile_ (3133)
/* Operation wrapper: */
struct __trt__DeleteProfile_
{
public:
	_trt__DeleteProfile *trt__DeleteProfile;	/* optional element of type trt:DeleteProfile */
public:
	int soap_type() const { return 3133; } /* = unique id SOAP_TYPE___trt__DeleteProfile_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurations_
#define SOAP_TYPE___trt__GetVideoSourceConfigurations_ (3135)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurations_
{
public:
	_trt__GetVideoSourceConfigurations *trt__GetVideoSourceConfigurations;	/* optional element of type trt:GetVideoSourceConfigurations */
public:
	int soap_type() const { return 3135; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurations_
#define SOAP_TYPE___trt__GetVideoEncoderConfigurations_ (3137)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurations_
{
public:
	_trt__GetVideoEncoderConfigurations *trt__GetVideoEncoderConfigurations;	/* optional element of type trt:GetVideoEncoderConfigurations */
public:
	int soap_type() const { return 3137; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurations_
#define SOAP_TYPE___trt__GetAudioSourceConfigurations_ (3139)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurations_
{
public:
	_trt__GetAudioSourceConfigurations *trt__GetAudioSourceConfigurations;	/* optional element of type trt:GetAudioSourceConfigurations */
public:
	int soap_type() const { return 3139; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurations_
#define SOAP_TYPE___trt__GetAudioEncoderConfigurations_ (3141)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurations_
{
public:
	_trt__GetAudioEncoderConfigurations *trt__GetAudioEncoderConfigurations;	/* optional element of type trt:GetAudioEncoderConfigurations */
public:
	int soap_type() const { return 3141; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_
#define SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_ (3143)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfigurations_
{
public:
	_trt__GetVideoAnalyticsConfigurations *trt__GetVideoAnalyticsConfigurations;	/* optional element of type trt:GetVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 3143; } /* = unique id SOAP_TYPE___trt__GetVideoAnalyticsConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurations_
#define SOAP_TYPE___trt__GetMetadataConfigurations_ (3145)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurations_
{
public:
	_trt__GetMetadataConfigurations *trt__GetMetadataConfigurations;	/* optional element of type trt:GetMetadataConfigurations */
public:
	int soap_type() const { return 3145; } /* = unique id SOAP_TYPE___trt__GetMetadataConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurations_
#define SOAP_TYPE___trt__GetAudioOutputConfigurations_ (3147)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurations_
{
public:
	_trt__GetAudioOutputConfigurations *trt__GetAudioOutputConfigurations;	/* optional element of type trt:GetAudioOutputConfigurations */
public:
	int soap_type() const { return 3147; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurations_
#define SOAP_TYPE___trt__GetAudioDecoderConfigurations_ (3149)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurations_
{
public:
	_trt__GetAudioDecoderConfigurations *trt__GetAudioDecoderConfigurations;	/* optional element of type trt:GetAudioDecoderConfigurations */
public:
	int soap_type() const { return 3149; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfiguration_
#define SOAP_TYPE___trt__GetVideoSourceConfiguration_ (3151)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfiguration_
{
public:
	_trt__GetVideoSourceConfiguration *trt__GetVideoSourceConfiguration;	/* optional element of type trt:GetVideoSourceConfiguration */
public:
	int soap_type() const { return 3151; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfiguration_
#define SOAP_TYPE___trt__GetVideoEncoderConfiguration_ (3153)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfiguration_
{
public:
	_trt__GetVideoEncoderConfiguration *trt__GetVideoEncoderConfiguration;	/* optional element of type trt:GetVideoEncoderConfiguration */
public:
	int soap_type() const { return 3153; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfiguration_
#define SOAP_TYPE___trt__GetAudioSourceConfiguration_ (3155)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfiguration_
{
public:
	_trt__GetAudioSourceConfiguration *trt__GetAudioSourceConfiguration;	/* optional element of type trt:GetAudioSourceConfiguration */
public:
	int soap_type() const { return 3155; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfiguration_
#define SOAP_TYPE___trt__GetAudioEncoderConfiguration_ (3157)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfiguration_
{
public:
	_trt__GetAudioEncoderConfiguration *trt__GetAudioEncoderConfiguration;	/* optional element of type trt:GetAudioEncoderConfiguration */
public:
	int soap_type() const { return 3157; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_
#define SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_ (3159)
/* Operation wrapper: */
struct __trt__GetVideoAnalyticsConfiguration_
{
public:
	_trt__GetVideoAnalyticsConfiguration *trt__GetVideoAnalyticsConfiguration;	/* optional element of type trt:GetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 3159; } /* = unique id SOAP_TYPE___trt__GetVideoAnalyticsConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfiguration_
#define SOAP_TYPE___trt__GetMetadataConfiguration_ (3161)
/* Operation wrapper: */
struct __trt__GetMetadataConfiguration_
{
public:
	_trt__GetMetadataConfiguration *trt__GetMetadataConfiguration;	/* optional element of type trt:GetMetadataConfiguration */
public:
	int soap_type() const { return 3161; } /* = unique id SOAP_TYPE___trt__GetMetadataConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfiguration_
#define SOAP_TYPE___trt__GetAudioOutputConfiguration_ (3163)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfiguration_
{
public:
	_trt__GetAudioOutputConfiguration *trt__GetAudioOutputConfiguration;	/* optional element of type trt:GetAudioOutputConfiguration */
public:
	int soap_type() const { return 3163; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfiguration_
#define SOAP_TYPE___trt__GetAudioDecoderConfiguration_ (3165)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfiguration_
{
public:
	_trt__GetAudioDecoderConfiguration *trt__GetAudioDecoderConfiguration;	/* optional element of type trt:GetAudioDecoderConfiguration */
public:
	int soap_type() const { return 3165; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_
#define SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_ (3167)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoEncoderConfigurations_
{
public:
	_trt__GetCompatibleVideoEncoderConfigurations *trt__GetCompatibleVideoEncoderConfigurations;	/* optional element of type trt:GetCompatibleVideoEncoderConfigurations */
public:
	int soap_type() const { return 3167; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoEncoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_
#define SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_ (3169)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoSourceConfigurations_
{
public:
	_trt__GetCompatibleVideoSourceConfigurations *trt__GetCompatibleVideoSourceConfigurations;	/* optional element of type trt:GetCompatibleVideoSourceConfigurations */
public:
	int soap_type() const { return 3169; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoSourceConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_
#define SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_ (3171)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioEncoderConfigurations_
{
public:
	_trt__GetCompatibleAudioEncoderConfigurations *trt__GetCompatibleAudioEncoderConfigurations;	/* optional element of type trt:GetCompatibleAudioEncoderConfigurations */
public:
	int soap_type() const { return 3171; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioEncoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_
#define SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_ (3173)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioSourceConfigurations_
{
public:
	_trt__GetCompatibleAudioSourceConfigurations *trt__GetCompatibleAudioSourceConfigurations;	/* optional element of type trt:GetCompatibleAudioSourceConfigurations */
public:
	int soap_type() const { return 3173; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioSourceConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_
#define SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_ (3175)
/* Operation wrapper: */
struct __trt__GetCompatibleVideoAnalyticsConfigurations_
{
public:
	_trt__GetCompatibleVideoAnalyticsConfigurations *trt__GetCompatibleVideoAnalyticsConfigurations;	/* optional element of type trt:GetCompatibleVideoAnalyticsConfigurations */
public:
	int soap_type() const { return 3175; } /* = unique id SOAP_TYPE___trt__GetCompatibleVideoAnalyticsConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_
#define SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_ (3177)
/* Operation wrapper: */
struct __trt__GetCompatibleMetadataConfigurations_
{
public:
	_trt__GetCompatibleMetadataConfigurations *trt__GetCompatibleMetadataConfigurations;	/* optional element of type trt:GetCompatibleMetadataConfigurations */
public:
	int soap_type() const { return 3177; } /* = unique id SOAP_TYPE___trt__GetCompatibleMetadataConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_
#define SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_ (3179)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioOutputConfigurations_
{
public:
	_trt__GetCompatibleAudioOutputConfigurations *trt__GetCompatibleAudioOutputConfigurations;	/* optional element of type trt:GetCompatibleAudioOutputConfigurations */
public:
	int soap_type() const { return 3179; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioOutputConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_
#define SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_ (3181)
/* Operation wrapper: */
struct __trt__GetCompatibleAudioDecoderConfigurations_
{
public:
	_trt__GetCompatibleAudioDecoderConfigurations *trt__GetCompatibleAudioDecoderConfigurations;	/* optional element of type trt:GetCompatibleAudioDecoderConfigurations */
public:
	int soap_type() const { return 3181; } /* = unique id SOAP_TYPE___trt__GetCompatibleAudioDecoderConfigurations_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoSourceConfiguration_
#define SOAP_TYPE___trt__SetVideoSourceConfiguration_ (3183)
/* Operation wrapper: */
struct __trt__SetVideoSourceConfiguration_
{
public:
	_trt__SetVideoSourceConfiguration *trt__SetVideoSourceConfiguration;	/* optional element of type trt:SetVideoSourceConfiguration */
public:
	int soap_type() const { return 3183; } /* = unique id SOAP_TYPE___trt__SetVideoSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoEncoderConfiguration_
#define SOAP_TYPE___trt__SetVideoEncoderConfiguration_ (3185)
/* Operation wrapper: */
struct __trt__SetVideoEncoderConfiguration_
{
public:
	_trt__SetVideoEncoderConfiguration *trt__SetVideoEncoderConfiguration;	/* optional element of type trt:SetVideoEncoderConfiguration */
public:
	int soap_type() const { return 3185; } /* = unique id SOAP_TYPE___trt__SetVideoEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioSourceConfiguration_
#define SOAP_TYPE___trt__SetAudioSourceConfiguration_ (3187)
/* Operation wrapper: */
struct __trt__SetAudioSourceConfiguration_
{
public:
	_trt__SetAudioSourceConfiguration *trt__SetAudioSourceConfiguration;	/* optional element of type trt:SetAudioSourceConfiguration */
public:
	int soap_type() const { return 3187; } /* = unique id SOAP_TYPE___trt__SetAudioSourceConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioEncoderConfiguration_
#define SOAP_TYPE___trt__SetAudioEncoderConfiguration_ (3189)
/* Operation wrapper: */
struct __trt__SetAudioEncoderConfiguration_
{
public:
	_trt__SetAudioEncoderConfiguration *trt__SetAudioEncoderConfiguration;	/* optional element of type trt:SetAudioEncoderConfiguration */
public:
	int soap_type() const { return 3189; } /* = unique id SOAP_TYPE___trt__SetAudioEncoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_
#define SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_ (3191)
/* Operation wrapper: */
struct __trt__SetVideoAnalyticsConfiguration_
{
public:
	_trt__SetVideoAnalyticsConfiguration *trt__SetVideoAnalyticsConfiguration;	/* optional element of type trt:SetVideoAnalyticsConfiguration */
public:
	int soap_type() const { return 3191; } /* = unique id SOAP_TYPE___trt__SetVideoAnalyticsConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetMetadataConfiguration_
#define SOAP_TYPE___trt__SetMetadataConfiguration_ (3193)
/* Operation wrapper: */
struct __trt__SetMetadataConfiguration_
{
public:
	_trt__SetMetadataConfiguration *trt__SetMetadataConfiguration;	/* optional element of type trt:SetMetadataConfiguration */
public:
	int soap_type() const { return 3193; } /* = unique id SOAP_TYPE___trt__SetMetadataConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioOutputConfiguration_
#define SOAP_TYPE___trt__SetAudioOutputConfiguration_ (3195)
/* Operation wrapper: */
struct __trt__SetAudioOutputConfiguration_
{
public:
	_trt__SetAudioOutputConfiguration *trt__SetAudioOutputConfiguration;	/* optional element of type trt:SetAudioOutputConfiguration */
public:
	int soap_type() const { return 3195; } /* = unique id SOAP_TYPE___trt__SetAudioOutputConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetAudioDecoderConfiguration_
#define SOAP_TYPE___trt__SetAudioDecoderConfiguration_ (3197)
/* Operation wrapper: */
struct __trt__SetAudioDecoderConfiguration_
{
public:
	_trt__SetAudioDecoderConfiguration *trt__SetAudioDecoderConfiguration;	/* optional element of type trt:SetAudioDecoderConfiguration */
public:
	int soap_type() const { return 3197; } /* = unique id SOAP_TYPE___trt__SetAudioDecoderConfiguration_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_
#define SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_ (3199)
/* Operation wrapper: */
struct __trt__GetVideoSourceConfigurationOptions_
{
public:
	_trt__GetVideoSourceConfigurationOptions *trt__GetVideoSourceConfigurationOptions;	/* optional element of type trt:GetVideoSourceConfigurationOptions */
public:
	int soap_type() const { return 3199; } /* = unique id SOAP_TYPE___trt__GetVideoSourceConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_
#define SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_ (3201)
/* Operation wrapper: */
struct __trt__GetVideoEncoderConfigurationOptions_
{
public:
	_trt__GetVideoEncoderConfigurationOptions *trt__GetVideoEncoderConfigurationOptions;	/* optional element of type trt:GetVideoEncoderConfigurationOptions */
public:
	int soap_type() const { return 3201; } /* = unique id SOAP_TYPE___trt__GetVideoEncoderConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_
#define SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_ (3203)
/* Operation wrapper: */
struct __trt__GetAudioSourceConfigurationOptions_
{
public:
	_trt__GetAudioSourceConfigurationOptions *trt__GetAudioSourceConfigurationOptions;	/* optional element of type trt:GetAudioSourceConfigurationOptions */
public:
	int soap_type() const { return 3203; } /* = unique id SOAP_TYPE___trt__GetAudioSourceConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_
#define SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_ (3205)
/* Operation wrapper: */
struct __trt__GetAudioEncoderConfigurationOptions_
{
public:
	_trt__GetAudioEncoderConfigurationOptions *trt__GetAudioEncoderConfigurationOptions;	/* optional element of type trt:GetAudioEncoderConfigurationOptions */
public:
	int soap_type() const { return 3205; } /* = unique id SOAP_TYPE___trt__GetAudioEncoderConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetMetadataConfigurationOptions_
#define SOAP_TYPE___trt__GetMetadataConfigurationOptions_ (3207)
/* Operation wrapper: */
struct __trt__GetMetadataConfigurationOptions_
{
public:
	_trt__GetMetadataConfigurationOptions *trt__GetMetadataConfigurationOptions;	/* optional element of type trt:GetMetadataConfigurationOptions */
public:
	int soap_type() const { return 3207; } /* = unique id SOAP_TYPE___trt__GetMetadataConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_
#define SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_ (3209)
/* Operation wrapper: */
struct __trt__GetAudioOutputConfigurationOptions_
{
public:
	_trt__GetAudioOutputConfigurationOptions *trt__GetAudioOutputConfigurationOptions;	/* optional element of type trt:GetAudioOutputConfigurationOptions */
public:
	int soap_type() const { return 3209; } /* = unique id SOAP_TYPE___trt__GetAudioOutputConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_
#define SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_ (3211)
/* Operation wrapper: */
struct __trt__GetAudioDecoderConfigurationOptions_
{
public:
	_trt__GetAudioDecoderConfigurationOptions *trt__GetAudioDecoderConfigurationOptions;	/* optional element of type trt:GetAudioDecoderConfigurationOptions */
public:
	int soap_type() const { return 3211; } /* = unique id SOAP_TYPE___trt__GetAudioDecoderConfigurationOptions_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_
#define SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_ (3213)
/* Operation wrapper: */
struct __trt__GetGuaranteedNumberOfVideoEncoderInstances_
{
public:
	_trt__GetGuaranteedNumberOfVideoEncoderInstances *trt__GetGuaranteedNumberOfVideoEncoderInstances;	/* optional element of type trt:GetGuaranteedNumberOfVideoEncoderInstances */
public:
	int soap_type() const { return 3213; } /* = unique id SOAP_TYPE___trt__GetGuaranteedNumberOfVideoEncoderInstances_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetStreamUri_
#define SOAP_TYPE___trt__GetStreamUri_ (3215)
/* Operation wrapper: */
struct __trt__GetStreamUri_
{
public:
	_trt__GetStreamUri *trt__GetStreamUri;	/* optional element of type trt:GetStreamUri */
public:
	int soap_type() const { return 3215; } /* = unique id SOAP_TYPE___trt__GetStreamUri_ */
};
#endif

#ifndef SOAP_TYPE___trt__StartMulticastStreaming_
#define SOAP_TYPE___trt__StartMulticastStreaming_ (3217)
/* Operation wrapper: */
struct __trt__StartMulticastStreaming_
{
public:
	_trt__StartMulticastStreaming *trt__StartMulticastStreaming;	/* optional element of type trt:StartMulticastStreaming */
public:
	int soap_type() const { return 3217; } /* = unique id SOAP_TYPE___trt__StartMulticastStreaming_ */
};
#endif

#ifndef SOAP_TYPE___trt__StopMulticastStreaming_
#define SOAP_TYPE___trt__StopMulticastStreaming_ (3219)
/* Operation wrapper: */
struct __trt__StopMulticastStreaming_
{
public:
	_trt__StopMulticastStreaming *trt__StopMulticastStreaming;	/* optional element of type trt:StopMulticastStreaming */
public:
	int soap_type() const { return 3219; } /* = unique id SOAP_TYPE___trt__StopMulticastStreaming_ */
};
#endif

#ifndef SOAP_TYPE___trt__SetSynchronizationPoint_
#define SOAP_TYPE___trt__SetSynchronizationPoint_ (3221)
/* Operation wrapper: */
struct __trt__SetSynchronizationPoint_
{
public:
	_trt__SetSynchronizationPoint *trt__SetSynchronizationPoint;	/* optional element of type trt:SetSynchronizationPoint */
public:
	int soap_type() const { return 3221; } /* = unique id SOAP_TYPE___trt__SetSynchronizationPoint_ */
};
#endif

#ifndef SOAP_TYPE___trt__GetSnapshotUri_
#define SOAP_TYPE___trt__GetSnapshotUri_ (3223)
/* Operation wrapper: */
struct __trt__GetSnapshotUri_
{
public:
	_trt__GetSnapshotUri *trt__GetSnapshotUri;	/* optional element of type trt:GetSnapshotUri */
public:
	int soap_type() const { return 3223; } /* = unique id SOAP_TYPE___trt__GetSnapshotUri_ */
};
#endif

#ifndef SOAP_TYPE___trv__GetServiceCapabilities
#define SOAP_TYPE___trv__GetServiceCapabilities (3227)
/* Operation wrapper: */
struct __trv__GetServiceCapabilities
{
public:
	_trv__GetServiceCapabilities *trv__GetServiceCapabilities;	/* optional element of type trv:GetServiceCapabilities */
public:
	int soap_type() const { return 3227; } /* = unique id SOAP_TYPE___trv__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceivers
#define SOAP_TYPE___trv__GetReceivers (3231)
/* Operation wrapper: */
struct __trv__GetReceivers
{
public:
	_trv__GetReceivers *trv__GetReceivers;	/* optional element of type trv:GetReceivers */
public:
	int soap_type() const { return 3231; } /* = unique id SOAP_TYPE___trv__GetReceivers */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiver
#define SOAP_TYPE___trv__GetReceiver (3235)
/* Operation wrapper: */
struct __trv__GetReceiver
{
public:
	_trv__GetReceiver *trv__GetReceiver;	/* optional element of type trv:GetReceiver */
public:
	int soap_type() const { return 3235; } /* = unique id SOAP_TYPE___trv__GetReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__CreateReceiver
#define SOAP_TYPE___trv__CreateReceiver (3239)
/* Operation wrapper: */
struct __trv__CreateReceiver
{
public:
	_trv__CreateReceiver *trv__CreateReceiver;	/* optional element of type trv:CreateReceiver */
public:
	int soap_type() const { return 3239; } /* = unique id SOAP_TYPE___trv__CreateReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__DeleteReceiver
#define SOAP_TYPE___trv__DeleteReceiver (3243)
/* Operation wrapper: */
struct __trv__DeleteReceiver
{
public:
	_trv__DeleteReceiver *trv__DeleteReceiver;	/* optional element of type trv:DeleteReceiver */
public:
	int soap_type() const { return 3243; } /* = unique id SOAP_TYPE___trv__DeleteReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__ConfigureReceiver
#define SOAP_TYPE___trv__ConfigureReceiver (3247)
/* Operation wrapper: */
struct __trv__ConfigureReceiver
{
public:
	_trv__ConfigureReceiver *trv__ConfigureReceiver;	/* optional element of type trv:ConfigureReceiver */
public:
	int soap_type() const { return 3247; } /* = unique id SOAP_TYPE___trv__ConfigureReceiver */
};
#endif

#ifndef SOAP_TYPE___trv__SetReceiverMode
#define SOAP_TYPE___trv__SetReceiverMode (3251)
/* Operation wrapper: */
struct __trv__SetReceiverMode
{
public:
	_trv__SetReceiverMode *trv__SetReceiverMode;	/* optional element of type trv:SetReceiverMode */
public:
	int soap_type() const { return 3251; } /* = unique id SOAP_TYPE___trv__SetReceiverMode */
};
#endif

#ifndef SOAP_TYPE___trv__GetReceiverState
#define SOAP_TYPE___trv__GetReceiverState (3255)
/* Operation wrapper: */
struct __trv__GetReceiverState
{
public:
	_trv__GetReceiverState *trv__GetReceiverState;	/* optional element of type trv:GetReceiverState */
public:
	int soap_type() const { return 3255; } /* = unique id SOAP_TYPE___trv__GetReceiverState */
};
#endif

#ifndef SOAP_TYPE___tse__GetServiceCapabilities
#define SOAP_TYPE___tse__GetServiceCapabilities (3259)
/* Operation wrapper: */
struct __tse__GetServiceCapabilities
{
public:
	_tse__GetServiceCapabilities *tse__GetServiceCapabilities;	/* optional element of type tse:GetServiceCapabilities */
public:
	int soap_type() const { return 3259; } /* = unique id SOAP_TYPE___tse__GetServiceCapabilities */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSummary
#define SOAP_TYPE___tse__GetRecordingSummary (3263)
/* Operation wrapper: */
struct __tse__GetRecordingSummary
{
public:
	_tse__GetRecordingSummary *tse__GetRecordingSummary;	/* optional element of type tse:GetRecordingSummary */
public:
	int soap_type() const { return 3263; } /* = unique id SOAP_TYPE___tse__GetRecordingSummary */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingInformation
#define SOAP_TYPE___tse__GetRecordingInformation (3267)
/* Operation wrapper: */
struct __tse__GetRecordingInformation
{
public:
	_tse__GetRecordingInformation *tse__GetRecordingInformation;	/* optional element of type tse:GetRecordingInformation */
public:
	int soap_type() const { return 3267; } /* = unique id SOAP_TYPE___tse__GetRecordingInformation */
};
#endif

#ifndef SOAP_TYPE___tse__GetMediaAttributes
#define SOAP_TYPE___tse__GetMediaAttributes (3271)
/* Operation wrapper: */
struct __tse__GetMediaAttributes
{
public:
	_tse__GetMediaAttributes *tse__GetMediaAttributes;	/* optional element of type tse:GetMediaAttributes */
public:
	int soap_type() const { return 3271; } /* = unique id SOAP_TYPE___tse__GetMediaAttributes */
};
#endif

#ifndef SOAP_TYPE___tse__FindRecordings
#define SOAP_TYPE___tse__FindRecordings (3275)
/* Operation wrapper: */
struct __tse__FindRecordings
{
public:
	_tse__FindRecordings *tse__FindRecordings;	/* optional element of type tse:FindRecordings */
public:
	int soap_type() const { return 3275; } /* = unique id SOAP_TYPE___tse__FindRecordings */
};
#endif

#ifndef SOAP_TYPE___tse__GetRecordingSearchResults
#define SOAP_TYPE___tse__GetRecordingSearchResults (3279)
/* Operation wrapper: */
struct __tse__GetRecordingSearchResults
{
public:
	_tse__GetRecordingSearchResults *tse__GetRecordingSearchResults;	/* optional element of type tse:GetRecordingSearchResults */
public:
	int soap_type() const { return 3279; } /* = unique id SOAP_TYPE___tse__GetRecordingSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindEvents
#define SOAP_TYPE___tse__FindEvents (3283)
/* Operation wrapper: */
struct __tse__FindEvents
{
public:
	_tse__FindEvents *tse__FindEvents;	/* optional element of type tse:FindEvents */
public:
	int soap_type() const { return 3283; } /* = unique id SOAP_TYPE___tse__FindEvents */
};
#endif

#ifndef SOAP_TYPE___tse__GetEventSearchResults
#define SOAP_TYPE___tse__GetEventSearchResults (3287)
/* Operation wrapper: */
struct __tse__GetEventSearchResults
{
public:
	_tse__GetEventSearchResults *tse__GetEventSearchResults;	/* optional element of type tse:GetEventSearchResults */
public:
	int soap_type() const { return 3287; } /* = unique id SOAP_TYPE___tse__GetEventSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__FindPTZPosition
#define SOAP_TYPE___tse__FindPTZPosition (3291)
/* Operation wrapper: */
struct __tse__FindPTZPosition
{
public:
	_tse__FindPTZPosition *tse__FindPTZPosition;	/* optional element of type tse:FindPTZPosition */
public:
	int soap_type() const { return 3291; } /* = unique id SOAP_TYPE___tse__FindPTZPosition */
};
#endif

#ifndef SOAP_TYPE___tse__GetPTZPositionSearchResults
#define SOAP_TYPE___tse__GetPTZPositionSearchResults (3295)
/* Operation wrapper: */
struct __tse__GetPTZPositionSearchResults
{
public:
	_tse__GetPTZPositionSearchResults *tse__GetPTZPositionSearchResults;	/* optional element of type tse:GetPTZPositionSearchResults */
public:
	int soap_type() const { return 3295; } /* = unique id SOAP_TYPE___tse__GetPTZPositionSearchResults */
};
#endif

#ifndef SOAP_TYPE___tse__GetSearchState
#define SOAP_TYPE___tse__GetSearchState (3299)
/* Operation wrapper: */
struct __tse__GetSearchState
{
public:
	_tse__GetSearchState *tse__GetSearchState;	/* optional element of type tse:GetSearchState */
public:
	int soap_type() const { return 3299; } /* = unique id SOAP_TYPE___tse__GetSearchState */
};
#endif

#ifndef SOAP_TYPE___tse__EndSearch
#define SOAP_TYPE___tse__EndSearch (3303)
/* Operation wrapper: */
struct __tse__EndSearch
{
public:
	_tse__EndSearch *tse__EndSearch;	/* optional element of type tse:EndSearch */
public:
	int soap_type() const { return 3303; } /* = unique id SOAP_TYPE___tse__EndSearch */
};
#endif

#ifndef SOAP_TYPE___tse__FindMetadata
#define SOAP_TYPE___tse__FindMetadata (3307)
/* Operation wrapper: */
struct __tse__FindMetadata
{
public:
	_tse__FindMetadata *tse__FindMetadata;	/* optional element of type tse:FindMetadata */
public:
	int soap_type() const { return 3307; } /* = unique id SOAP_TYPE___tse__FindMetadata */
};
#endif

#ifndef SOAP_TYPE___tse__GetMetadataSearchResults
#define SOAP_TYPE___tse__GetMetadataSearchResults (3311)
/* Operation wrapper: */
struct __tse__GetMetadataSearchResults
{
public:
	_tse__GetMetadataSearchResults *tse__GetMetadataSearchResults;	/* optional element of type tse:GetMetadataSearchResults */
public:
	int soap_type() const { return 3311; } /* = unique id SOAP_TYPE___tse__GetMetadataSearchResults */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_wsa5__RelationshipTypeOpenEnum
#define SOAP_TYPE_wsa5__RelationshipTypeOpenEnum (17)
typedef char *wsa5__RelationshipTypeOpenEnum;
#endif

#ifndef SOAP_TYPE_wsa5__FaultCodesOpenEnumType
#define SOAP_TYPE_wsa5__FaultCodesOpenEnumType (18)
typedef char *wsa5__FaultCodesOpenEnumType;
#endif

#ifndef SOAP_TYPE__wsa5__EndpointReference
#define SOAP_TYPE__wsa5__EndpointReference (25)
typedef struct wsa5__EndpointReferenceType _wsa5__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa5__ReferenceParameters
#define SOAP_TYPE__wsa5__ReferenceParameters (26)
typedef struct wsa5__ReferenceParametersType _wsa5__ReferenceParameters;
#endif

#ifndef SOAP_TYPE__wsa5__Metadata
#define SOAP_TYPE__wsa5__Metadata (27)
typedef struct wsa5__MetadataType _wsa5__Metadata;
#endif

#ifndef SOAP_TYPE__wsa5__MessageID
#define SOAP_TYPE__wsa5__MessageID (28)
typedef char *_wsa5__MessageID;
#endif

#ifndef SOAP_TYPE__wsa5__RelatesTo
#define SOAP_TYPE__wsa5__RelatesTo (29)
typedef struct wsa5__RelatesToType _wsa5__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa5__ReplyTo
#define SOAP_TYPE__wsa5__ReplyTo (30)
typedef struct wsa5__EndpointReferenceType _wsa5__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa5__From
#define SOAP_TYPE__wsa5__From (31)
typedef struct wsa5__EndpointReferenceType _wsa5__From;
#endif

#ifndef SOAP_TYPE__wsa5__FaultTo
#define SOAP_TYPE__wsa5__FaultTo (32)
typedef struct wsa5__EndpointReferenceType _wsa5__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa5__To
#define SOAP_TYPE__wsa5__To (33)
typedef char *_wsa5__To;
#endif

#ifndef SOAP_TYPE__wsa5__Action
#define SOAP_TYPE__wsa5__Action (34)
typedef char *_wsa5__Action;
#endif

#ifndef SOAP_TYPE__wsa5__RetryAfter
#define SOAP_TYPE__wsa5__RetryAfter (36)
typedef ULONG64 _wsa5__RetryAfter;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemHeaderQName
#define SOAP_TYPE__wsa5__ProblemHeaderQName (37)
typedef char *_wsa5__ProblemHeaderQName;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemIRI
#define SOAP_TYPE__wsa5__ProblemIRI (38)
typedef char *_wsa5__ProblemIRI;
#endif

#ifndef SOAP_TYPE__wsa5__ProblemAction
#define SOAP_TYPE__wsa5__ProblemAction (39)
typedef struct wsa5__ProblemActionType _wsa5__ProblemAction;
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Envelope
#define SOAP_TYPE_SOAP_ENV__Envelope (63)
typedef std::string SOAP_ENV__Envelope;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (64)
typedef std::string xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREFS
#define SOAP_TYPE_xsd__IDREFS (65)
typedef std::string xsd__IDREFS;
#endif

#ifndef SOAP_TYPE_xsd__NCName
#define SOAP_TYPE_xsd__NCName (66)
typedef std::string xsd__NCName;
#endif

#ifndef SOAP_TYPE_xsd__anySimpleType
#define SOAP_TYPE_xsd__anySimpleType (67)
typedef std::string xsd__anySimpleType;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (68)
typedef std::string xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (69)
typedef std::string xsd__duration;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (70)
typedef std::string xsd__integer;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (71)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (72)
typedef std::string xsd__token;
#endif

#ifndef SOAP_TYPE__xmime__contentType
#define SOAP_TYPE__xmime__contentType (73)
typedef std::string _xmime__contentType;
#endif

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (74)
typedef std::string _xml__lang;
#endif

#ifndef SOAP_TYPE_tds__EAPMethodTypes
#define SOAP_TYPE_tds__EAPMethodTypes (1102)
typedef std::string tds__EAPMethodTypes;
#endif

#ifndef SOAP_TYPE_tt__IntAttrList
#define SOAP_TYPE_tt__IntAttrList (1103)
typedef std::string tt__IntAttrList;
#endif

#ifndef SOAP_TYPE_tt__FloatAttrList
#define SOAP_TYPE_tt__FloatAttrList (1104)
typedef std::string tt__FloatAttrList;
#endif

#ifndef SOAP_TYPE_tt__StringAttrList
#define SOAP_TYPE_tt__StringAttrList (1105)
typedef std::string tt__StringAttrList;
#endif

#ifndef SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType
#define SOAP_TYPE_wsnt__AbsoluteOrRelativeTimeType (1106)
typedef std::string wsnt__AbsoluteOrRelativeTimeType;
#endif

#ifndef SOAP_TYPE_tmd__DelayTimes
#define SOAP_TYPE_tmd__DelayTimes (1107)
typedef std::string tmd__DelayTimes;
#endif

#ifndef SOAP_TYPE_wsd__OpenRelationshipType
#define SOAP_TYPE_wsd__OpenRelationshipType (1108)
typedef std::string wsd__OpenRelationshipType;
#endif

#ifndef SOAP_TYPE_wsd__QNameListType
#define SOAP_TYPE_wsd__QNameListType (1109)
typedef std::string wsd__QNameListType;
#endif

#ifndef SOAP_TYPE_wsd__UriListType
#define SOAP_TYPE_wsd__UriListType (1110)
typedef std::string wsd__UriListType;
#endif

#ifndef SOAP_TYPE_wsd__FaultCodeOpenType
#define SOAP_TYPE_wsd__FaultCodeOpenType (1111)
typedef std::string wsd__FaultCodeOpenType;
#endif

#ifndef SOAP_TYPE_trc__EncodingTypes
#define SOAP_TYPE_trc__EncodingTypes (1112)
typedef std::string trc__EncodingTypes;
#endif

#ifndef SOAP_TYPE_tt__ReferenceToken
#define SOAP_TYPE_tt__ReferenceToken (1113)
typedef std::string tt__ReferenceToken;
#endif

#ifndef SOAP_TYPE_tt__Name
#define SOAP_TYPE_tt__Name (1114)
typedef std::string tt__Name;
#endif

#ifndef SOAP_TYPE_tt__NetworkInterfaceConfigPriority
#define SOAP_TYPE_tt__NetworkInterfaceConfigPriority (1124)
typedef std::string tt__NetworkInterfaceConfigPriority;
#endif

#ifndef SOAP_TYPE_tt__IANA_IfTypes
#define SOAP_TYPE_tt__IANA_IfTypes (1126)
typedef int tt__IANA_IfTypes;
#endif

#ifndef SOAP_TYPE_tt__IPv4Address
#define SOAP_TYPE_tt__IPv4Address (1130)
typedef std::string tt__IPv4Address;
#endif

#ifndef SOAP_TYPE_tt__IPv6Address
#define SOAP_TYPE_tt__IPv6Address (1131)
typedef std::string tt__IPv6Address;
#endif

#ifndef SOAP_TYPE_tt__HwAddress
#define SOAP_TYPE_tt__HwAddress (1132)
typedef std::string tt__HwAddress;
#endif

#ifndef SOAP_TYPE_tt__DNSName
#define SOAP_TYPE_tt__DNSName (1134)
typedef std::string tt__DNSName;
#endif

#ifndef SOAP_TYPE_tt__Domain
#define SOAP_TYPE_tt__Domain (1135)
typedef std::string tt__Domain;
#endif

#ifndef SOAP_TYPE_tt__Dot11SSIDType
#define SOAP_TYPE_tt__Dot11SSIDType (1138)
typedef xsd__hexBinary tt__Dot11SSIDType;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSK
#define SOAP_TYPE_tt__Dot11PSK (1142)
typedef xsd__hexBinary tt__Dot11PSK;
#endif

#ifndef SOAP_TYPE_tt__Dot11PSKPassphrase
#define SOAP_TYPE_tt__Dot11PSKPassphrase (1143)
typedef std::string tt__Dot11PSKPassphrase;
#endif

#ifndef SOAP_TYPE_tt__AuxiliaryData
#define SOAP_TYPE_tt__AuxiliaryData (1156)
typedef std::string tt__AuxiliaryData;
#endif

#ifndef SOAP_TYPE_tt__TopicNamespaceLocation
#define SOAP_TYPE_tt__TopicNamespaceLocation (1170)
typedef std::string tt__TopicNamespaceLocation;
#endif

#ifndef SOAP_TYPE_tt__Description
#define SOAP_TYPE_tt__Description (1176)
typedef std::string tt__Description;
#endif

#ifndef SOAP_TYPE_tt__XPathExpression
#define SOAP_TYPE_tt__XPathExpression (1177)
typedef std::string tt__XPathExpression;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobMode
#define SOAP_TYPE_tt__RecordingJobMode (1181)
typedef std::string tt__RecordingJobMode;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobState
#define SOAP_TYPE_tt__RecordingJobState (1182)
typedef std::string tt__RecordingJobState;
#endif

#ifndef SOAP_TYPE_wstop__FullTopicExpression
#define SOAP_TYPE_wstop__FullTopicExpression (1184)
typedef std::string wstop__FullTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__ConcreteTopicExpression
#define SOAP_TYPE_wstop__ConcreteTopicExpression (1185)
typedef std::string wstop__ConcreteTopicExpression;
#endif

#ifndef SOAP_TYPE_wstop__SimpleTopicExpression
#define SOAP_TYPE_wstop__SimpleTopicExpression (1186)
typedef std::string wstop__SimpleTopicExpression;
#endif

#ifndef SOAP_TYPE_tt__ReceiverReference
#define SOAP_TYPE_tt__ReceiverReference (1193)
typedef std::string tt__ReceiverReference;
#endif

#ifndef SOAP_TYPE_tt__RecordingReference
#define SOAP_TYPE_tt__RecordingReference (1194)
typedef std::string tt__RecordingReference;
#endif

#ifndef SOAP_TYPE_tt__TrackReference
#define SOAP_TYPE_tt__TrackReference (1195)
typedef std::string tt__TrackReference;
#endif

#ifndef SOAP_TYPE_tt__JobToken
#define SOAP_TYPE_tt__JobToken (1196)
typedef std::string tt__JobToken;
#endif

#ifndef SOAP_TYPE_tt__RecordingJobReference
#define SOAP_TYPE_tt__RecordingJobReference (1197)
typedef std::string tt__RecordingJobReference;
#endif

#ifndef SOAP_TYPE__tds__Capabilities
#define SOAP_TYPE__tds__Capabilities (1861)
typedef tds__DeviceServiceCapabilities _tds__Capabilities;
#endif

#ifndef SOAP_TYPE__tt__VideoSourceConfiguration
#define SOAP_TYPE__tt__VideoSourceConfiguration (1862)
typedef tt__VideoSourceConfiguration _tt__VideoSourceConfiguration;
#endif

#ifndef SOAP_TYPE__tt__AudioSourceConfiguration
#define SOAP_TYPE__tt__AudioSourceConfiguration (1863)
typedef tt__AudioSourceConfiguration _tt__AudioSourceConfiguration;
#endif

#ifndef SOAP_TYPE__tt__VideoEncoderConfiguration
#define SOAP_TYPE__tt__VideoEncoderConfiguration (1864)
typedef tt__VideoEncoderConfiguration _tt__VideoEncoderConfiguration;
#endif

#ifndef SOAP_TYPE__tt__AudioEncoderConfiguration
#define SOAP_TYPE__tt__AudioEncoderConfiguration (1865)
typedef tt__AudioEncoderConfiguration _tt__AudioEncoderConfiguration;
#endif

#ifndef SOAP_TYPE__tt__VideoAnalyticsConfiguration
#define SOAP_TYPE__tt__VideoAnalyticsConfiguration (1866)
typedef tt__VideoAnalyticsConfiguration _tt__VideoAnalyticsConfiguration;
#endif

#ifndef SOAP_TYPE__tt__PTZConfiguration
#define SOAP_TYPE__tt__PTZConfiguration (1867)
typedef tt__PTZConfiguration _tt__PTZConfiguration;
#endif

#ifndef SOAP_TYPE__tt__MetadataConfiguration
#define SOAP_TYPE__tt__MetadataConfiguration (1868)
typedef tt__MetadataConfiguration _tt__MetadataConfiguration;
#endif

#ifndef SOAP_TYPE__tt__AudioOutputConfiguration
#define SOAP_TYPE__tt__AudioOutputConfiguration (1869)
typedef tt__AudioOutputConfiguration _tt__AudioOutputConfiguration;
#endif

#ifndef SOAP_TYPE__tt__AudioDecoderConfiguration
#define SOAP_TYPE__tt__AudioDecoderConfiguration (1870)
typedef tt__AudioDecoderConfiguration _tt__AudioDecoderConfiguration;
#endif

#ifndef SOAP_TYPE__tt__Polygon
#define SOAP_TYPE__tt__Polygon (1871)
typedef tt__Polygon _tt__Polygon;
#endif

#ifndef SOAP_TYPE__tt__Polyline
#define SOAP_TYPE__tt__Polyline (1872)
typedef tt__Polyline _tt__Polyline;
#endif

#ifndef SOAP_TYPE__tt__MetadataStream
#define SOAP_TYPE__tt__MetadataStream (1873)
typedef tt__MetadataStream _tt__MetadataStream;
#endif

#ifndef SOAP_TYPE__wsnt__TopicExpression
#define SOAP_TYPE__wsnt__TopicExpression (1874)
typedef wsnt__TopicExpressionType _wsnt__TopicExpression;
#endif

#ifndef SOAP_TYPE__wsnt__FixedTopicSet
#define SOAP_TYPE__wsnt__FixedTopicSet (1875)
typedef bool _wsnt__FixedTopicSet;
#endif

#ifndef SOAP_TYPE__wsnt__TopicExpressionDialect
#define SOAP_TYPE__wsnt__TopicExpressionDialect (1876)
typedef std::string _wsnt__TopicExpressionDialect;
#endif

#ifndef SOAP_TYPE__wsnt__ConsumerReference
#define SOAP_TYPE__wsnt__ConsumerReference (1877)
typedef struct wsa5__EndpointReferenceType _wsnt__ConsumerReference;
#endif

#ifndef SOAP_TYPE__wsnt__Filter
#define SOAP_TYPE__wsnt__Filter (1878)
typedef wsnt__FilterType _wsnt__Filter;
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionPolicy
#define SOAP_TYPE__wsnt__SubscriptionPolicy (1879)
typedef wsnt__SubscriptionPolicyType _wsnt__SubscriptionPolicy;
#endif

#ifndef SOAP_TYPE__wsnt__CreationTime
#define SOAP_TYPE__wsnt__CreationTime (1880)
typedef time_t _wsnt__CreationTime;
#endif

#ifndef SOAP_TYPE__wsnt__SubscriptionReference
#define SOAP_TYPE__wsnt__SubscriptionReference (1881)
typedef struct wsa5__EndpointReferenceType _wsnt__SubscriptionReference;
#endif

#ifndef SOAP_TYPE__wsnt__Topic
#define SOAP_TYPE__wsnt__Topic (1882)
typedef wsnt__TopicExpressionType _wsnt__Topic;
#endif

#ifndef SOAP_TYPE__wsnt__ProducerReference
#define SOAP_TYPE__wsnt__ProducerReference (1883)
typedef struct wsa5__EndpointReferenceType _wsnt__ProducerReference;
#endif

#ifndef SOAP_TYPE__wsnt__NotificationMessage
#define SOAP_TYPE__wsnt__NotificationMessage (1884)
typedef wsnt__NotificationMessageHolderType _wsnt__NotificationMessage;
#endif

#ifndef SOAP_TYPE__wsnt__CurrentTime
#define SOAP_TYPE__wsnt__CurrentTime (1885)
typedef time_t _wsnt__CurrentTime;
#endif

#ifndef SOAP_TYPE__wsnt__TerminationTime
#define SOAP_TYPE__wsnt__TerminationTime (1886)
typedef time_t _wsnt__TerminationTime;
#endif

#ifndef SOAP_TYPE__wsnt__ProducerProperties
#define SOAP_TYPE__wsnt__ProducerProperties (1887)
typedef wsnt__QueryExpressionType _wsnt__ProducerProperties;
#endif

#ifndef SOAP_TYPE__wsnt__MessageContent
#define SOAP_TYPE__wsnt__MessageContent (1888)
typedef wsnt__QueryExpressionType _wsnt__MessageContent;
#endif

#ifndef SOAP_TYPE__wsnt__SubscribeCreationFailedFault
#define SOAP_TYPE__wsnt__SubscribeCreationFailedFault (1889)
typedef wsnt__SubscribeCreationFailedFaultType _wsnt__SubscribeCreationFailedFault;
#endif

#ifndef SOAP_TYPE__wsnt__InvalidFilterFault
#define SOAP_TYPE__wsnt__InvalidFilterFault (1890)
typedef wsnt__InvalidFilterFaultType _wsnt__InvalidFilterFault;
#endif

#ifndef SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault
#define SOAP_TYPE__wsnt__TopicExpressionDialectUnknownFault (1891)
typedef wsnt__TopicExpressionDialectUnknownFaultType _wsnt__TopicExpressionDialectUnknownFault;
#endif

#ifndef SOAP_TYPE__wsnt__InvalidTopicExpressionFault
#define SOAP_TYPE__wsnt__InvalidTopicExpressionFault (1892)
typedef wsnt__InvalidTopicExpressionFaultType _wsnt__InvalidTopicExpressionFault;
#endif

#ifndef SOAP_TYPE__wsnt__TopicNotSupportedFault
#define SOAP_TYPE__wsnt__TopicNotSupportedFault (1893)
typedef wsnt__TopicNotSupportedFaultType _wsnt__TopicNotSupportedFault;
#endif

#ifndef SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault
#define SOAP_TYPE__wsnt__MultipleTopicsSpecifiedFault (1894)
typedef wsnt__MultipleTopicsSpecifiedFaultType _wsnt__MultipleTopicsSpecifiedFault;
#endif

#ifndef SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault
#define SOAP_TYPE__wsnt__InvalidProducerPropertiesExpressionFault (1895)
typedef wsnt__InvalidProducerPropertiesExpressionFaultType _wsnt__InvalidProducerPropertiesExpressionFault;
#endif

#ifndef SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault
#define SOAP_TYPE__wsnt__InvalidMessageContentExpressionFault (1896)
typedef wsnt__InvalidMessageContentExpressionFaultType _wsnt__InvalidMessageContentExpressionFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnrecognizedPolicyRequestFault (1897)
typedef wsnt__UnrecognizedPolicyRequestFaultType _wsnt__UnrecognizedPolicyRequestFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault
#define SOAP_TYPE__wsnt__UnsupportedPolicyRequestFault (1898)
typedef wsnt__UnsupportedPolicyRequestFaultType _wsnt__UnsupportedPolicyRequestFault;
#endif

#ifndef SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault
#define SOAP_TYPE__wsnt__NotifyMessageNotSupportedFault (1899)
typedef wsnt__NotifyMessageNotSupportedFaultType _wsnt__NotifyMessageNotSupportedFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableInitialTerminationTimeFault (1900)
typedef wsnt__UnacceptableInitialTerminationTimeFaultType _wsnt__UnacceptableInitialTerminationTimeFault;
#endif

#ifndef SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault
#define SOAP_TYPE__wsnt__NoCurrentMessageOnTopicFault (1901)
typedef wsnt__NoCurrentMessageOnTopicFaultType _wsnt__NoCurrentMessageOnTopicFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnableToGetMessagesFault
#define SOAP_TYPE__wsnt__UnableToGetMessagesFault (1902)
typedef wsnt__UnableToGetMessagesFaultType _wsnt__UnableToGetMessagesFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnableToDestroyPullPointFault
#define SOAP_TYPE__wsnt__UnableToDestroyPullPointFault (1903)
typedef wsnt__UnableToDestroyPullPointFaultType _wsnt__UnableToDestroyPullPointFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnableToCreatePullPointFault
#define SOAP_TYPE__wsnt__UnableToCreatePullPointFault (1904)
typedef wsnt__UnableToCreatePullPointFaultType _wsnt__UnableToCreatePullPointFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault
#define SOAP_TYPE__wsnt__UnacceptableTerminationTimeFault (1905)
typedef wsnt__UnacceptableTerminationTimeFaultType _wsnt__UnacceptableTerminationTimeFault;
#endif

#ifndef SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault
#define SOAP_TYPE__wsnt__UnableToDestroySubscriptionFault (1906)
typedef wsnt__UnableToDestroySubscriptionFaultType _wsnt__UnableToDestroySubscriptionFault;
#endif

#ifndef SOAP_TYPE__wsnt__PauseFailedFault
#define SOAP_TYPE__wsnt__PauseFailedFault (1907)
typedef wsnt__PauseFailedFaultType _wsnt__PauseFailedFault;
#endif

#ifndef SOAP_TYPE__wsnt__ResumeFailedFault
#define SOAP_TYPE__wsnt__ResumeFailedFault (1908)
typedef wsnt__ResumeFailedFaultType _wsnt__ResumeFailedFault;
#endif

#ifndef SOAP_TYPE__wsrfbf__BaseFault
#define SOAP_TYPE__wsrfbf__BaseFault (1909)
typedef wsrfbf__BaseFaultType _wsrfbf__BaseFault;
#endif

#ifndef SOAP_TYPE__wstop__TopicNamespace
#define SOAP_TYPE__wstop__TopicNamespace (1910)
typedef wstop__TopicNamespaceType _wstop__TopicNamespace;
#endif

#ifndef SOAP_TYPE__wstop__TopicSet
#define SOAP_TYPE__wstop__TopicSet (1911)
typedef wstop__TopicSetType _wstop__TopicSet;
#endif

#ifndef SOAP_TYPE__wstop__topicNamespaceLocation
#define SOAP_TYPE__wstop__topicNamespaceLocation (1912)
typedef std::string _wstop__topicNamespaceLocation;
#endif

#ifndef SOAP_TYPE__wstop__topic
#define SOAP_TYPE__wstop__topic (1913)
typedef bool _wstop__topic;
#endif

#ifndef SOAP_TYPE__tmd__Capabilities
#define SOAP_TYPE__tmd__Capabilities (1914)
typedef tmd__Capabilities _tmd__Capabilities;
#endif

#ifndef SOAP_TYPE__trt__Capabilities
#define SOAP_TYPE__trt__Capabilities (1915)
typedef trt__Capabilities _trt__Capabilities;
#endif

#ifndef SOAP_TYPE__tls__Capabilities
#define SOAP_TYPE__tls__Capabilities (1916)
typedef tls__Capabilities _tls__Capabilities;
#endif

#ifndef SOAP_TYPE__trp__Capabilities
#define SOAP_TYPE__trp__Capabilities (1917)
typedef trp__Capabilities _trp__Capabilities;
#endif

#ifndef SOAP_TYPE__tse__Capabilities
#define SOAP_TYPE__tse__Capabilities (1918)
typedef tse__Capabilities _tse__Capabilities;
#endif

#ifndef SOAP_TYPE__trv__Capabilities
#define SOAP_TYPE__trv__Capabilities (1919)
typedef trv__Capabilities _trv__Capabilities;
#endif

#ifndef SOAP_TYPE__tev__Capabilities
#define SOAP_TYPE__tev__Capabilities (1920)
typedef tev__Capabilities _tev__Capabilities;
#endif

#ifndef SOAP_TYPE__wsrfr__ResourceUnknownFault
#define SOAP_TYPE__wsrfr__ResourceUnknownFault (1921)
typedef wsrfr__ResourceUnknownFaultType _wsrfr__ResourceUnknownFault;
#endif

#ifndef SOAP_TYPE__wsrfr__ResourceUnavailableFault
#define SOAP_TYPE__wsrfr__ResourceUnavailableFault (1922)
typedef wsrfr__ResourceUnavailableFaultType _wsrfr__ResourceUnavailableFault;
#endif

#ifndef SOAP_TYPE__dn__Hello
#define SOAP_TYPE__dn__Hello (1923)
typedef wsd__HelloType _dn__Hello;
#endif

#ifndef SOAP_TYPE__dn__HelloResponse
#define SOAP_TYPE__dn__HelloResponse (1924)
typedef wsd__ResolveType _dn__HelloResponse;
#endif

#ifndef SOAP_TYPE__dn__Probe
#define SOAP_TYPE__dn__Probe (1925)
typedef wsd__ProbeType _dn__Probe;
#endif

#ifndef SOAP_TYPE__dn__ProbeResponse
#define SOAP_TYPE__dn__ProbeResponse (1926)
typedef wsd__ProbeMatchesType _dn__ProbeResponse;
#endif

#ifndef SOAP_TYPE__dn__Bye
#define SOAP_TYPE__dn__Bye (1927)
typedef wsd__ByeType _dn__Bye;
#endif

#ifndef SOAP_TYPE__dn__ByeResponse
#define SOAP_TYPE__dn__ByeResponse (1928)
typedef wsd__ResolveType _dn__ByeResponse;
#endif

#ifndef SOAP_TYPE__wsd__Hello
#define SOAP_TYPE__wsd__Hello (1929)
typedef wsd__HelloType _wsd__Hello;
#endif

#ifndef SOAP_TYPE__wsd__Bye
#define SOAP_TYPE__wsd__Bye (1930)
typedef wsd__ByeType _wsd__Bye;
#endif

#ifndef SOAP_TYPE__wsd__Probe
#define SOAP_TYPE__wsd__Probe (1931)
typedef wsd__ProbeType _wsd__Probe;
#endif

#ifndef SOAP_TYPE__wsd__ProbeMatches
#define SOAP_TYPE__wsd__ProbeMatches (1932)
typedef wsd__ProbeMatchesType _wsd__ProbeMatches;
#endif

#ifndef SOAP_TYPE__wsd__Resolve
#define SOAP_TYPE__wsd__Resolve (1933)
typedef wsd__ResolveType _wsd__Resolve;
#endif

#ifndef SOAP_TYPE__wsd__ResolveMatches
#define SOAP_TYPE__wsd__ResolveMatches (1934)
typedef wsd__ResolveMatchesType _wsd__ResolveMatches;
#endif

#ifndef SOAP_TYPE__wsd__Types
#define SOAP_TYPE__wsd__Types (1935)
typedef std::string _wsd__Types;
#endif

#ifndef SOAP_TYPE__wsd__Scopes
#define SOAP_TYPE__wsd__Scopes (1936)
typedef wsd__ScopesType _wsd__Scopes;
#endif

#ifndef SOAP_TYPE__wsd__XAddrs
#define SOAP_TYPE__wsd__XAddrs (1937)
typedef std::string _wsd__XAddrs;
#endif

#ifndef SOAP_TYPE__wsd__MetadataVersion
#define SOAP_TYPE__wsd__MetadataVersion (1938)
typedef unsigned int _wsd__MetadataVersion;
#endif

#ifndef SOAP_TYPE__wsd__SupportedMatchingRules
#define SOAP_TYPE__wsd__SupportedMatchingRules (1939)
typedef std::string _wsd__SupportedMatchingRules;
#endif

#ifndef SOAP_TYPE__wsd__Security
#define SOAP_TYPE__wsd__Security (1940)
typedef wsd__SecurityType _wsd__Security;
#endif

#ifndef SOAP_TYPE__wsd__Sig
#define SOAP_TYPE__wsd__Sig (1941)
typedef wsd__SigType _wsd__Sig;
#endif

#ifndef SOAP_TYPE__wsd__AppSequence
#define SOAP_TYPE__wsd__AppSequence (1942)
typedef wsd__AppSequenceType _wsd__AppSequence;
#endif

#ifndef SOAP_TYPE__wsd__Id
#define SOAP_TYPE__wsd__Id (1943)
typedef std::string _wsd__Id;
#endif

#ifndef SOAP_TYPE__wsa__EndpointReference
#define SOAP_TYPE__wsa__EndpointReference (1944)
typedef wsa__EndpointReferenceType _wsa__EndpointReference;
#endif

#ifndef SOAP_TYPE__wsa__MessageID
#define SOAP_TYPE__wsa__MessageID (1945)
typedef wsa__AttributedURI _wsa__MessageID;
#endif

#ifndef SOAP_TYPE__wsa__RelatesTo
#define SOAP_TYPE__wsa__RelatesTo (1946)
typedef wsa__Relationship _wsa__RelatesTo;
#endif

#ifndef SOAP_TYPE__wsa__To
#define SOAP_TYPE__wsa__To (1947)
typedef wsa__AttributedURI _wsa__To;
#endif

#ifndef SOAP_TYPE__wsa__Action
#define SOAP_TYPE__wsa__Action (1948)
typedef wsa__AttributedURI _wsa__Action;
#endif

#ifndef SOAP_TYPE__wsa__From
#define SOAP_TYPE__wsa__From (1949)
typedef wsa__EndpointReferenceType _wsa__From;
#endif

#ifndef SOAP_TYPE__wsa__ReplyTo
#define SOAP_TYPE__wsa__ReplyTo (1950)
typedef wsa__EndpointReferenceType _wsa__ReplyTo;
#endif

#ifndef SOAP_TYPE__wsa__FaultTo
#define SOAP_TYPE__wsa__FaultTo (1951)
typedef wsa__EndpointReferenceType _wsa__FaultTo;
#endif

#ifndef SOAP_TYPE__wsa__ReplyAfter
#define SOAP_TYPE__wsa__ReplyAfter (1952)
typedef wsa__ReplyAfterType _wsa__ReplyAfter;
#endif

#ifndef SOAP_TYPE__wsa__RetryAfter
#define SOAP_TYPE__wsa__RetryAfter (1953)
typedef wsa__RetryAfterType _wsa__RetryAfter;
#endif

#ifndef SOAP_TYPE__tan__Capabilities
#define SOAP_TYPE__tan__Capabilities (1954)
typedef tan__Capabilities _tan__Capabilities;
#endif

#ifndef SOAP_TYPE__trc__Capabilities
#define SOAP_TYPE__trc__Capabilities (1955)
typedef trc__Capabilities _trc__Capabilities;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of WebStub.h */
